{"version":3,"sources":["../src/environment.ts","../src/services/blockchainService.ts","../src/services/podProtocolService.ts","../src/actions/registerAgent.ts","../src/actions/discoverAgents.ts","../src/actions/sendMessage.ts","../src/actions/createChannel.ts","../src/actions/createEscrow.ts","../src/actions/joinChannel.ts","../src/actions/getProtocolStats.ts","../src/actions/getReputation.ts","../src/providers/agentStatusProvider.ts","../src/providers/protocolStatsProvider.ts","../src/evaluators/collaborationEvaluator.ts","../src/evaluators/reputationEvaluator.ts","../src/evaluators/interactionQualityEvaluator.ts","../src/index.ts"],"names":["Connection","Keypair"],"mappings":";;;;;;;;;;;;;;;;;;AAMO,IAAM,cAAA,GAA6C;AAAA,EACxD,WAAA,EAAa,+BAAA;AAAA,EACb,SAAA,EAAW,8CAAA;AAAA,EACX,YAAA,EAAc,CAAC,cAAA,EAAgB,UAAA,EAAY,eAAe,CAAA;AAAA,EAC1D,WAAA,EAAa,uBAAA;AAAA,EACb,YAAA,EAAc;AAChB;AAKO,SAAS,qBAAqB,OAAA,EAAwC;AAC3E,EAAA,OAAO;AAAA,IACL,gBAAA,EAAkB,OAAA,CAAQ,UAAA,CAAW,kBAAkB,CAAA;AAAA,IACvD,cAAA,EAAgB,OAAA,CAAQ,UAAA,CAAW,gBAAgB,CAAA;AAAA,IACnD,sBAAA,EAAwB,OAAA,CAAQ,UAAA,CAAW,wBAAwB,CAAA;AAAA,IACnE,cAAA,EAAgB,OAAA,CAAQ,UAAA,CAAW,gBAAgB,CAAA;AAAA,IACnD,sBAAA,EAAwB,OAAA,CAAQ,UAAA,CAAW,wBAAwB,CAAA;AAAA,IACnE,gBAAA,EAAkB,OAAA,CAAQ,UAAA,CAAW,kBAAkB,CAAA;AAAA,IACvD,iBAAA,EAAmB,OAAA,CAAQ,UAAA,CAAW,mBAAmB;AAAA,GAC3D;AACF;AAVgB,MAAA,CAAA,oBAAA,EAAA,sBAAA,CAAA;AAeT,SAAS,YAAY,OAAA,EAA2C;AACrE,EAAA,MAAM,GAAA,GAAM,qBAAqB,OAAO,CAAA;AAGxC,EAAA,MAAM,YAAA,GAAe,GAAA,CAAI,sBAAA,GACrB,GAAA,CAAI,uBAAuB,KAAA,CAAM,GAAG,CAAA,CAAE,GAAA,CAAI,CAAA,CAAA,KAAK,CAAA,CAAE,IAAA,EAAM,IACvD,cAAA,CAAe,YAAA;AAGnB,EAAA,MAAM,YAAA,GAAe,IAAI,iBAAA,GACrB,GAAA,CAAI,kBAAkB,WAAA,EAAY,KAAM,SACxC,cAAA,CAAe,YAAA;AAEnB,EAAA,OAAO;AAAA,IACL,WAAA,EAAa,GAAA,CAAI,gBAAA,IAAoB,cAAA,CAAe,WAAA;AAAA,IACpD,SAAA,EAAW,GAAA,CAAI,cAAA,IAAkB,cAAA,CAAe,SAAA;AAAA,IAChD,gBAAA,EAAkB,IAAI,sBAAA,IAA0B,EAAA;AAAA,IAChD,SAAA,EAAW,GAAA,CAAI,cAAA,IAAkB,OAAA,CAAQ,WAAW,IAAA,IAAQ,eAAA;AAAA,IAC5D,YAAA;AAAA,IACA,WAAA,EAAa,GAAA,CAAI,gBAAA,IAAoB,cAAA,CAAe,WAAA;AAAA,IACpD;AAAA,GACF;AACF;AAtBgB,MAAA,CAAA,WAAA,EAAA,aAAA,CAAA;AA2BT,SAAS,eAAe,MAAA,EAA6C;AAC1E,EAAA,MAAM,SAAmB,EAAC;AAG1B,EAAA,IAAI,CAAC,OAAO,WAAA,EAAa;AACvB,IAAA,MAAA,CAAO,KAAK,8BAA8B,CAAA;AAAA;AAG5C,EAAA,IAAI,CAAC,OAAO,SAAA,EAAW;AACrB,IAAA,MAAA,CAAO,KAAK,4BAA4B,CAAA;AAAA;AAG1C,EAAA,IAAI,CAAC,OAAO,gBAAA,EAAkB;AAC5B,IAAA,MAAA,CAAO,KAAK,oCAAoC,CAAA;AAAA;AAIlD,EAAA,IAAI,OAAO,WAAA,IAAe,CAAC,UAAA,CAAW,MAAA,CAAO,WAAW,CAAA,EAAG;AACzD,IAAA,MAAA,CAAO,KAAK,sCAAsC,CAAA;AAAA;AAIpD,EAAA,IAAI,OAAO,WAAA,IAAe,CAAC,UAAA,CAAW,MAAA,CAAO,WAAW,CAAA,EAAG;AACzD,IAAA,MAAA,CAAO,KAAK,sCAAsC,CAAA;AAAA;AAIpD,EAAA,IAAI,OAAO,SAAA,IAAa,CAAC,aAAA,CAAc,MAAA,CAAO,SAAS,CAAA,EAAG;AACxD,IAAA,MAAA,CAAO,KAAK,8CAA8C,CAAA;AAAA;AAI5D,EAAA,IAAI,OAAO,gBAAA,IAAoB,CAAC,aAAA,CAAc,MAAA,CAAO,gBAAgB,CAAA,EAAG;AACtE,IAAA,MAAA,CAAO,KAAK,sDAAsD,CAAA;AAAA;AAIpE,EAAA,IAAI,CAAC,MAAA,CAAO,YAAA,IAAgB,MAAA,CAAO,YAAA,CAAa,WAAW,CAAA,EAAG;AAC5D,IAAA,MAAA,CAAO,KAAK,2CAA2C,CAAA;AAAA;AAGzD,EAAA,OAAO;AAAA,IACL,OAAA,EAAS,OAAO,MAAA,KAAW,CAAA;AAAA,IAC3B;AAAA,GACF;AACF;AA7CgB,MAAA,CAAA,cAAA,EAAA,gBAAA,CAAA;AAkDT,SAAS,yBAAyB,OAAA,EAA0C;AACjF,EAAA,IAAI;AACF,IAAA,MAAM,MAAA,GAAS,YAAY,OAAO,CAAA;AAClC,IAAA,OAAO,eAAe,MAAM,CAAA;AAAA,WACrB,KAAA,EAAO;AACd,IAAA,OAAO;AAAA,MACL,OAAA,EAAS,KAAA;AAAA,MACT,MAAA,EAAQ,CAAC,CAAA,+BAAA,EAAkC,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE;AAAA,KACrG;AAAA;AAEJ;AAVgB,MAAA,CAAA,wBAAA,EAAA,0BAAA,CAAA;AAehB,SAAS,WAAW,GAAA,EAAsB;AACxC,EAAA,IAAI;AACF,IAAA,IAAI,IAAI,GAAG,CAAA;AACX,IAAA,OAAO,IAAA;AAAA,GACT,CAAA,MAAQ;AACN,IAAA,OAAO,KAAA;AAAA;AAEX;AAPS,MAAA,CAAA,UAAA,EAAA,YAAA,CAAA;AAYT,SAAS,cAAc,GAAA,EAAsB;AAC3C,EAAA,MAAM,WAAA,GAAc,yBAAA;AACpB,EAAA,OAAO,WAAA,CAAY,KAAK,GAAG,CAAA,IAAK,IAAI,MAAA,IAAU,EAAA,IAAM,IAAI,MAAA,IAAU,EAAA;AACpE;AAHS,MAAA,CAAA,aAAA,EAAA,eAAA,CAAA;AAQF,SAAS,gBAAgB,OAAA,EAAoF;AAClH,EAAA,IAAI;AACF,IAAA,MAAM,MAAA,GAAS,YAAY,OAAO,CAAA;AAClC,IAAA,MAAM,UAAA,GAAa,eAAe,MAAM,CAAA;AAExC,IAAA,IAAI,CAAC,WAAW,OAAA,EAAS;AACvB,MAAA,OAAO;AAAA,QACL,MAAA,EAAQ,IAAA;AAAA,QACR,OAAO,CAAA,iCAAA,EAAoC,UAAA,CAAW,MAAA,CAAO,IAAA,CAAK,IAAI,CAAC,CAAA;AAAA,OACzE;AAAA;AAGF,IAAA,OAAO;AAAA,MACL,MAAA;AAAA,MACA,KAAA,EAAO;AAAA,KACT;AAAA,WACO,KAAA,EAAO;AACd,IAAA,OAAO;AAAA,MACL,MAAA,EAAQ,IAAA;AAAA,MACR,KAAA,EAAO,kCAAkC,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA;AAAA,KACjG;AAAA;AAEJ;AAtBgB,MAAA,CAAA,eAAA,EAAA,iBAAA,CAAA;ACxIT,IAAM,oBAAN,MAAwB;AAAA,EAR/B;AAQ+B,IAAA,MAAA,CAAA,IAAA,EAAA,mBAAA,CAAA;AAAA;AAAA,EACrB,UAAA;AAAA,EACA,MAAA;AAAA,EACA,OAAA;AAAA,EACA,OAAA;AAAA,EAER,WAAA,CAAY,OAAA,EAAwB,MAAA,EAA2B,OAAA,EAAkB;AAC/E,IAAA,IAAA,CAAK,OAAA,GAAU,OAAA;AACf,IAAA,IAAA,CAAK,MAAA,GAAS,MAAA;AACd,IAAA,IAAA,CAAK,OAAA,GAAU,OAAA;AACf,IAAA,IAAA,CAAK,UAAA,GAAa,IAAI,UAAA,CAAW,MAAA,CAAO,aAAa,WAAW,CAAA;AAAA;AAClE;AAAA;AAAA;AAAA,EAKA,kBAAA,GAAgC;AAC9B,IAAA,OAAO,KAAK,OAAA,CAAQ,SAAA;AAAA;AACtB;AAAA;AAAA;AAAA,EAKA,aAAA,GAA4B;AAC1B,IAAA,OAAO,IAAA,CAAK,UAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,cAAc,SAAA,EAIsC;AACxD,IAAA,IAAI;AAGF,MAAA,MAAM,WAAA,GAAc,IAAI,WAAA,EAAY,CAAE,GAAA;AAAA,QACpC,cAAc,QAAA,CAAS;AAAA,UACrB,UAAA,EAAY,KAAK,OAAA,CAAQ,SAAA;AAAA,UACzB,QAAA,EAAU,KAAK,OAAA,CAAQ,SAAA;AAAA;AAAA,UACvB,QAAA,EAAU;AAAA;AAAA,SACX;AAAA,OACH;AAEA,MAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,UAAA,CAAW,gBAAgB,WAAA,EAAa,CAAC,IAAA,CAAK,OAAO,CAAC,CAAA;AACnF,MAAA,MAAM,IAAA,CAAK,UAAA,CAAW,kBAAA,CAAmB,SAAS,CAAA;AAElD,MAAA,MAAM,OAAA,GAAU,CAAA,MAAA,EAAS,IAAA,CAAK,GAAA,EAAK,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,EAAO,CAAE,SAAS,EAAE,CAAA,CAAE,MAAA,CAAO,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAE9E,MAAA,OAAO;AAAA,QACL,OAAA;AAAA,QACA,eAAA,EAAiB;AAAA,OACnB;AAAA,aACO,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,6BAA6B,KAAK,CAAA;AAChD,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,0BAAA,EAA6B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AAAA;AACvG;AACF;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,WAAA,CAAY,WAAA,EAAqB,OAAA,EAA0E;AAC/G,IAAA,IAAI;AAEF,MAAA,MAAM,WAAA,GAAc,IAAI,WAAA,EAAY,CAAE,GAAA;AAAA,QACpC,cAAc,QAAA,CAAS;AAAA,UACrB,UAAA,EAAY,KAAK,OAAA,CAAQ,SAAA;AAAA,UACzB,QAAA,EAAU,KAAK,OAAA,CAAQ,SAAA;AAAA,UACvB,QAAA,EAAU;AAAA,SACX;AAAA,OACH;AAEA,MAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,UAAA,CAAW,gBAAgB,WAAA,EAAa,CAAC,IAAA,CAAK,OAAO,CAAC,CAAA;AACnF,MAAA,MAAM,IAAA,CAAK,UAAA,CAAW,kBAAA,CAAmB,SAAS,CAAA;AAElD,MAAA,MAAM,SAAA,GAAY,CAAA,IAAA,EAAO,IAAA,CAAK,GAAA,EAAK,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,EAAO,CAAE,SAAS,EAAE,CAAA,CAAE,MAAA,CAAO,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAE9E,MAAA,OAAO;AAAA,QACL,SAAA;AAAA,QACA,eAAA,EAAiB;AAAA,OACnB;AAAA,aACO,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,0BAA0B,KAAK,CAAA;AAC7C,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,wBAAA,EAA2B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AAAA;AACrG;AACF;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,cAAc,WAAA,EAKwC;AAC1D,IAAA,IAAI;AACF,MAAA,MAAM,WAAA,GAAc,IAAI,WAAA,EAAY,CAAE,GAAA;AAAA,QACpC,cAAc,QAAA,CAAS;AAAA,UACrB,UAAA,EAAY,KAAK,OAAA,CAAQ,SAAA;AAAA,UACzB,QAAA,EAAU,KAAK,OAAA,CAAQ,SAAA;AAAA,UACvB,QAAA,EAAA,CAAW,WAAA,CAAY,YAAA,IAAgB,CAAA,IAAK;AAAA;AAAA,SAC7C;AAAA,OACH;AAEA,MAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,UAAA,CAAW,gBAAgB,WAAA,EAAa,CAAC,IAAA,CAAK,OAAO,CAAC,CAAA;AACnF,MAAA,MAAM,IAAA,CAAK,UAAA,CAAW,kBAAA,CAAmB,SAAS,CAAA;AAElD,MAAA,MAAM,SAAA,GAAY,CAAA,QAAA,EAAW,IAAA,CAAK,GAAA,EAAK,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,EAAO,CAAE,SAAS,EAAE,CAAA,CAAE,MAAA,CAAO,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAElF,MAAA,OAAO;AAAA,QACL,SAAA;AAAA,QACA,eAAA,EAAiB;AAAA,OACnB;AAAA,aACO,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,2BAA2B,KAAK,CAAA;AAC9C,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,0BAAA,EAA6B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AAAA;AACvG;AACF;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,YAAY,SAAA,EAA2E;AAC3F,IAAA,IAAI;AACF,MAAA,MAAM,WAAA,GAAc,IAAI,WAAA,EAAY,CAAE,GAAA;AAAA,QACpC,cAAc,QAAA,CAAS;AAAA,UACrB,UAAA,EAAY,KAAK,OAAA,CAAQ,SAAA;AAAA,UACzB,QAAA,EAAU,KAAK,OAAA,CAAQ,SAAA;AAAA,UACvB,QAAA,EAAU;AAAA,SACX;AAAA,OACH;AAEA,MAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,UAAA,CAAW,gBAAgB,WAAA,EAAa,CAAC,IAAA,CAAK,OAAO,CAAC,CAAA;AACnF,MAAA,MAAM,IAAA,CAAK,UAAA,CAAW,kBAAA,CAAmB,SAAS,CAAA;AAElD,MAAA,OAAO;AAAA,QACL,OAAA,EAAS,IAAA;AAAA,QACT,eAAA,EAAiB;AAAA,OACnB;AAAA,aACO,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,uBAAuB,KAAK,CAAA;AAC1C,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,wBAAA,EAA2B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AAAA;AACrG;AACF;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,aAAa,UAAA,EAKwC;AACzD,IAAA,IAAI;AACF,MAAA,MAAM,WAAA,GAAc,IAAI,WAAA,EAAY,CAAE,GAAA;AAAA,QACpC,cAAc,QAAA,CAAS;AAAA,UACrB,UAAA,EAAY,KAAK,OAAA,CAAQ,SAAA;AAAA,UACzB,QAAA,EAAU,KAAK,OAAA,CAAQ,SAAA;AAAA,UACvB,QAAA,EAAU,WAAW,MAAA,GAAS;AAAA;AAAA,SAC/B;AAAA,OACH;AAEA,MAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,UAAA,CAAW,gBAAgB,WAAA,EAAa,CAAC,IAAA,CAAK,OAAO,CAAC,CAAA;AACnF,MAAA,MAAM,IAAA,CAAK,UAAA,CAAW,kBAAA,CAAmB,SAAS,CAAA;AAElD,MAAA,MAAM,QAAA,GAAW,CAAA,OAAA,EAAU,IAAA,CAAK,GAAA,EAAK,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,EAAO,CAAE,SAAS,EAAE,CAAA,CAAE,MAAA,CAAO,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAEhF,MAAA,OAAO;AAAA,QACL,QAAA;AAAA,QACA,eAAA,EAAiB;AAAA,OACnB;AAAA,aACO,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,0BAA0B,KAAK,CAAA;AAC7C,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,yBAAA,EAA4B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AAAA;AACtG;AACF;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,eAAA,GAKH;AACD,IAAA,IAAI;AACF,MAAA,MAAM,CAAC,WAAA,EAAa,MAAM,CAAA,GAAI,MAAM,QAAQ,GAAA,CAAI;AAAA,QAC9C,IAAA,CAAK,WAAW,cAAA,EAAe;AAAA,QAC/B,IAAA,CAAK,WAAW,SAAA;AAAU,OAC3B,CAAA;AAED,MAAA,OAAO;AAAA,QACL,WAAA;AAAA,QACA,WAAA,EAAa,OAAO,KAAA,CAAM,KAAA;AAAA,QAC1B,kBAAkB,WAAA,GAAc,GAAA;AAAA;AAAA,QAChC,MAAA,EAAQ;AAAA,OACV;AAAA,aACO,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,wBAAwB,KAAK,CAAA;AAC3C,MAAA,OAAO;AAAA,QACL,WAAA,EAAa,CAAA;AAAA,QACb,WAAA,EAAa,CAAA;AAAA,QACb,gBAAA,EAAkB,CAAA;AAAA,QAClB,MAAA,EAAQ;AAAA,OACV;AAAA;AACF;AACF;AAAA;AAAA;AAAA,EAKA,MAAM,UAAA,GAA8B;AAClC,IAAA,IAAI;AACF,MAAA,MAAM,UAAU,MAAM,IAAA,CAAK,WAAW,UAAA,CAAW,IAAA,CAAK,QAAQ,SAAS,CAAA;AACvE,MAAA,OAAO,OAAA,GAAU,GAAA;AAAA,aACV,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,wBAAwB,KAAK,CAAA;AAC3C,MAAA,OAAO,CAAA;AAAA;AACT;AACF;AAAA;AAAA;AAAA,EAKA,iBAAiB,OAAA,EAA0B;AACzC,IAAA,IAAI;AACF,MAAA,IAAI,UAAU,OAAO,CAAA;AACrB,MAAA,OAAO,IAAA;AAAA,KACT,CAAA,MAAQ;AACN,MAAA,OAAO,KAAA;AAAA;AACT;AAEJ,CAAA;;;ACxNO,IAAM,sBAAA,GAAN,MAAM,uBAAA,SAA+B,OAAA,CAAsC;AAAA,EApClF;AAoCkF,IAAA,MAAA,CAAA,IAAA,EAAA,wBAAA,CAAA;AAAA;AAAA,EACxE,UAAA,GAAgC,IAAA;AAAA,EAChC,OAAA,GAA0B,IAAA;AAAA,EAC1B,SAAA,GAAsC,IAAA;AAAA,EACtC,KAAA,GAA+B,IAAA;AAAA,EAC/B,iBAAA,GAA8C,IAAA;AAAA,EAEtD,OAAgB,WAAA,GAAc,cAAA;AAAA;AAAA,EAG9B,OAAwB,UAAA,GAAa,8CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMrC,IAAa,qBAAA,GAAgC;AAC3C,IAAA,OAAO,qHAAA;AAAA;AACT,EAEA,WAAA,GAAc;AACZ,IAAA,KAAA,EAAM;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAe,IAAA,GAAsB;AACnC,IAAA,IAAA,CAAK,UAAA,GAAa,IAAA;AAClB,IAAA,IAAA,CAAK,OAAA,GAAU,IAAA;AACf,IAAA,IAAA,CAAK,SAAA,GAAY,IAAA;AACjB,IAAA,IAAA,CAAK,KAAA,GAAQ,IAAA;AACb,IAAA,IAAA,CAAK,iBAAA,GAAoB,IAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,MAAM,WAAW,OAAA,EAAuC;AACtD,IAAA,IAAI;AACF,MAAA,IAAA,CAAK,OAAA,GAAU,OAAA;AAGf,MAAA,IAAA,CAAK,SAAA,GAAY,YAAY,OAAO,CAAA;AACpC,MAAA,MAAM,UAAA,GAAa,cAAA,CAAe,IAAA,CAAK,SAAS,CAAA;AAEhD,MAAA,IAAI,CAAC,WAAW,OAAA,EAAS;AACvB,QAAA,MAAM,IAAI,MAAM,CAAA,iCAAA,EAAoC,UAAA,CAAW,OAAO,IAAA,CAAK,IAAI,CAAC,CAAA,CAAE,CAAA;AAAA;AAIpF,MAAA,IAAA,CAAK,aAAa,IAAIA,UAAAA,CAAW,IAAA,CAAK,SAAA,CAAU,aAAa,WAAW,CAAA;AAGxE,MAAA,IAAI;AACF,QAAA,MAAM,eAAA,GAAkB,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,UAAU,gBAAgB,CAAA;AACnE,QAAA,IAAA,CAAK,OAAA,GAAUC,OAAAA,CAAQ,aAAA,CAAc,eAAe,CAAA;AAAA,eAC7C,KAAA,EAAO;AACd,QAAA,MAAM,IAAI,KAAA,CAAM,CAAA,2CAAA,EAA8C,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AAAA;AAIxH,MAAA,IAAA,CAAK,oBAAoB,IAAI,iBAAA;AAAA,QAC3B,IAAA,CAAK,UAAA;AAAA,QACL,IAAA,CAAK,OAAA;AAAA,QACL,uBAAA,CAAuB;AAAA,OACzB;AACA,MAAA,MAAM,IAAA,CAAK,kBAAkB,UAAA,EAAW;AAGxC,MAAA,IAAA,CAAK,KAAA,GAAQ;AAAA,QACX,KAAA,EAAO,IAAA;AAAA,QACP,YAAA,EAAc,KAAA;AAAA,QACd,eAAA,sBAAqB,GAAA,EAAI;AAAA,QACzB,QAAA,sBAAc,GAAA,EAAI;AAAA,QAClB,UAAU,EAAC;AAAA,QACX,OAAA,sBAAa,GAAA,EAAI;AAAA,QACjB,QAAA,sBAAc,IAAA;AAAK,OACrB;AAGA,MAAA,IAAI,IAAA,CAAK,UAAU,YAAA,EAAc;AAC/B,QAAA,IAAI;AACF,UAAA,MAAM,IAAA,CAAK,aAAA,CAAc,IAAA,CAAK,SAAS,CAAA;AACvC,UAAA,OAAA,CAAQ,IAAI,iDAAiD,CAAA;AAAA,iBACtD,KAAA,EAAO;AACd,UAAA,OAAA,CAAQ,IAAA,CAAK,6BAA6B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AAAA;AACpG;AAGF,MAAA,OAAA,CAAQ,IAAI,+CAA+C,CAAA;AAAA,aACpD,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,8CAA8C,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AACpH,MAAA,MAAM,KAAA;AAAA;AACR;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCA,MAAM,cAAc,MAAA,EAA8C;AAChE,IAAA,IAAI,CAAC,IAAA,CAAK,iBAAA,IAAqB,CAAC,KAAK,KAAA,EAAO;AAC1C,MAAA,MAAM,IAAI,MAAM,yBAAyB,CAAA;AAAA;AAG3C,IAAA,IAAI;AAEF,MAAA,MAAM,KAAA,GAAQ,MAAM,IAAA,CAAK,iBAAA,CAAkB,cAAc,MAAM,CAAA;AAG/D,MAAA,IAAA,CAAK,MAAM,KAAA,GAAQ,KAAA;AACnB,MAAA,IAAA,CAAK,MAAM,YAAA,GAAe,IAAA;AAE1B,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,gCAAA,EAAmC,KAAA,CAAM,OAAO,CAAA,CAAE,CAAA;AAC9D,MAAA,OAAO,KAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,8BAA8B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AACpG,MAAA,MAAM,KAAA;AAAA;AACR;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCA,MAAM,eAAe,MAAA,EAAoD;AACvE,IAAA,IAAI,CAAC,IAAA,CAAK,UAAA,IAAc,CAAC,KAAK,KAAA,EAAO;AACnC,MAAA,MAAM,IAAI,MAAM,yBAAyB,CAAA;AAAA;AAG3C,IAAA,IAAI;AAGF,MAAA,MAAM,UAAA,GAAyB;AAAA,QAC7B;AAAA,UACE,OAAA,EAAS,iBAAA;AAAA,UACT,IAAA,EAAM,sBAAA;AAAA,UACN,WAAA,EAAa,oDAAA;AAAA,UACb,YAAA,EAAc,CAAC,SAAA,EAAW,UAAA,EAAY,iBAAiB,CAAA;AAAA,UACvD,UAAA,EAAY,EAAA;AAAA,UACZ,aAAA,EAAe,aAAA;AAAA,UACf,UAAA,EAAY,IAAI,IAAA,CAAK,IAAA,CAAK,KAAI,GAAI,EAAA,GAAK,KAAK,GAAI,CAAA;AAAA;AAAA,UAChD,MAAA,EAAQ,QAAA;AAAA,UACR,SAAA,EAAW;AAAA,SACb;AAAA,QACA;AAAA,UACE,OAAA,EAAS,iBAAA;AAAA,UACT,IAAA,EAAM,wBAAA;AAAA,UACN,WAAA,EAAa,gDAAA;AAAA,UACb,YAAA,EAAc,CAAC,UAAA,EAAY,eAAA,EAAiB,WAAW,CAAA;AAAA,UACvD,UAAA,EAAY,EAAA;AAAA,UACZ,aAAA,EAAe,aAAA;AAAA,UACf,UAAA,EAAY,IAAI,IAAA,CAAK,IAAA,CAAK,KAAI,GAAI,CAAA,GAAI,KAAK,GAAI,CAAA;AAAA;AAAA,UAC/C,MAAA,EAAQ,QAAA;AAAA,UACR,SAAA,EAAW;AAAA,SACb;AAAA,QACA;AAAA,UACE,OAAA,EAAS,mBAAA;AAAA,UACT,IAAA,EAAM,uBAAA;AAAA,UACN,WAAA,EAAa,kDAAA;AAAA,UACb,YAAA,EAAc,CAAC,SAAA,EAAW,kBAAA,EAAoB,KAAK,CAAA;AAAA,UACnD,UAAA,EAAY,EAAA;AAAA,UACZ,aAAA,EAAe,aAAA;AAAA,UACf,UAAA,EAAY,IAAI,IAAA,CAAK,IAAA,CAAK,KAAI,GAAI,EAAA,GAAK,KAAK,GAAI,CAAA;AAAA;AAAA,UAChD,MAAA,EAAQ,SAAA;AAAA,UACR,SAAA,EAAW;AAAA;AACb,OACF;AAGA,MAAA,IAAI,cAAA,GAAiB,UAAA;AAErB,MAAA,IAAI,MAAA,EAAQ;AACV,QAAA,IAAI,OAAO,YAAA,EAAc;AACvB,UAAA,cAAA,GAAiB,cAAA,CAAe,MAAA;AAAA,YAAO,CAAA,KAAA,KACrC,OAAO,YAAA,CAAc,IAAA,CAAK,SAAO,KAAA,CAAM,YAAA,CAAa,QAAA,CAAS,GAAG,CAAC;AAAA,WACnE;AAAA;AAGF,QAAA,IAAI,OAAO,SAAA,EAAW;AACpB,UAAA,cAAA,GAAiB,eAAe,MAAA,CAAO,CAAA,KAAA,KAAS,KAAA,CAAM,SAAA,KAAc,OAAO,SAAS,CAAA;AAAA;AAGtF,QAAA,IAAI,OAAO,UAAA,EAAY;AACrB,UAAA,MAAM,IAAA,GAAO,MAAA,CAAO,UAAA,CAAW,WAAA,EAAY;AAC3C,UAAA,cAAA,GAAiB,cAAA,CAAe,MAAA;AAAA,YAAO,CAAA,KAAA,KACrC,KAAA,CAAM,IAAA,CAAK,WAAA,EAAY,CAAE,SAAS,IAAI,CAAA,IACtC,KAAA,CAAM,WAAA,CAAY,WAAA,EAAY,CAAE,SAAS,IAAI,CAAA,IAC7C,KAAA,CAAM,YAAA,CAAa,IAAA,CAAK,CAAA,GAAA,KAAO,IAAI,WAAA,EAAY,CAAE,QAAA,CAAS,IAAI,CAAC;AAAA,WACjE;AAAA;AAGF,QAAA,IAAI,OAAO,aAAA,EAAe;AACxB,UAAA,cAAA,GAAiB,eAAe,MAAA,CAAO,CAAA,KAAA,KAAS,KAAA,CAAM,UAAA,IAAc,OAAO,aAAc,CAAA;AAAA;AAG3F,QAAA,IAAI,MAAA,CAAO,MAAA,IAAU,MAAA,CAAO,MAAA,KAAW,KAAA,EAAO;AAC5C,UAAA,cAAA,GAAiB,eAAe,MAAA,CAAO,CAAA,KAAA,KAAS,KAAA,CAAM,MAAA,KAAW,OAAO,MAAM,CAAA;AAAA;AAGhF,QAAA,IAAI,OAAO,KAAA,EAAO;AAChB,UAAA,cAAA,GAAiB,cAAA,CAAe,MAAM,MAAA,CAAO,MAAA,IAAU,IAAI,MAAA,CAAO,MAAA,IAAU,CAAA,IAAK,MAAA,CAAO,KAAK,CAAA;AAAA;AAC/F;AAIF,MAAA,cAAA,CAAe,QAAQ,CAAA,KAAA,KAAS;AAC9B,QAAA,IAAA,CAAK,KAAA,CAAO,eAAA,CAAgB,GAAA,CAAI,KAAA,CAAM,SAAS,KAAK,CAAA;AAAA,OACrD,CAAA;AAED,MAAA,OAAO,cAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,2BAA2B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AACjG,MAAA,MAAM,KAAA;AAAA;AACR;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCA,MAAM,WAAA,CAAY,WAAA,EAAqB,OAAA,EAAiB,OAAA,EAAoD;AAC1G,IAAA,IAAI,CAAC,IAAA,CAAK,iBAAA,IAAqB,CAAC,IAAA,CAAK,OAAO,KAAA,EAAO;AACjD,MAAA,MAAM,IAAI,MAAM,iDAAiD,CAAA;AAAA;AAGnE,IAAA,IAAI;AAEF,MAAA,MAAM,WAAA,GAAc,SAAS,IAAA,IAAQ,MAAA;AACrC,MAAA,MAAM,UAAU,MAAM,IAAA,CAAK,kBAAkB,WAAA,CAAY,WAAA,EAAa,SAAS,WAAW,CAAA;AAG1F,MAAA,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,IAAA,CAAK,OAAO,CAAA;AAEhC,MAAA,OAAA,CAAQ,GAAA,CAAI,iCAAiC,WAAW,CAAA,EAAA,EAAK,QAAQ,SAAA,CAAU,CAAA,EAAG,EAAE,CAAC,CAAA,GAAA,CAAK,CAAA;AAC1F,MAAA,OAAO,OAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,2BAA2B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AACjG,MAAA,MAAM,KAAA;AAAA;AACR;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BA,MAAM,YAAY,MAAA,EAA+C;AAC/D,IAAA,IAAI,CAAC,KAAK,KAAA,EAAO;AACf,MAAA,MAAM,IAAI,MAAM,yBAAyB,CAAA;AAAA;AAG3C,IAAA,IAAI;AACF,MAAA,IAAI,QAAA,GAAW,CAAC,GAAG,IAAA,CAAK,MAAM,QAAQ,CAAA;AAEtC,MAAA,IAAI,MAAA,EAAQ;AACV,QAAA,IAAI,OAAO,QAAA,EAAU;AACnB,UAAA,QAAA,GAAW,SAAS,MAAA,CAAO,CAAA,GAAA,KAAO,GAAA,CAAI,QAAA,KAAa,OAAO,QAAQ,CAAA;AAAA;AAGpE,QAAA,IAAI,OAAO,WAAA,EAAa;AACtB,UAAA,QAAA,GAAW,SAAS,MAAA,CAAO,CAAA,GAAA,KAAO,GAAA,CAAI,WAAA,KAAgB,OAAO,WAAW,CAAA;AAAA;AAG1E,QAAA,IAAI,OAAO,IAAA,EAAM;AACf,UAAA,QAAA,GAAW,SAAS,MAAA,CAAO,CAAA,GAAA,KAAO,GAAA,CAAI,IAAA,KAAS,OAAO,IAAI,CAAA;AAAA;AAG5D,QAAA,IAAI,OAAO,MAAA,EAAQ;AACjB,UAAA,QAAA,GAAW,SAAS,MAAA,CAAO,CAAA,GAAA,KAAO,GAAA,CAAI,MAAA,KAAW,OAAO,MAAM,CAAA;AAAA;AAGhE,QAAA,IAAI,OAAO,KAAA,EAAO;AAChB,UAAA,QAAA,GAAW,SAAS,MAAA,CAAO,CAAA,GAAA,KAAO,GAAA,CAAI,SAAA,IAAa,OAAO,KAAM,CAAA;AAAA;AAGlE,QAAA,IAAI,OAAO,UAAA,EAAY;AACrB,UAAA,QAAA,GAAW,QAAA,CAAS,MAAA,CAAO,CAAA,GAAA,KAAO,GAAA,CAAI,WAAW,MAAM,CAAA;AAAA;AAGzD,QAAA,IAAI,OAAO,KAAA,EAAO;AAChB,UAAA,QAAA,GAAW,QAAA,CAAS,KAAA,CAAM,CAAA,EAAG,MAAA,CAAO,KAAK,CAAA;AAAA;AAC3C;AAGF,MAAA,OAAO,QAAA,CAAS,IAAA,CAAK,CAAC,CAAA,EAAG,CAAA,KAAM,CAAA,CAAE,SAAA,CAAU,OAAA,EAAQ,GAAI,CAAA,CAAE,SAAA,CAAU,OAAA,EAAS,CAAA;AAAA,aACrE,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,2BAA2B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AACjG,MAAA,MAAM,KAAA;AAAA;AACR;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8BA,MAAM,aAAA,CAAc,IAAA,EAAc,WAAA,EAAqB,OAAA,EAAoD;AACzG,IAAA,IAAI,CAAC,IAAA,CAAK,iBAAA,IAAqB,CAAC,IAAA,CAAK,OAAO,KAAA,EAAO;AACjD,MAAA,MAAM,IAAI,MAAM,iDAAiD,CAAA;AAAA;AAGnE,IAAA,IAAI;AAEF,MAAA,MAAM,SAAA,GAAY,SAAS,IAAA,KAAS,SAAA;AACpC,MAAA,MAAM,UAAU,MAAM,IAAA,CAAK,kBAAkB,aAAA,CAAc,IAAA,EAAM,aAAa,SAAS,CAAA;AAGvF,MAAA,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,GAAA,CAAI,OAAA,CAAQ,IAAI,OAAO,CAAA;AAE3C,MAAA,OAAA,CAAQ,IAAI,CAAA,+BAAA,EAAkC,OAAA,CAAQ,IAAI,CAAA,EAAA,EAAK,OAAA,CAAQ,EAAE,CAAA,CAAA,CAAG,CAAA;AAC5E,MAAA,OAAO,OAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,6BAA6B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AACnG,MAAA,MAAM,KAAA;AAAA;AACR;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,MAAM,YAAY,SAAA,EAAqC;AACrD,IAAA,IAAI,CAAC,IAAA,CAAK,iBAAA,IAAqB,CAAC,IAAA,CAAK,OAAO,KAAA,EAAO;AACjD,MAAA,MAAM,IAAI,MAAM,iDAAiD,CAAA;AAAA;AAGnE,IAAA,IAAI;AAEF,MAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,iBAAA,CAAkB,YAAY,SAAS,CAAA;AAElE,MAAA,IAAI,OAAA,EAAS;AAEX,QAAA,MAAM,OAAA,GAAU,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,IAAI,SAAS,CAAA;AACjD,QAAA,IAAI,OAAA,IAAW,CAAC,OAAA,CAAQ,YAAA,CAAa,SAAS,IAAA,CAAK,KAAA,CAAM,KAAA,CAAM,OAAO,CAAA,EAAG;AACvE,UAAA,OAAA,CAAQ,YAAA,CAAa,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,MAAM,OAAO,CAAA;AAClD,UAAA,OAAA,CAAQ,YAAA,uBAAmB,IAAA,EAAK;AAAA;AAClC;AAGF,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,8BAAA,EAAiC,SAAS,CAAA,CAAE,CAAA;AACxD,MAAA,OAAO,OAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,2BAA2B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AACjG,MAAA,OAAO,KAAA;AAAA;AACT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,MAAM,aAAa,SAAA,EAAqC;AACtD,IAAA,IAAI,CAAC,IAAA,CAAK,KAAA,EAAO,KAAA,EAAO;AACtB,MAAA,MAAM,IAAI,MAAM,iDAAiD,CAAA;AAAA;AAGnE,IAAA,IAAI;AACF,MAAA,MAAM,OAAA,GAAU,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,IAAI,SAAS,CAAA;AACjD,MAAA,IAAI,OAAA,EAAS;AACX,QAAA,OAAA,CAAQ,YAAA,GAAe,QAAQ,YAAA,CAAa,MAAA,CAAO,QAAM,EAAA,KAAO,IAAA,CAAK,KAAA,CAAO,KAAA,CAAO,OAAO,CAAA;AAC1F,QAAA,OAAA,CAAQ,YAAA,uBAAmB,IAAA,EAAK;AAAA;AAGlC,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,cAAA,EAAiB,SAAS,CAAA,CAAE,CAAA;AACxC,MAAA,OAAO,IAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,4BAA4B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AAClG,MAAA,OAAO,KAAA;AAAA;AACT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,MAAM,uBAAuB,SAAA,EAAwC;AACnE,IAAA,IAAI,CAAC,KAAK,KAAA,EAAO;AACf,MAAA,MAAM,IAAI,MAAM,yBAAyB,CAAA;AAAA;AAG3C,IAAA,IAAI;AACF,MAAA,MAAM,OAAA,GAAU,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,IAAI,SAAS,CAAA;AACjD,MAAA,IAAI,CAAC,OAAA,EAAS;AACZ,QAAA,OAAO,EAAC;AAAA;AAGV,MAAA,MAAM,eAA2B,EAAC;AAClC,MAAA,KAAA,MAAW,aAAA,IAAiB,QAAQ,YAAA,EAAc;AAChD,QAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,KAAA,CAAM,eAAA,CAAgB,IAAI,aAAa,CAAA;AAC1D,QAAA,IAAI,KAAA,EAAO;AACT,UAAA,YAAA,CAAa,KAAK,KAAK,CAAA;AAAA;AACzB;AAGF,MAAA,OAAO,YAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,uCAAuC,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AAC7G,MAAA,MAAM,KAAA;AAAA;AACR;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,MAAM,YAAA,CAAa,cAAA,EAAwB,MAAA,EAAgB,SAAiB,YAAA,EAA4C;AACtH,IAAA,IAAI,CAAC,IAAA,CAAK,UAAA,IAAc,CAAC,IAAA,CAAK,OAAO,KAAA,EAAO;AAC1C,MAAA,MAAM,IAAI,MAAM,iDAAiD,CAAA;AAAA;AAGnE,IAAA,IAAI;AACF,MAAA,MAAM,MAAA,GAAoB;AAAA,QACxB,EAAA,EAAI,CAAA,OAAA,EAAU,IAAA,CAAK,GAAA,EAAK,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,EAAO,CAAE,SAAS,EAAE,CAAA,CAAE,MAAA,CAAO,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAAA,QACnE,MAAA;AAAA,QACA,cAAA;AAAA,QACA,OAAA;AAAA,QACA,YAAA;AAAA,QACA,QAAA,EAAU,IAAI,IAAA,CAAK,IAAA,CAAK,KAAI,GAAI,EAAA,GAAK,EAAA,GAAK,EAAA,GAAK,GAAI,CAAA;AAAA;AAAA,QACnD,MAAA,EAAQ,SAAA;AAAA,QACR,eAAA,EAAiB;AAAA,OACnB;AAGA,MAAA,IAAA,CAAK,KAAA,CAAM,OAAA,CAAQ,GAAA,CAAI,MAAA,CAAO,IAAI,MAAM,CAAA;AAExC,MAAA,OAAA,CAAQ,IAAI,CAAA,gBAAA,EAAmB,MAAA,CAAO,EAAE,CAAA,EAAA,EAAK,MAAM,CAAA,KAAA,CAAO,CAAA;AAC1D,MAAA,OAAO,MAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,4BAA4B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AAClG,MAAA,MAAM,KAAA;AAAA;AACR;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,MAAM,mBAAmB,OAAA,EAAmC;AAC1D,IAAA,IAAI,CAAC,KAAK,KAAA,EAAO;AACf,MAAA,MAAM,IAAI,MAAM,yBAAyB,CAAA;AAAA;AAG3C,IAAA,IAAI;AACF,MAAA,MAAM,QAAA,GAAW,OAAA,IAAW,IAAA,CAAK,KAAA,CAAM,KAAA,EAAO,OAAA;AAC9C,MAAA,IAAI,CAAC,QAAA,EAAU;AACb,QAAA,MAAM,IAAI,MAAM,4CAA4C,CAAA;AAAA;AAI9D,MAAA,IAAI,QAAA,KAAa,IAAA,CAAK,KAAA,CAAM,KAAA,EAAO,OAAA,EAAS;AAC1C,QAAA,OAAO,IAAA,CAAK,MAAM,KAAA,CAAM,UAAA;AAAA;AAI1B,MAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,KAAA,CAAM,eAAA,CAAgB,IAAI,QAAQ,CAAA;AACrD,MAAA,IAAI,KAAA,EAAO;AACT,QAAA,OAAO,KAAA,CAAM,UAAA;AAAA;AAIf,MAAA,OAAO,EAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,mCAAmC,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AACzG,MAAA,MAAM,KAAA;AAAA;AACR;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,MAAM,gBAAA,GAAiC;AACrC,IAAA,IAAI,CAAC,KAAK,KAAA,EAAO;AACf,MAAA,MAAM,IAAI,MAAM,yBAAyB,CAAA;AAAA;AAG3C,IAAA,IAAI;AACF,MAAA,OAAO;AAAA,QACL,WAAA,EAAa,IAAA,CAAK,KAAA,CAAM,eAAA,CAAgB,IAAA,GAAO,CAAA;AAAA;AAAA,QAC/C,aAAA,EAAe,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,IAAA;AAAA,QACnC,aAAA,EAAe,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,MAAA;AAAA,QACnC,eAAe,KAAA,CAAM,IAAA,CAAK,KAAK,KAAA,CAAM,OAAA,CAAQ,QAAQ,CAAA,CAAE,MAAA,CAAO,CAAC,MAAW,CAAA,CAAE,MAAA,KAAW,aAAa,CAAA,CAAE,MAAA,KAAW,QAAQ,CAAA,CAAE,MAAA;AAAA,QAC3H,QAAA,EAAU,KAAK,KAAA,CAAM,QAAA;AAAA,QACrB,YAAA,EAAc,KAAK,KAAA,CAAM,YAAA;AAAA,QACzB,YAAA,EAAc,KAAK,KAAA,CAAM;AAAA,OAC3B;AAAA,aACO,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,iCAAiC,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AACvG,MAAA,MAAM,KAAA;AAAA;AACR;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,MAAM,WAAA,GAAgC;AACpC,IAAA,IAAI;AACF,MAAA,IAAI,CAAC,KAAK,iBAAA,EAAmB;AAC3B,QAAA,OAAO,KAAA;AAAA;AAET,MAAA,OAAO,MAAM,IAAA,CAAK,iBAAA,CAAkB,WAAA,EAAY;AAAA,aACzC,KAAA,EAAO;AACd,MAAA,OAAO,KAAA;AAAA;AACT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,QAAA,GAAkC;AAChC,IAAA,OAAO,IAAA,CAAK,KAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,SAAA,GAAsC;AACpC,IAAA,OAAO,IAAA,CAAK,SAAA;AAAA;AAEhB;;;ACvzBO,IAAM,aAAA,GAAwB;AAAA;AAAA;AAAA;AAAA,EAInC,IAAA,EAAM,6BAAA;AAAA;AAAA;AAAA;AAAA,EAKN,WAAA,EAAa,kFAAA;AAAA;AAAA;AAAA;AAAA,EAKb,OAAA,EAAS;AAAA,IACP,4BAAA;AAAA,IACA,kBAAA;AAAA,IACA,sBAAA;AAAA,IACA,sBAAA;AAAA,IACA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,QAAA,kBAAU,MAAA,CAAA,OAAO,OAAA,EAAwB,OAAA,EAAiB,KAAA,KAAoC;AAC5F,IAAA,MAAM,OAAA,GAAU,OAAA,CAAQ,OAAA,CAAQ,IAAA,EAAM,aAAY,IAAK,EAAA;AAGvD,IAAA,MAAM,oBAAA,GAAuB;AAAA,MAC3B,UAAA;AAAA,MACA,MAAA;AAAA,MACA,QAAA;AAAA,MACA,OAAA;AAAA,MACA,YAAA;AAAA,MACA,QAAA;AAAA,MACA,SAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,WAAA,GAAc;AAAA,MAClB,cAAA;AAAA,MACA,aAAA;AAAA,MACA,YAAA;AAAA,MACA,UAAA;AAAA,MACA,SAAA;AAAA,MACA,UAAA;AAAA,MACA,OAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,yBAAyB,oBAAA,CAAqB,IAAA;AAAA,MAAK,CAAA,OAAA,KACvD,OAAA,CAAQ,QAAA,CAAS,OAAO;AAAA,KAC1B;AAEA,IAAA,MAAM,gBAAgB,WAAA,CAAY,IAAA;AAAA,MAAK,CAAA,OAAA,KACrC,OAAA,CAAQ,QAAA,CAAS,OAAO;AAAA,KAC1B;AAEA,IAAA,OAAO,sBAAA,IAA0B,aAAA;AAAA,GACnC,EArCU,UAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuEV,yBAAS,MAAA,CAAA,OACP,OAAA,EACA,OAAA,EACA,KAAA,EACA,SACA,QAAA,KACqB;AACrB,IAAA,IAAI;AAEF,MAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,UAAA,CAAW,cAAc,CAAA;AAEpD,MAAA,IAAI,CAAC,UAAA,EAAY;AACf,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAIT,MAAA,MAAM,MAAA,GAAS,YAAY,OAAO,CAAA;AAClC,MAAA,MAAM,UAAA,GAAa,eAAe,MAAM,CAAA;AAExC,MAAA,IAAI,CAAC,WAAW,OAAA,EAAS;AACvB,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM,CAAA;AAAA,EAAuC,UAAA,CAAW,MAAA,CAAO,GAAA,CAAI,CAAA,GAAA,KAAO,CAAA,OAAA,EAAK,GAAG,CAAA,CAAE,CAAA,CAAE,IAAA,CAAK,IAAI,CAAC;;AAAA,wCAAA;AAAA,WACjG,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAIT,MAAA,MAAM,YAAA,GAAe,WAAW,QAAA,EAAS;AACzC,MAAA,IAAI,cAAc,YAAA,EAAc;AAC9B,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM,CAAA,cAAA,EAAY,YAAA,CAAa,KAAA,EAAO,IAAI,CAAA;;AAAA,oBAAA,EACpB,YAAA,CAAa,OAAO,OAAO;AAAA,sBAAA,EACzB,YAAA,CAAa,OAAO,UAAU;AAAA,wBAAA,EAC5B,YAAA,CAAa,KAAA,EAAO,YAAA,CAAa,IAAA,CAAK,IAAI,CAAC;AAAA,kBAAA,EACjD,YAAA,CAAa,OAAO,aAAa,CAAA;AAAA,WACtD,CAAA;AAAA;AAEH,QAAA,OAAO,IAAA;AAAA;AAIT,MAAA,MAAM,KAAA,GAAQ,MAAM,UAAA,CAAW,aAAA,CAAc,MAAM,CAAA;AAGnD,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,CAAA,yCAAA,EAAqC,KAAA,CAAM,IAAI,CAAA;;AAAA,oBAAA,EAC/B,MAAM,OAAO;AAAA,8BAAA,EACH,MAAM,UAAU;AAAA,wBAAA,EACtB,KAAA,CAAM,YAAA,CAAa,IAAA,CAAK,IAAI,CAAC;AAAA,0BAAA,EAC3B,MAAM,aAAa;AAAA,6BAAA,EAAA,iBAChB,IAAI,IAAA,EAAK,EAAE,cAAA,EAAgB;;AAAA,wFAAA;AAAA,SAE3D,CAAA;AAAA;AAGH,MAAA,OAAO,IAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,uBAAuB,KAAK,CAAA;AAG1C,MAAA,MAAM,eAAe,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,OAAO,KAAK,CAAA;AAC1E,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,CAAA;;AAAA,EAAkD,YAAY;;AAAA,yJAAA;AAAA,SAGrE,CAAA;AAAA;AAGH,MAAA,OAAO,KAAA;AAAA;AACT,GACF,EAhFS,SAAA,CAAA;AAAA;AAAA;AAAA;AAAA,EAqFT,QAAA,EAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,iIAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF,KACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,4GAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF,KACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,2IAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF;AACF;AAEJ,CAAA;;;ACnQO,IAAM,oBAAA,GAA+B;AAAA,EAC1C,IAAA,EAAM,8BAAA;AAAA,EACN,WAAA,EAAa,uEAAA;AAAA,EACb,OAAA,EAAS;AAAA,IACP,iBAAA;AAAA,IACA,aAAA;AAAA,IACA,eAAA;AAAA,IACA,aAAA;AAAA,IACA;AAAA,GACF;AAAA,EAEA,QAAA,kBAAU,MAAA,CAAA,OAAO,OAAA,EAAwB,OAAA,KAAsC;AAC7E,IAAA,MAAM,UAAA,GAAa,yBAAyB,OAAO,CAAA;AACnD,IAAA,IAAI,CAAC,WAAW,OAAA,EAAS;AACvB,MAAA,OAAA,CAAQ,MAAM,CAAA,oCAAA,EAAuC,UAAA,CAAW,OAAO,IAAA,CAAK,IAAI,CAAC,CAAA,CAAE,CAAA;AACnF,MAAA,OAAO,KAAA;AAAA;AAET,IAAA,OAAO,IAAA;AAAA,GACT,EAPU,UAAA,CAAA;AAAA,EASV,yBAAS,MAAA,CAAA,OACP,OAAA,EACA,OAAA,EACA,KAAA,EACA,UACA,QAAA,KACqB;AACrB,IAAA,IAAI;AACF,MAAA,OAAA,CAAQ,KAAK,6CAA6C,CAAA;AAE1D,MAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,UAAA,CAAW,cAAc,CAAA;AAEpD,MAAA,IAAI,CAAC,UAAA,EAAY;AACf,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAGT,MAAA,MAAM,YAAA,GAAe,WAAW,QAAA,EAAS;AACzC,MAAA,IAAI,CAAC,cAAc,YAAA,EAAc;AAC/B,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAGT,MAAA,MAAM,WAAA,GAAA,CAAe,OAAA,CAAQ,OAAA,CAAQ,IAAA,IAAQ,IAAI,WAAA,EAAY;AAG7D,MAAA,IAAI,UAAA,GAAa,EAAA;AACjB,MAAA,IAAI,WAAA,CAAY,QAAA,CAAS,SAAS,CAAA,EAAG,UAAA,GAAa,SAAA;AAAA,WAAA,IACzC,WAAA,CAAY,QAAA,CAAS,UAAU,CAAA,EAAG,UAAA,GAAa,UAAA;AAAA,WAAA,IAC/C,WAAA,CAAY,QAAA,CAAS,SAAS,CAAA,EAAG,UAAA,GAAa,SAAA;AAEvD,MAAA,MAAM,MAAA,GAAS,aAAa,EAAE,YAAA,EAAc,CAAC,UAAU,CAAA,KAAM,EAAC;AAG9D,MAAA,MAAM,MAAA,GAAS,MAAM,UAAA,CAAW,cAAA,CAAe,MAAM,CAAA;AAErD,MAAA,IAAI,MAAA,CAAO,WAAW,CAAA,EAAG;AACvB,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM,CAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,0CAAA;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,IAAA;AAAA;AAGT,MAAA,MAAM,SAAA,GAAY,MAAA,CAAO,KAAA,CAAM,CAAA,EAAG,EAAE,CAAA,CAAE,GAAA;AAAA,QAAI,CAAC,KAAA,EAAO,KAAA,KAChD,CAAA,EAAG,KAAA,GAAQ,CAAC,CAAA,IAAA,EAAO,KAAA,CAAM,IAAA,IAAQ,KAAA,CAAM,OAAO,CAAA;AAAA,cAAA,EAClC,MAAM,OAAO;AAAA,qBAAA,EACN,MAAM,SAAS;AAAA,wBAAA,EACZ,KAAA,CAAM,YAAA,CAAa,IAAA,CAAK,IAAI,CAAC;AAAA,sBAAA,EAC/B,MAAM,UAAU,CAAA;AAAA,kBAAA,EACpB,MAAM,MAAM,CAAA;AAAA,OAC9B,CAAE,KAAK,MAAM,CAAA;AAEb,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,0BAAmB,MAAA,CAAO,MAAM,SAAS,MAAA,CAAO,MAAA,KAAW,CAAA,GAAI,EAAA,GAAK,GAAG,CAAA;;AAAA,EAAS,SAAS;;AAAA;AAAA;AAAA;AAAA;AAAA,4DAAA;AAAA,SAMhG,CAAA;AAAA;AAGH,MAAA,OAAA,CAAQ,IAAA,CAAK,CAAA,WAAA,EAAc,MAAA,CAAO,MAAM,CAAA,OAAA,CAAS,CAAA;AACjD,MAAA,OAAO,IAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,2BAA2B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AAEjG,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,CAAA;;AAAA,EAAoC,iBAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA;AAAA,SACjG,CAAA;AAAA;AAEH,MAAA,OAAO,KAAA;AAAA;AACT,GACF,EArFS,SAAA,CAAA;AAAA,EAuFT,QAAA,EAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,IAAA,EAAM,MAAA;AAAA,QACN,OAAA,EAAS,EAAE,IAAA,EAAM,qBAAA;AAAsB,OACzC;AAAA,MACA;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,6DAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF;AACF;AAEJ,CAAA;AC1HO,IAAM,iBAAA,GAA4B;AAAA,EACvC,IAAA,EAAM,2BAAA;AAAA,EACN,OAAA,EAAS;AAAA,IACP,eAAA;AAAA,IACA,uBAAA;AAAA,IACA,eAAA;AAAA,IACA,wBAAA;AAAA,IACA,oBAAA;AAAA,IACA;AAAA,GACF;AAAA,EACA,WAAA,EAAa,kFAAA;AAAA,EACb,QAAA,kBAAU,MAAA,CAAA,OAAO,OAAA,EAAwB,OAAA,KAAoB;AAC3D,IAAA,MAAM,UAAA,GAAa,yBAAyB,OAAO,CAAA;AACnD,IAAA,IAAI,CAAC,WAAW,OAAA,EAAS;AACvB,MAAA,OAAA,CAAQ,SAAA,MAAe,KAAA,CAAM,CAAA,oCAAA,EAAuC,WAAW,MAAA,CAAO,IAAA,CAAK,IAAI,CAAC,CAAA,CAAE,CAAA;AAClG,MAAA,OAAO,KAAA;AAAA;AAET,IAAA,OAAO,IAAA;AAAA,GACT,EAPU,UAAA,CAAA;AAAA,EAQV,yBAAS,MAAA,CAAA,OACP,OAAA,EACA,OAAA,EACA,KAAA,EACA,UACA,QAAA,KACG;AACH,IAAA,IAAI;AACF,MAAA,OAAA,CAAQ,SAAA,IAAY,EAAG,IAAA,CAAK,oCAAoC,CAAA;AAGhE,MAAA,MAAM,aAAa,OAAA,CAAQ,UAAA;AAAA,QACzB,sBAAA,CAAuB;AAAA,OACzB;AAEA,MAAA,IAAI,CAAC,UAAA,EAAY;AACf,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,4GAAA;AAAA,UACN,OAAA,EAAS;AAAA,YACP,IAAA,EAAM,sCAAA;AAAA,YACN,KAAA,EAAO;AAAA;AACT,SACD,CAAA;AACD,QAAA,OAAO,KAAA;AAAA;AAIT,MAAA,MAAM,YAAA,GAAe,WAAW,QAAA,EAAS;AACzC,MAAA,IAAI,CAAC,YAAA,EAAc,YAAA,IAAgB,CAAC,aAAa,KAAA,EAAO;AACtD,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,mGAAA;AAAA,UACN,OAAA,EAAS;AAAA,YACP,IAAA,EAAM,sBAAA;AAAA,YACN,KAAA,EAAO;AAAA;AACT,SACD,CAAA;AACD,QAAA,OAAO,KAAA;AAAA;AAIT,MAAA,MAAM,WAAA,GAAc,QAAQ,OAAA,CAAQ,IAAA;AAGpC,MAAA,MAAM,cAAA,GAAiB,WAAA,CAAY,KAAA,CAAM,oDAAoD,CAAA;AAE7F,MAAA,IAAI,CAAC,cAAA,EAAgB;AACnB,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,mNAAA;AAAA,UACN,OAAA,EAAS;AAAA,YACP,IAAA,EAAM,mBAAA;AAAA,YACN,KAAA,EAAO;AAAA;AACT,SACD,CAAA;AACD,QAAA,OAAO,KAAA;AAAA;AAGT,MAAA,MAAM,WAAA,GAAc,eAAe,CAAC,CAAA;AAGpC,MAAA,IAAI,cAAA,GAAiB,WAAA;AAGrB,MAAA,MAAM,eAAA,GAAkB;AAAA,QACtB,IAAI,MAAA,CAAO,CAAA,gBAAA,EAAmB,WAAW,IAAI,IAAI,CAAA;AAAA,QACjD,IAAI,MAAA,CAAO,CAAA,QAAA,EAAW,WAAW,IAAI,IAAI,CAAA;AAAA,QACzC,IAAI,MAAA,CAAO,CAAA,QAAA,EAAW,WAAW,IAAI,IAAI,CAAA;AAAA,QACzC,gBAAA;AAAA,QACA;AAAA,OACF;AAEA,MAAA,KAAA,MAAW,WAAW,eAAA,EAAiB;AACrC,QAAA,cAAA,GAAiB,cAAA,CAAe,OAAA,CAAQ,OAAA,EAAS,EAAE,EAAE,IAAA,EAAK;AAAA;AAI5D,MAAA,cAAA,GAAiB,cAAA,CACd,OAAA,CAAQ,4BAAA,EAA8B,EAAE,EACxC,IAAA,EAAK;AAER,MAAA,IAAI,CAAC,cAAA,IAAkB,cAAA,CAAe,MAAA,GAAS,EAAA,EAAI;AACjD,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,6JAAA;AAAA,UACN,OAAA,EAAS;AAAA,YACP,IAAA,EAAM,2BAAA;AAAA,YACN,KAAA,EAAO;AAAA;AACT,SACD,CAAA;AACD,QAAA,OAAO,KAAA;AAAA;AAIT,MAAA,MAAM,YAAA,GAAe,eAAe,WAAA,EAAY;AAChD,MAAA,IAAI,WAAA,GAAwD,MAAA;AAC5D,MAAA,IAAI,QAAA,GAAiD,QAAA;AAErD,MAAA,IAAI,aAAa,QAAA,CAAS,QAAQ,KAAK,YAAA,CAAa,QAAA,CAAS,MAAM,CAAA,EAAG;AACpE,QAAA,QAAA,GAAW,QAAA;AAAA,OACb,MAAA,IAAW,aAAa,QAAA,CAAS,WAAW,KAAK,YAAA,CAAa,QAAA,CAAS,UAAU,CAAA,EAAG;AAClF,QAAA,QAAA,GAAW,MAAA;AAAA;AAGb,MAAA,IAAI,aAAa,QAAA,CAAS,MAAM,KAAK,YAAA,CAAa,QAAA,CAAS,QAAQ,CAAA,EAAG;AACpE,QAAA,WAAA,GAAc,MAAA;AAAA,OAChB,MAAA,IAAW,aAAa,QAAA,CAAS,SAAS,KAAK,YAAA,CAAa,QAAA,CAAS,SAAS,CAAA,EAAG;AAC/E,QAAA,WAAA,GAAc,SAAA;AAAA;AAIhB,MAAA,MAAM,WAAA,GAAc,MAAM,UAAA,CAAW,WAAA,CAAY,aAAa,cAAA,EAAgB;AAAA,QAC5E,IAAA,EAAM,WAAA;AAAA,QACN,QAAA;AAAA,QACA,SAAA,EAAW;AAAA,OACZ,CAAA;AAGD,MAAA,MAAM,iBAAiB,cAAA,CAAe;AAAA,QACpC,KAAA;AAAA,QACA,QAAA,EAAU;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,QAAA,CAAA;AAAA,QAgBV,WAAA;AAAA,QACA,cAAA,EAAgB,eAAe,SAAA,CAAU,CAAA,EAAG,GAAG,CAAA,IAAK,cAAA,CAAe,MAAA,GAAS,GAAA,GAAM,KAAA,GAAQ,EAAA,CAAA;AAAA,QAC1F,aAAa,WAAA,CAAY,IAAA;AAAA,QACzB,UAAU,WAAA,CAAY,QAAA;AAAA,QACtB,WAAW,WAAA,CAAY,EAAA;AAAA,QACvB,QAAQ,WAAA,CAAY,MAAA;AAAA,QACpB,WAAW,WAAA,CAAY;AAAA,OACxB,CAAA;AAED,MAAA,MAAM,QAAA,GAAW,MAAM,cAAA,CAAe;AAAA,QACpC,OAAA;AAAA,QACA,OAAA,EAAS,cAAA;AAAA,QACT,YAAY,UAAA,CAAW;AAAA,OACxB,CAAA;AAED,MAAA,MAAM,eAAA,GAAkB,CAAA;;AAAA;AAAA,iBAAA,EAGX,WAAW;AAAA,kBAAA,EACV,YAAY,EAAE;AAAA,YAAA,EACpB,YAAY,IAAI;AAAA,gBAAA,EACZ,YAAY,QAAQ;AAAA,cAAA,EACtB,YAAY,MAAM;AAAA,kBAAA,EACd,WAAA,CAAY,SAAA,GAAY,gBAAA,GAAc,iBAAY;AAAA;;AAAA;AAAA,CAAA,EAInE,cAAA,CAAe,SAAA,CAAU,CAAA,EAAG,GAAG,CAAC,GAAG,cAAA,CAAe,MAAA,GAAS,GAAA,GAAM,KAAA,GAAQ,EAAE,CAAA;;AAAA,EAE5E,YAAY,eAAA,GAAkB,CAAA,sBAAA,EAAyB,WAAA,CAAY,eAAe,KAAK,EAAE;;AAAA,yHAAA,CAAA;AAIrF,MAAA,MAAM,QAAA,CAAS;AAAA,QACb,MAAM,QAAA,IAAY,eAAA;AAAA,QAClB,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,2BAAA;AAAA,UACN,OAAA,EAAS,WAAA;AAAA,UACT,SAAA,EAAW,WAAA;AAAA,UACX,YAAA,EAAc;AAAA,YACZ,uBAAA;AAAA,YACA,gBAAA;AAAA,YACA;AAAA;AACF;AACF,OACD,CAAA;AAED,MAAA,OAAA,CAAQ,SAAA,MAAe,IAAA,CAAK,CAAA,gBAAA,EAAmB,WAAW,CAAA,EAAA,EAAK,WAAA,CAAY,EAAE,CAAA,CAAE,CAAA;AAC/E,MAAA,OAAO,IAAA;AAAA,aAEA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,SAAA,IAAY,EAAG,KAAA,CAAM,CAAA,qBAAA,EAAwB,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAE,CAAA;AAE7G,MAAA,MAAM,QAAA,CAAS;AAAA,QACb,IAAA,EAAM,CAAA;;AAAA,OAAA,EAA0C,iBAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC;;AAAA,4CAAA,CAAA;AAAA,QACtG,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,qBAAA;AAAA,UACN,OAAO,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,OAAO,KAAK;AAAA;AAC9D,OACD,CAAA;AACD,MAAA,OAAO,KAAA;AAAA;AACT,GACF,EAnMS,SAAA,CAAA;AAAA,EAoMT,QAAA,EAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,yGAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF,KACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,oGAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF,KACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,gGAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF;AACF;AAEJ,CAAA;;;ACvQO,IAAM,mBAAA,GAA8B;AAAA,EACzC,IAAA,EAAM,6BAAA;AAAA,EACN,WAAA,EAAa,gEAAA;AAAA,EACb,OAAA,EAAS;AAAA,IACP,gBAAA;AAAA,IACA,cAAA;AAAA,IACA,eAAA;AAAA,IACA;AAAA,GACF;AAAA,EAEA,QAAA,kBAAU,MAAA,CAAA,OAAO,OAAA,EAAwB,OAAA,KAAsC;AAC7E,IAAA,MAAM,IAAA,GAAO,OAAA,CAAQ,OAAA,CAAQ,IAAA,EAAM,aAAY,IAAK,EAAA;AACpD,IAAA,OAAO,IAAA,CAAK,QAAA,CAAS,QAAQ,CAAA,KAAM,IAAA,CAAK,SAAS,SAAS,CAAA,IAAK,IAAA,CAAK,QAAA,CAAS,OAAO,CAAA,CAAA;AAAA,GACtF,EAHU,UAAA,CAAA;AAAA,EAKV,yBAAS,MAAA,CAAA,OACP,OAAA,EACA,OAAA,EACA,KAAA,EACA,UACA,QAAA,KACqB;AACrB,IAAA,IAAI;AACF,MAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,UAAA,CAAW,cAAc,CAAA;AAEpD,MAAA,IAAI,CAAC,UAAA,EAAY;AACf,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAGT,MAAA,MAAM,YAAA,GAAe,WAAW,QAAA,EAAS;AACzC,MAAA,IAAI,CAAC,cAAc,YAAA,EAAc;AAC/B,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAGT,MAAA,MAAM,WAAA,GAAc,OAAA,CAAQ,OAAA,CAAQ,IAAA,IAAQ,EAAA;AAC5C,MAAA,IAAI,WAAA,GAAc,2BAAA;AAGlB,MAAA,MAAM,WAAA,GAAc,WAAA,CAAY,KAAA,CAAM,eAAe,CAAA;AACrD,MAAA,IAAI,WAAA,GAAc,CAAC,CAAA,EAAG;AACpB,QAAA,WAAA,GAAc,YAAY,CAAC,CAAA;AAAA,iBAClB,WAAA,CAAY,WAAA,EAAY,CAAE,QAAA,CAAS,SAAS,CAAA,EAAG;AACxD,QAAA,WAAA,GAAc,2BAAA;AAAA,iBACL,WAAA,CAAY,WAAA,EAAY,CAAE,QAAA,CAAS,UAAU,CAAA,EAAG;AACzD,QAAA,WAAA,GAAc,kBAAA;AAAA;AAGhB,MAAA,MAAM,OAAA,GAAU,MAAM,UAAA,CAAW,aAAA;AAAA,QAC/B,WAAA;AAAA,QACA,CAAA,4BAAA,EAA+B,WAAA,CAAY,WAAA,EAAa,CAAA,CAAA;AAAA,QACxD,EAAE,IAAA,EAAM,QAAA,EAAU,eAAA,EAAiB,EAAA;AAAG,OACxC;AAEA,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,CAAA;;AAAA,UAAA,EACa,QAAQ,IAAI;AAAA,QAAA,EACd,QAAQ,EAAE;AAAA;AAAA;;AAAA,+DAAA;AAAA,SAI5B,CAAA;AAAA;AAGH,MAAA,OAAO,IAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,oCAA+B,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA;AAAA,SAC5F,CAAA;AAAA;AAEH,MAAA,OAAO,KAAA;AAAA;AACT,GACF,EApES,SAAA,CAAA;AAAA,EAsET,QAAA,EAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,IAAA,EAAM,MAAA;AAAA,QACN,OAAA,EAAS,EAAE,IAAA,EAAM,0BAAA;AAA2B,OAC9C;AAAA,MACA;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,2CAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF;AACF;AAEJ,CAAA;;;ACxFO,IAAM,YAAA,GAAuB;AAAA;AAAA;AAAA;AAAA,EAIlC,IAAA,EAAM,4BAAA;AAAA;AAAA;AAAA;AAAA,EAKN,WAAA,EAAa,iFAAA;AAAA;AAAA;AAAA;AAAA,EAKb,OAAA,EAAS;AAAA,IACP,eAAA;AAAA,IACA,cAAA;AAAA,IACA,0BAAA;AAAA,IACA,+BAAA;AAAA,IACA,0BAAA;AAAA,IACA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,QAAA,kBAAU,MAAA,CAAA,OAAO,OAAA,EAAwB,OAAA,EAAiB,KAAA,KAAoC;AAC5F,IAAA,MAAM,OAAA,GAAU,OAAA,CAAQ,OAAA,CAAQ,IAAA,EAAM,aAAY,IAAK,EAAA;AAGvD,IAAA,MAAM,cAAA,GAAiB;AAAA,MACrB,QAAA;AAAA,MACA,gBAAA;AAAA,MACA,UAAA;AAAA,MACA,yBAAA;AAAA,MACA,oBAAA;AAAA,MACA,oBAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,cAAA,GAAiB;AAAA,MACrB,QAAA;AAAA,MACA,OAAA;AAAA,MACA,OAAA;AAAA,MACA,WAAA;AAAA,MACA,MAAA;AAAA,MACA,OAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,aAAA,GAAgB;AAAA,MACpB,KAAA;AAAA,MACA,QAAA;AAAA,MACA,SAAA;AAAA,MACA,OAAA;AAAA,MACA,MAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,mBAAmB,cAAA,CAAe,IAAA;AAAA,MAAK,CAAA,OAAA,KAC3C,OAAA,CAAQ,QAAA,CAAS,OAAO;AAAA,KAC1B;AAEA,IAAA,MAAM,mBAAmB,cAAA,CAAe,IAAA;AAAA,MAAK,CAAA,OAAA,KAC3C,OAAA,CAAQ,QAAA,CAAS,OAAO;AAAA,KAC1B;AAGA,IAAA,OAAO,gBAAA,IAAqB,oBAAoB,aAAA,CAAc,IAAA,CAAK,aAAW,OAAA,CAAQ,QAAA,CAAS,OAAO,CAAC,CAAA;AAAA,GACzG,EA9CU,UAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+EV,yBAAS,MAAA,CAAA,OACP,OAAA,EACA,OAAA,EACA,KAAA,EACA,SACA,QAAA,KACqB;AACrB,IAAA,IAAI;AAEF,MAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,UAAA,CAAW,cAAc,CAAA;AAEpD,MAAA,IAAI,CAAC,UAAA,EAAY;AACf,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAIT,MAAA,MAAM,YAAA,GAAe,WAAW,QAAA,EAAS;AACzC,MAAA,IAAI,CAAC,YAAA,EAAc,YAAA,IAAgB,CAAC,aAAa,KAAA,EAAO;AACtD,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAGT,MAAA,MAAM,WAAA,GAAc,OAAA,CAAQ,OAAA,CAAQ,IAAA,IAAQ,EAAA;AAG5C,MAAA,IAAI,cAAA,GAAiB,EAAA;AACrB,MAAA,IAAI,MAAA,GAAS,CAAA;AACb,MAAA,IAAI,OAAA,GAAU,EAAA;AACd,MAAA,IAAI,eAAyB,EAAC;AAG9B,MAAA,MAAM,YAAA,GAAe,WAAA,CAAY,KAAA,CAAM,oCAAoC,CAAA;AAC3E,MAAA,IAAI,YAAA,IAAgB,YAAA,CAAa,CAAC,CAAA,EAAG;AACnC,QAAA,cAAA,GAAiB,aAAa,CAAC,CAAA;AAAA;AAIjC,MAAA,MAAM,WAAA,GAAc,WAAA,CAAY,KAAA,CAAM,gCAAgC,CAAA;AACtE,MAAA,IAAI,WAAA,IAAe,WAAA,CAAY,CAAC,CAAA,EAAG;AACjC,QAAA,MAAA,GAAS,UAAA,CAAW,WAAA,CAAY,CAAC,CAAC,CAAA;AAAA,OACpC,MAAO;AAEL,QAAA,MAAM,kBAAA,GAAqB,WAAA,CAAY,KAAA,CAAM,iBAAiB,CAAA;AAC9D,QAAA,IAAI,kBAAA,IAAsB,kBAAA,CAAmB,CAAC,CAAA,EAAG;AAC/C,UAAA,MAAA,GAAS,UAAA,CAAW,kBAAA,CAAmB,CAAC,CAAC,CAAA;AAAA;AAC3C;AAIF,MAAA,MAAM,eAAA,GAAkB;AAAA,QACtB,SAAA;AAAA,QAAW,UAAA;AAAA,QAAY,UAAA;AAAA,QAAY,SAAA;AAAA,QAAW,gBAAA;AAAA,QAC9C,aAAA;AAAA,QAAe,YAAA;AAAA,QAAc,eAAA;AAAA,QAAiB;AAAA,OAChD;AAEA,MAAA,MAAM,SAAA,GAAY,YAAY,WAAA,EAAY;AAC1C,MAAA,MAAM,eAAe,eAAA,CAAgB,IAAA,CAAK,aAAW,SAAA,CAAU,QAAA,CAAS,OAAO,CAAC,CAAA;AAChF,MAAA,IAAI,YAAA,EAAc;AAChB,QAAA,OAAA,GAAU,YAAA,CAAa,OAAO,CAAC,CAAA,CAAE,aAAY,GAAI,YAAA,CAAa,KAAA,CAAM,CAAC,CAAA,GAAI,WAAA;AAAA,OAC3E,MAAO;AACL,QAAA,OAAA,GAAU,2BAAA;AAAA;AAIZ,MAAA,IAAI,SAAA,CAAU,QAAA,CAAS,SAAS,CAAA,EAAG;AACjC,QAAA,YAAA,GAAe,CAAC,oBAAA,EAAsB,iBAAA,EAAmB,qBAAqB,CAAA;AAAA,OAChF,MAAA,IAAW,SAAA,CAAU,QAAA,CAAS,UAAU,CAAA,EAAG;AACzC,QAAA,YAAA,GAAe,CAAC,iBAAA,EAAmB,eAAA,EAAiB,kBAAkB,CAAA;AAAA,OACxE,MAAA,IAAW,UAAU,QAAA,CAAS,OAAO,KAAK,SAAA,CAAU,QAAA,CAAS,UAAU,CAAA,EAAG;AACxE,QAAA,YAAA,GAAe,CAAC,uBAAA,EAAyB,qBAAA,EAAuB,eAAe,CAAA;AAAA,OACjF,MAAA,IAAW,SAAA,CAAU,QAAA,CAAS,SAAS,CAAA,EAAG;AACxC,QAAA,YAAA,GAAe,CAAC,sBAAA,EAAwB,gBAAA,EAAkB,gBAAgB,CAAA;AAAA,OAC5E,MAAO;AACL,QAAA,YAAA,GAAe,CAAC,sBAAA,EAAwB,mBAAA,EAAqB,kBAAkB,CAAA;AAAA;AAIjF,MAAA,IAAI,CAAC,cAAA,EAAgB;AACnB,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAGT,MAAA,IAAI,UAAU,CAAA,EAAG;AACf,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAIT,MAAA,MAAM,SAAS,MAAM,UAAA,CAAW,aAAa,cAAA,EAAgB,MAAA,EAAQ,SAAS,YAAY,CAAA;AAG1F,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,CAAA;;AAAA,yBAAA,EACqB,OAAO,EAAE;AAAA,sBAAA,EACZ,OAAO,MAAM,CAAA;AAAA,4BAAA,EACP,OAAO,cAAc;AAAA,uBAAA,EAC1B,OAAO,OAAO;AAAA,wBAAA,EACb,MAAA,CAAO,QAAA,CAAS,kBAAA,EAAoB;AAAA;AAAA,EAC/B,MAAA,CAAO,YAAA,CAAa,GAAA,CAAI,CAAA,CAAA,KAAK,CAAA,SAAA,EAAO,CAAC,CAAA,CAAE,CAAA,CAAE,IAAA,CAAK,IAAI,CAAC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4CAAA;AAAA,SAWnF,CAAA;AAAA;AAGH,MAAA,OAAO,IAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,0BAA0B,KAAK,CAAA;AAE7C,MAAA,MAAM,eAAe,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,OAAO,KAAK,CAAA;AAC1E,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,CAAA;;AAAA,EAAqC,YAAY;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,8CAAA;AAAA,SAOxD,CAAA;AAAA;AAGH,MAAA,OAAO,KAAA;AAAA;AACT,GACF,EApJS,SAAA,CAAA;AAAA;AAAA;AAAA;AAAA,EAyJT,QAAA,EAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,IAAA,EAAM,MAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,0EAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF;AACF;AAEJ,CAAA;;;ACrSO,IAAM,WAAA,GAAsB;AAAA;AAAA;AAAA;AAAA,EAIjC,IAAA,EAAM,2BAAA;AAAA;AAAA;AAAA;AAAA,EAKN,WAAA,EAAa,oEAAA;AAAA;AAAA;AAAA;AAAA,EAKb,OAAA,EAAS;AAAA,IACP,cAAA;AAAA,IACA,eAAA;AAAA,IACA,oBAAA;AAAA,IACA,sBAAA;AAAA,IACA,wBAAA;AAAA,IACA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,QAAA,kBAAU,MAAA,CAAA,OAAO,OAAA,EAAwB,OAAA,EAAiB,KAAA,KAAoC;AAC5F,IAAA,MAAM,OAAA,GAAU,OAAA,CAAQ,OAAA,CAAQ,IAAA,EAAM,aAAY,IAAK,EAAA;AAGvD,IAAA,MAAM,YAAA,GAAe;AAAA,MACnB,MAAA;AAAA,MACA,OAAA;AAAA,MACA,YAAA;AAAA,MACA,cAAA;AAAA,MACA,gBAAA;AAAA,MACA,QAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,eAAA,GAAkB;AAAA,MACtB,SAAA;AAAA,MACA,OAAA;AAAA,MACA,MAAA;AAAA,MACA,OAAA;AAAA,MACA,eAAA;AAAA,MACA,MAAA;AAAA,MACA,WAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,iBAAiB,YAAA,CAAa,IAAA;AAAA,MAAK,CAAA,OAAA,KACvC,OAAA,CAAQ,QAAA,CAAS,OAAO;AAAA,KAC1B;AAEA,IAAA,MAAM,oBAAoB,eAAA,CAAgB,IAAA;AAAA,MAAK,CAAA,OAAA,KAC7C,OAAA,CAAQ,QAAA,CAAS,OAAO;AAAA,KAC1B;AAGA,IAAA,MAAM,YAAA,GAAe,uBAAA,CAAwB,IAAA,CAAK,OAAO,CAAA;AAEzD,IAAA,OAAQ,kBAAkB,iBAAA,IAAsB,YAAA;AAAA,GAClD,EAvCU,UAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwEV,yBAAS,MAAA,CAAA,OACP,OAAA,EACA,OAAA,EACA,KAAA,EACA,SACA,QAAA,KACqB;AACrB,IAAA,IAAI;AAEF,MAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,UAAA,CAAW,cAAc,CAAA;AAEpD,MAAA,IAAI,CAAC,UAAA,EAAY;AACf,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAIT,MAAA,MAAM,YAAA,GAAe,WAAW,QAAA,EAAS;AACzC,MAAA,IAAI,CAAC,YAAA,EAAc,YAAA,IAAgB,CAAC,aAAa,KAAA,EAAO;AACtD,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAGT,MAAA,MAAM,WAAA,GAAc,OAAA,CAAQ,OAAA,CAAQ,IAAA,IAAQ,EAAA;AAC5C,MAAA,IAAI,SAAA,GAAY,EAAA;AAChB,MAAA,IAAI,WAAA,GAAc,EAAA;AAGlB,MAAA,MAAM,cAAA,GAAiB,WAAA,CAAY,KAAA,CAAM,0BAA0B,CAAA;AACnE,MAAA,IAAI,cAAA,EAAgB;AAClB,QAAA,SAAA,GAAY,eAAe,CAAC,CAAA;AAAA,OAC9B,MAAO;AAEL,QAAA,MAAM,eAAA,GAAkB,WAAA,CAAY,KAAA,CAAM,eAAe,CAAA;AACzD,QAAA,IAAI,eAAA,EAAiB;AACnB,UAAA,WAAA,GAAc,gBAAgB,CAAC,CAAA;AAAA,SACjC,MAAO;AAEL,UAAA,MAAM,SAAA,GAAY,YAAY,WAAA,EAAY;AAC1C,UAAA,IAAI,SAAA,CAAU,QAAA,CAAS,SAAS,CAAA,EAAG;AACjC,YAAA,SAAA,GAAY,sBAAA;AACZ,YAAA,WAAA,GAAc,iBAAA;AAAA,WAChB,MAAA,IAAW,SAAA,CAAU,QAAA,CAAS,UAAU,CAAA,EAAG;AACzC,YAAA,SAAA,GAAY,wBAAA;AACZ,YAAA,WAAA,GAAc,wBAAA;AAAA,WAChB,MAAA,IAAW,SAAA,CAAU,QAAA,CAAS,MAAM,CAAA,EAAG;AACrC,YAAA,SAAA,GAAY,iBAAA;AACZ,YAAA,WAAA,GAAc,iBAAA;AAAA,WAChB,MAAA,IAAW,SAAA,CAAU,QAAA,CAAS,SAAS,CAAA,EAAG;AACxC,YAAA,SAAA,GAAY,kBAAA;AACZ,YAAA,WAAA,GAAc,kBAAA;AAAA,WAChB,MAAO;AAEL,YAAA,MAAM,SAAA,GAAY,WAAA,CAAY,KAAA,CAAM,sDAAsD,CAAA;AAC1F,YAAA,IAAI,SAAA,EAAW;AACb,cAAA,WAAA,GAAc,SAAA,CAAU,CAAC,CAAA,CAAE,IAAA,EAAK;AAChC,cAAA,SAAA,GAAY,WAAA,CAAY,WAAA,EAAY,CAAE,OAAA,CAAQ,QAAQ,GAAG,CAAA;AAAA;AAC3D;AACF;AACF;AAIF,MAAA,IAAI,CAAC,SAAA,IAAa,CAAC,WAAA,EAAa;AAC9B,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM,CAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAA;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAIT,MAAA,IAAI,CAAC,aAAa,WAAA,EAAa;AAC7B,QAAA,SAAA,GAAY,CAAA,QAAA,EAAW,IAAA,CAAK,GAAA,EAAK,IAAI,IAAA,CAAK,MAAA,EAAO,CAAE,QAAA,CAAS,EAAE,CAAA,CAAE,MAAA,CAAO,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAAA;AAI9E,MAAA,MAAM,OAAA,GAAU,MAAM,UAAA,CAAW,WAAA,CAAY,SAAS,CAAA;AAEtD,MAAA,IAAI,OAAA,EAAS;AAEX,QAAA,MAAM,YAAA,GAAe,MAAM,UAAA,CAAW,sBAAA,CAAuB,SAAS,CAAA;AAEtE,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM,CAAA;;AAAA,6BAAA,EACoB,eAAe,SAAS;AAAA,0BAAA,EACtB,SAAS;AAAA,4BAAA,EACP,YAAA,CAAa,SAAS,CAAC,CAAA;AAAA,sBAAA,EAAA,iBAC7B,IAAI,IAAA,EAAK,EAAE,cAAA,EAAgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,4CAAA,EAYL,aAAa,MAAM,CAAA,cAAA;AAAA,WAClE,CAAA;AAAA;AACH,OACF,MAAO;AACL,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM,CAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAA;AAAA,WAWP,CAAA;AAAA;AACH;AAGF,MAAA,OAAO,OAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,uBAAuB,KAAK,CAAA;AAE1C,MAAA,MAAM,eAAe,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,OAAO,KAAK,CAAA;AAC1E,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,CAAA;;AAAA,EAAmC,YAAY;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gDAAA;AAAA,SAOtD,CAAA;AAAA;AAGH,MAAA,OAAO,KAAA;AAAA;AACT,GACF,EAtJS,SAAA,CAAA;AAAA;AAAA;AAAA;AAAA,EA2JT,QAAA,EAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,wIAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF,KACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,yHAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF,KACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,iJAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF;AACF;AAEJ,CAAA;;;AC9TO,IAAM,gBAAA,GAA2B;AAAA;AAAA;AAAA;AAAA,EAItC,IAAA,EAAM,iCAAA;AAAA;AAAA;AAAA;AAAA,EAKN,WAAA,EAAa,yEAAA;AAAA;AAAA;AAAA;AAAA,EAKb,OAAA,EAAS;AAAA,IACP,mBAAA;AAAA,IACA,yBAAA;AAAA,IACA,yBAAA;AAAA,IACA,mBAAA;AAAA,IACA,qBAAA;AAAA,IACA,oBAAA;AAAA,IACA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,QAAA,kBAAU,MAAA,CAAA,OAAO,OAAA,EAAwB,OAAA,EAAiB,KAAA,KAAoC;AAC5F,IAAA,MAAM,OAAA,GAAU,OAAA,CAAQ,OAAA,CAAQ,IAAA,EAAM,aAAY,IAAK,EAAA;AAGvD,IAAA,MAAM,aAAA,GAAgB;AAAA,MACpB,YAAA;AAAA,MACA,OAAA;AAAA,MACA,WAAA;AAAA,MACA,SAAA;AAAA,MACA,QAAA;AAAA,MACA,QAAA;AAAA,MACA,UAAA;AAAA,MACA,WAAA;AAAA,MACA,QAAA;AAAA,MACA,SAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,gBAAA,GAAmB;AAAA,MACvB,UAAA;AAAA,MACA,SAAA;AAAA,MACA,QAAA;AAAA,MACA,KAAA;AAAA,MACA,UAAA;AAAA,MACA,YAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,cAAA,GAAiB;AAAA,MACrB,MAAA;AAAA,MACA,KAAA;AAAA,MACA,SAAA;AAAA,MACA,OAAA;AAAA,MACA,MAAA;AAAA,MACA,KAAA;AAAA,MACA,SAAA;AAAA,MACA,QAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,kBAAkB,aAAA,CAAc,IAAA;AAAA,MAAK,CAAA,OAAA,KACzC,OAAA,CAAQ,QAAA,CAAS,OAAO;AAAA,KAC1B;AAEA,IAAA,MAAM,qBAAqB,gBAAA,CAAiB,IAAA;AAAA,MAAK,CAAA,OAAA,KAC/C,OAAA,CAAQ,QAAA,CAAS,OAAO;AAAA,KAC1B;AAEA,IAAA,MAAM,mBAAmB,cAAA,CAAe,IAAA;AAAA,MAAK,CAAA,OAAA,KAC3C,OAAA,CAAQ,QAAA,CAAS,OAAO;AAAA,KAC1B;AAGA,IAAA,OAAQ,gBAAA,IAAoB,eAAA,IACpB,gBAAA,IAAoB,kBAAA,IACpB,eAAA,IAAmB,kBAAA;AAAA,GAC7B,EA3DU,UAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4FV,yBAAS,MAAA,CAAA,OACP,OAAA,EACA,OAAA,EACA,KAAA,EACA,SACA,QAAA,KACqB;AACrB,IAAA,IAAI;AAEF,MAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,UAAA,CAAW,cAAc,CAAA;AAEpD,MAAA,IAAI,CAAC,UAAA,EAAY;AACf,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAIT,MAAA,MAAM,KAAA,GAAQ,MAAM,UAAA,CAAW,gBAAA,EAAiB;AAChD,MAAA,MAAM,eAAe,KAAA,CAAM,YAAA;AAG3B,MAAA,MAAM,aAAA,GAAgB,OAAA;AACtB,MAAA,MAAM,eAAA,GAAkB,OAAA;AACxB,MAAA,MAAM,iBAAA,GAAoB,KAAA,CAAM,aAAA,GAAiB,KAAA,CAAM,aAAA,GAAgB,CAAA;AAGvE,MAAA,IAAI,YAAA,GAAe,qBAAA;AACnB,MAAA,IAAI,iBAAA,GAAoB,yBAAA;AAExB,MAAA,IAAI,KAAA,CAAM,cAAc,EAAA,EAAI;AAC1B,QAAA,YAAA,GAAe,mBAAA;AACf,QAAA,iBAAA,GAAoB,sBAAA;AAAA,OACtB,MAAA,IAAW,KAAA,CAAM,WAAA,GAAc,GAAA,EAAK;AAClC,QAAA,YAAA,GAAe,qBAAA;AACf,QAAA,iBAAA,GAAoB,oBAAA;AAAA;AAItB,MAAA,MAAM,eAAA,GAAkB,KAAA,CAAM,WAAA,GAAc,CAAA,GAAA,CAAK,KAAA,CAAM,gBAAgB,KAAA,CAAM,WAAA,EAAa,OAAA,CAAQ,CAAC,CAAA,GAAI,GAAA;AACvG,MAAA,MAAM,yBAAA,GAA4B,KAAA,CAAM,aAAA,GAAgB,CAAA,GAAA,CAAK,KAAA,CAAM,cAAc,KAAA,CAAM,aAAA,EAAe,OAAA,CAAQ,CAAC,CAAA,GAAI,GAAA;AAEnH,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,CAAA;;AAAA;AAAA,2BAAA,EAEyB,KAAA,CAAM,WAAA,CAAY,cAAA,EAAgB;AAAA,8BAAA,EAC/B,KAAA,CAAM,aAAA,CAAc,cAAA,EAAgB;AAAA,6BAAA,EACrC,KAAA,CAAM,aAAA,CAAc,cAAA,EAAgB;AAAA,6BAAA,EACpC,KAAA,CAAM,aAAA,CAAc,cAAA,EAAgB;AAAA,6BAAA,EACpC,YAAY;;AAAA;AAAA,iCAAA,EAGR,eAAe;AAAA,+BAAA,EACjB,yBAAyB,CAAA;AAAA,iCAAA,EACvB,iBAAA,CAAkB,gBAAgB;AAAA,wBAAA,EAC3C,KAAA,CAAM,QAAA,CAAS,cAAA,EAAgB;;AAAA;AAAA,6BAAA,EAG1B,aAAa;AAAA,gCAAA,EACV,eAAe;AAAA,qBAAA,EAC1B,iBAAiB;;AAAA;AAAA,yBAAA,EAGb,KAAA,CAAM,YAAA,GAAe,YAAA,GAAU,WAAM;AAAA,CAAA,IAC3D,YAAA,GAAe,CAAA,uBAAA,EAAqB,YAAA,CAAa,OAAO;AAAA,yBAAA,EAClB,aAAa,UAAU,CAAA;AAAA,2BAAA,EACrB,YAAA,CAAa,YAAA,CAAa,IAAA,CAAK,IAAI,CAAC;AAAA,qBAAA,EAC1C,aAAa,MAAM;AAAA,CAAA,GACtC,CAAA;AAAA,CAAA,CAAA,GAChB;AAAA;AAAA,0BAAA,EAGwB,KAAA,CAAM,cAAc,EAAA,GAAK,MAAA,GAAS,MAAM,WAAA,GAAc,EAAA,GAAK,aAAa,aAAa;AAAA,6BAAA,EAClF,KAAA,CAAM,gBAAgB,GAAA,GAAM,aAAA,GAAgB,MAAM,aAAA,GAAgB,EAAA,GAAK,WAAW,SAAS;AAAA,kCAAA,EACtF,KAAA,CAAM,gBAAgB,EAAA,GAAK,MAAA,GAAS,MAAM,aAAA,GAAgB,CAAA,GAAI,WAAW,YAAY;AAAA,4BAAA,EAC3F,KAAA,CAAM,gBAAgB,CAAA,GAAI,aAAA,GAAgB,MAAM,aAAA,GAAgB,CAAA,GAAI,aAAa,UAAU;;AAAA;AAAA,sCAAA,EAGjF,KAAA,CAAM,aAAA,GAAgB,CAAA,GAAI,UAAA,GAAa,YAAY;AAAA,sCAAA,EACnD,KAAA,CAAM,aAAA,GAAgB,CAAA,GAAI,QAAA,GAAW,SAAS;AAAA,yCAAA,EAC3C,KAAA,CAAM,WAAA,GAAc,EAAA,GAAK,QAAA,GAAW,WAAW;AAAA,4CAAA,EAC5C,KAAA,CAAM,aAAA,GAAgB,EAAA,GAAK,QAAA,GAAW,UAAU;;AAAA,4BAAA,EAAA,iBAElE,IAAI,IAAA,EAAK,EAAE,cAAA,EAAgB;AAAA;AAAA,yCAAA;AAAA,SAG1D,CAAA;AAAA;AAGH,MAAA,OAAO,IAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,yBAAyB,KAAK,CAAA;AAE5C,MAAA,MAAM,eAAe,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,OAAO,KAAK,CAAA;AAC1E,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,CAAA;;AAAA,EAAoD,YAAY;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAA;AAAA,SAWvE,CAAA;AAAA;AAGH,MAAA,OAAO,KAAA;AAAA;AACT,GACF,EApHS,SAAA,CAAA;AAAA;AAAA;AAAA;AAAA,EAyHT,QAAA,EAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,sIAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF,KACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,wHAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF,KACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,8GAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF;AACF;AAEJ,CAAA;;;ACjTO,IAAM,aAAA,GAAwB;AAAA;AAAA;AAAA;AAAA,EAInC,IAAA,EAAM,6BAAA;AAAA;AAAA;AAAA;AAAA,EAKN,WAAA,EAAa,4EAAA;AAAA;AAAA;AAAA;AAAA,EAKb,OAAA,EAAS;AAAA,IACP,gBAAA;AAAA,IACA,kBAAA;AAAA,IACA,kBAAA;AAAA,IACA,mBAAA;AAAA,IACA,oBAAA;AAAA,IACA,2BAAA;AAAA,IACA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,QAAA,kBAAU,MAAA,CAAA,OAAO,OAAA,EAAwB,OAAA,EAAiB,KAAA,KAAoC;AAC5F,IAAA,MAAM,OAAA,GAAU,OAAA,CAAQ,OAAA,CAAQ,IAAA,EAAM,aAAY,IAAK,EAAA;AAGvD,IAAA,MAAM,kBAAA,GAAqB;AAAA,MACzB,YAAA;AAAA,MACA,OAAA;AAAA,MACA,OAAA;AAAA,MACA,QAAA;AAAA,MACA,aAAA;AAAA,MACA,iBAAA;AAAA,MACA,UAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,cAAA,GAAiB;AAAA,MACrB,KAAA;AAAA,MACA,OAAA;AAAA,MACA,MAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,QAAA;AAAA,MACA,SAAA;AAAA,MACA,QAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,iBAAA,GAAoB;AAAA,MACxB,IAAA;AAAA,MACA,MAAA;AAAA,MACA,OAAA;AAAA,MACA,KAAA;AAAA,MACA,KAAA;AAAA,MACA,KAAA;AAAA,MACA,IAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,uBAAuB,kBAAA,CAAmB,IAAA;AAAA,MAAK,CAAA,OAAA,KACnD,OAAA,CAAQ,QAAA,CAAS,OAAO;AAAA,KAC1B;AAEA,IAAA,MAAM,mBAAmB,cAAA,CAAe,IAAA;AAAA,MAAK,CAAA,OAAA,KAC3C,OAAA,CAAQ,QAAA,CAAS,OAAO;AAAA,KAC1B;AAEA,IAAA,MAAM,sBAAsB,iBAAA,CAAkB,IAAA;AAAA,MAAK,CAAA,OAAA,KACjD,OAAA,CAAQ,QAAA,CAAS,OAAO;AAAA,KAC1B;AAGA,IAAA,OAAO,yBAAyB,gBAAA,IAAoB,mBAAA,CAAA;AAAA,GACtD,EAvDU,UAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyFV,yBAAS,MAAA,CAAA,OACP,OAAA,EACA,OAAA,EACA,KAAA,EACA,SACA,QAAA,KACqB;AACrB,IAAA,IAAI;AAEF,MAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,UAAA,CAAW,cAAc,CAAA;AAEpD,MAAA,IAAI,CAAC,UAAA,EAAY;AACf,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAIT,MAAA,MAAM,YAAA,GAAe,WAAW,QAAA,EAAS;AACzC,MAAA,IAAI,CAAC,YAAA,EAAc,YAAA,IAAgB,CAAC,aAAa,KAAA,EAAO;AACtD,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,CAAS;AAAA,YACb,IAAA,EAAM;AAAA,WACP,CAAA;AAAA;AAEH,QAAA,OAAO,KAAA;AAAA;AAGT,MAAA,MAAM,WAAA,GAAc,OAAA,CAAQ,OAAA,CAAQ,IAAA,IAAQ,EAAA;AAC5C,MAAA,IAAI,aAAA,GAAgB,EAAA;AACpB,MAAA,IAAI,cAAA,GAAiB,IAAA;AAGrB,MAAA,MAAM,YAAA,GAAe,WAAA,CAAY,KAAA,CAAM,qCAAqC,CAAA;AAC5E,MAAA,IAAI,YAAA,EAAc;AAChB,QAAA,aAAA,GAAgB,aAAa,CAAC,CAAA;AAC9B,QAAA,cAAA,GAAiB,KAAA;AAAA,OACnB,MAAA,IAAW,WAAA,CAAY,WAAA,EAAY,CAAE,QAAA,CAAS,IAAI,CAAA,IAAK,WAAA,CAAY,WAAA,EAAY,CAAE,QAAA,CAAS,MAAM,CAAA,EAAG;AACjG,QAAA,cAAA,GAAiB,IAAA;AACjB,QAAA,aAAA,GAAgB,aAAa,KAAA,CAAM,OAAA;AAAA,OACrC,MAAO;AAEL,QAAA,cAAA,GAAiB,IAAA;AACjB,QAAA,aAAA,GAAgB,aAAa,KAAA,CAAM,OAAA;AAAA;AAIrC,MAAA,MAAM,aAAa,MAAM,UAAA,CAAW,kBAAA,CAAmB,cAAA,GAAiB,SAAY,aAAa,CAAA;AAGjG,MAAA,IAAI,UAAA,GAAa,EAAA;AACjB,MAAA,IAAI,UAAA,GAAa,EAAA;AACjB,MAAA,IAAI,gBAAA,GAAmB,EAAA;AAEvB,MAAA,IAAI,cAAc,EAAA,EAAI;AACpB,QAAA,UAAA,GAAa,aAAA;AACb,QAAA,UAAA,GAAa,WAAA;AACb,QAAA,gBAAA,GAAmB,kDAAA;AAAA,OACrB,MAAA,IAAW,cAAc,EAAA,EAAI;AAC3B,QAAA,UAAA,GAAa,MAAA;AACb,QAAA,UAAA,GAAa,QAAA;AACb,QAAA,gBAAA,GAAmB,gDAAA;AAAA,OACrB,MAAA,IAAW,cAAc,EAAA,EAAI;AAC3B,QAAA,UAAA,GAAa,MAAA;AACb,QAAA,UAAA,GAAa,WAAA;AACb,QAAA,gBAAA,GAAmB,6CAAA;AAAA,OACrB,MAAA,IAAW,cAAc,EAAA,EAAI;AAC3B,QAAA,UAAA,GAAa,UAAA;AACb,QAAA,UAAA,GAAa,WAAA;AACb,QAAA,gBAAA,GAAmB,4CAAA;AAAA,OACrB,MAAA,IAAW,cAAc,EAAA,EAAI;AAC3B,QAAA,UAAA,GAAa,SAAA;AACb,QAAA,UAAA,GAAa,cAAA;AACb,QAAA,gBAAA,GAAmB,oCAAA;AAAA,OACrB,MAAO;AACL,QAAA,UAAA,GAAa,UAAA;AACb,QAAA,UAAA,GAAa,WAAA;AACb,QAAA,gBAAA,GAAmB,iDAAA;AAAA;AAIrB,MAAA,MAAM,qBAAA,GAAwB,IAAA,CAAK,KAAA,CAAM,UAAA,GAAa,EAAE,CAAA,GAAI,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,EAAE,CAAA;AACzF,MAAA,MAAM,wBAAA,GAA2B,IAAA,CAAK,KAAA,CAAM,UAAA,GAAa,EAAE,CAAA,GAAI,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,EAAE,CAAA;AAC5F,MAAA,MAAM,eAAA,GAAkB,GAAG,GAAA,GAAM,IAAA,CAAK,MAAM,IAAA,CAAK,MAAA,EAAO,GAAI,GAAG,CAAC,CAAA,EAAA,CAAA;AAChE,MAAA,MAAM,YAAA,GAAe,GAAG,EAAA,GAAK,IAAA,CAAK,MAAM,IAAA,CAAK,MAAA,EAAO,GAAI,EAAE,CAAC,CAAA,CAAA,CAAA;AAC3D,MAAA,MAAM,YAAA,GAAe,IAAA,CAAK,KAAA,CAAM,UAAA,GAAa,EAAE,CAAA,GAAI,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,CAAC,CAAA;AAG/E,MAAA,MAAM,kBAAkB,UAAA,IAAc,EAAA,GAAK,QAAA,GAAW,UAAA,IAAc,KAAK,cAAA,GAAiB,UAAA;AAC1F,MAAA,MAAM,gBAAA,GAAmB,IAAA,CAAK,GAAA,CAAI,GAAA,EAAK,UAAA,GAAa,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,EAAE,CAAC,CAAA;AAGlF,MAAA,MAAM,eAAe,cAAA,GAAiB,YAAA,CAAa,QAAQ,YAAA,CAAa,eAAA,CAAgB,IAAI,aAAa,CAAA;AACzG,MAAA,MAAM,SAAA,GAAY,cAAc,IAAA,IAAQ,aAAA;AAExC,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,GAAG,UAAU,CAAA,GAAA,EAAM,iBAAiB,MAAA,GAAS,CAAA,EAAG,SAAS,CAAA,EAAA,CAAI,CAAA;;AAAA,6BAAA,EAEpC,UAAU,CAAA;AAAA,2BAAA,EACZ,UAAU;AAAA,2BAAA,EACV,gBAAgB;;AAAA;AAAA,+BAAA,EAGV,eAAe;AAAA,gCAAA,EACd,gBAAgB,CAAA;AAAA,qCAAA,EACX,qBAAqB;AAAA,wCAAA,EAClB,wBAAwB;AAAA,qCAAA,EAC3B,YAAY;;AAAA;AAAA,oCAAA,EAGb,eAAe;AAAA,4BAAA,EACvB,YAAY;AAAA,0BAAA,EACd,YAAA,EAAc,UAAA,EAAY,cAAA,EAAe,IAAK,UAAU;AAAA,2BAAA,EACvD,cAAA,GAAiB,oBAAe,eAAU;;AAAA,CAAA,IAElE,YAAA,GAAe,CAAA;AAAA,uBAAA,EACoB,aAAa,OAAO;AAAA,2BAAA,EAChB,YAAA,CAAa,YAAA,CAAa,IAAA,CAAK,IAAI,CAAC;AAAA,wBAAA,EACvC,aAAa,SAAS;AAAA,qBAAA,EACzB,aAAa,MAAM;;AAAA,CAAA,GAAS,EAAA,CAAA,GAE9D,CAAA;AAAA,kCAAA,EACgC,IAAA,CAAK,KAAA,CAAM,UAAA,GAAa,GAAG,CAAC,CAAA;AAAA,oCAAA,EAC1B,IAAA,CAAK,KAAA,CAAM,UAAA,GAAa,GAAG,CAAC,CAAA;AAAA,mCAAA,EAC7B,IAAA,CAAK,KAAA,CAAM,UAAA,GAAa,GAAG,CAAC,CAAA;AAAA,iCAAA,EAC9B,IAAA,CAAK,KAAA,CAAM,UAAA,GAAa,GAAG,CAAC,CAAA;;AAAA,YAAA,EAEnD,cAAA,GAAiB,gBAAgB,OAAO,CAAA;AAAA,CAAA,IAC/C,cAAA,GACC,CAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,eAAA,EAMa,IAAA,CAAK,IAAA,CAAK,UAAA,GAAa,EAAE,IAAI,EAAE,CAAA;AAAA,kBAAA,EAC5B,wBAAwB,CAAC,CAAA;AAAA,cAAA,EAC7B,IAAA,CAAK,IAAI,CAAA,EAAG,CAAA,GAAI,KAAK,KAAA,CAAM,UAAA,GAAa,EAAE,CAAC,CAAC,CAAA;AAAA;AAAA,CAAA,GAGxD,CAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA,CAAA,GAWF;AAAA,gCAAA,EAAA,iBAA8B,IAAI,IAAA,EAAK,EAAE,cAAA,EAAgB;AAAA,wDAAA;AAAA,SAEhE,CAAA;AAAA;AAGH,MAAA,OAAO,IAAA;AAAA,aACA,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,+BAA+B,KAAK,CAAA;AAElD,MAAA,MAAM,eAAe,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,OAAO,KAAK,CAAA;AAC1E,MAAA,IAAI,QAAA,EAAU;AACZ,QAAA,MAAM,QAAA,CAAS;AAAA,UACb,IAAA,EAAM,CAAA;;AAAA,EAAuD,YAAY;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oDAAA;AAAA,SAW1E,CAAA;AAAA;AAGH,MAAA,OAAO,KAAA;AAAA;AACT,GACF,EAvLS,SAAA,CAAA;AAAA;AAAA;AAAA;AAAA,EA4LT,QAAA,EAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,4GAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF,KACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,2GAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF,KACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,IAAA,EAAM,WAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM;AAAA;AACR,OACF;AAAA,MACA;AAAA,QACE,IAAA,EAAM,eAAA;AAAA,QACN,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,oHAAA;AAAA,UACN,MAAA,EAAQ;AAAA;AACV;AACF;AACF;AAEJ,CAAA;;;AClYO,IAAM,mBAAA,GAAgC;AAAA,EAC3C,IAAA,EAAM,gBAAA;AAAA,EACN,WAAA,EAAa,oEAAA;AAAA,EACb,GAAA,kBAAK,MAAA,CAAA,OACH,OAAA,EACA,OAAA,EACA,KAAA,KACG;AACH,IAAA,IAAI;AAEF,MAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,UAAA,CAAW,cAAc,CAAA;AAEpD,MAAA,IAAI,CAAC,UAAA,EAAY;AACf,QAAA,OAAO;AAAA,UACL,IAAA,EAAM,+BAAA;AAAA,UACN,MAAA,EAAQ;AAAA,YACN,aAAA,EAAe,KAAA;AAAA,YACf,KAAA,EAAO;AAAA;AACT,SACF;AAAA;AAGF,MAAA,MAAM,WAAA,GAAc,WAAW,QAAA,EAAS;AACxC,MAAA,MAAM,MAAA,GAAS,WAAW,SAAA,EAAU;AAEpC,MAAA,IAAI,CAAC,WAAA,IAAe,CAAC,MAAA,EAAQ;AAC3B,QAAA,OAAO;AAAA,UACL,IAAA,EAAM,iCAAA;AAAA,UACN,MAAA,EAAQ;AAAA,YACN,aAAA,EAAe,KAAA;AAAA,YACf,KAAA,EAAO;AAAA;AACT,SACF;AAAA;AAIF,MAAA,MAAM,WAAA,GAAc;AAAA,QAClB;AAAA,OACF;AAEA,MAAA,MAAM,MAAA,GAAc;AAAA,QAClB,aAAA,EAAe,IAAA;AAAA,QACf,cAAc,WAAA,CAAY;AAAA,OAC5B;AAEA,MAAA,IAAI,WAAA,CAAY,YAAA,IAAgB,WAAA,CAAY,KAAA,EAAO;AACjD,QAAA,WAAA,CAAY,IAAA;AAAA,UACV,yBAAoB,WAAA,CAAY,KAAA,CAAM,IAAI,CAAA,EAAA,EAAK,WAAA,CAAY,MAAM,OAAO,CAAA,CAAA,CAAA;AAAA,UACxE,CAAA,sBAAA,EAAkB,WAAA,CAAY,KAAA,CAAM,UAAU,CAAA,IAAA,CAAA;AAAA,UAC9C,2BAAoB,WAAA,CAAY,KAAA,CAAM,YAAA,CAAa,IAAA,CAAK,IAAI,CAAC,CAAA,CAAA;AAAA,UAC7D,CAAA,kBAAA,EAAc,WAAA,CAAY,KAAA,CAAM,MAAM,CAAA,CAAA;AAAA,UACtC,CAAA,qBAAA,EAAiB,WAAA,CAAY,KAAA,CAAM,SAAS,CAAA,CAAA;AAAA,UAC5C,qBAAc,WAAA,CAAY,KAAA,CAAM,cAAc,KAAA,CAAM,CAAA,EAAG,CAAC,CAAC,CAAA,GAAA,CAAA;AAAA,UACzD,CAAA,uBAAA,EAAmB,WAAA,CAAY,KAAA,CAAM,UAAA,CAAW,gBAAgB,CAAA;AAAA,SAClE;AAEA,QAAA,MAAA,CAAO,KAAA,GAAQ;AAAA,UACb,EAAA,EAAI,YAAY,KAAA,CAAM,OAAA;AAAA,UACtB,IAAA,EAAM,YAAY,KAAA,CAAM,IAAA;AAAA,UACxB,UAAA,EAAY,YAAY,KAAA,CAAM,UAAA;AAAA,UAC9B,YAAA,EAAc,YAAY,KAAA,CAAM,YAAA;AAAA,UAChC,MAAA,EAAQ,YAAY,KAAA,CAAM,MAAA;AAAA,UAC1B,SAAA,EAAW,YAAY,KAAA,CAAM,SAAA;AAAA,UAC7B,aAAA,EAAe,YAAY,KAAA,CAAM;AAAA,SACnC;AAAA,OACF,MAAO;AACL,QAAA,WAAA,CAAY,KAAK,+CAA0C,CAAA;AAAA;AAI7D,MAAA,WAAA,CAAY,IAAA;AAAA,QACV,EAAA;AAAA,QACA,0BAAA;AAAA,QACA,CAAA,4BAAA,EAAwB,WAAA,CAAY,eAAA,CAAgB,IAAI,CAAA,CAAA;AAAA,QACxD,CAAA,iCAAA,EAAwB,WAAA,CAAY,QAAA,CAAS,IAAI,CAAA,CAAA;AAAA,QACjD,CAAA,8BAAA,EAA0B,WAAA,CAAY,QAAA,CAAS,MAAM,CAAA,CAAA;AAAA,QACrD,6BAAsB,KAAA,CAAM,IAAA,CAAK,YAAY,OAAA,CAAQ,MAAA,EAAQ,CAAA,CAAE,MAAA;AAAA,UAAO,CAAC,CAAA,KACrE,CAAA,CAAE,MAAA,KAAW,SAAA,IAAa,EAAE,MAAA,KAAW;AAAA,UACvC,MAAM,CAAA,CAAA;AAAA,QACR,CAAA,qBAAA,EAAiB,WAAA,CAAY,QAAA,CAAS,cAAA,EAAgB,CAAA;AAAA,OACxD;AAEA,MAAA,MAAA,CAAO,YAAA,GAAe;AAAA,QACpB,eAAA,EAAiB,YAAY,eAAA,CAAgB,IAAA;AAAA,QAC7C,cAAA,EAAgB,YAAY,QAAA,CAAS,IAAA;AAAA,QACrC,iBAAA,EAAmB,YAAY,QAAA,CAAS,MAAA;AAAA,QACxC,eAAe,KAAA,CAAM,IAAA,CAAK,YAAY,OAAA,CAAQ,MAAA,EAAQ,CAAA,CAAE,MAAA;AAAA,UAAO,CAAC,CAAA,KAC9D,CAAA,CAAE,MAAA,KAAW,SAAA,IAAa,EAAE,MAAA,KAAW;AAAA,SACzC,CAAE,MAAA;AAAA,QACF,QAAA,EAAU,WAAA,CAAY,QAAA,CAAS,WAAA;AAAY,OAC7C;AAGA,MAAA,WAAA,CAAY,IAAA;AAAA,QACV,EAAA;AAAA,QACA,uBAAA;AAAA,QACA,CAAA,wBAAA,EAAoB,OAAO,WAAW,CAAA,CAAA;AAAA,QACtC,yBAAkB,MAAA,CAAO,SAAA,CAAU,KAAA,CAAM,CAAA,EAAG,CAAC,CAAC,CAAA,GAAA,CAAA;AAAA,QAC9C,CAAA,yBAAA,EAAqB,MAAA,CAAO,YAAA,GAAe,SAAA,GAAY,UAAU,CAAA,CAAA;AAAA,QACjE,MAAA,CAAO,WAAA,GAAc,CAAA,wBAAA,EAAoB,MAAA,CAAO,WAAW,CAAA,CAAA,GAAK;AAAA,OAClE;AAEA,MAAA,MAAA,CAAO,MAAA,GAAS;AAAA,QACd,aAAa,MAAA,CAAO,WAAA;AAAA,QACpB,WAAW,MAAA,CAAO,SAAA;AAAA,QAClB,cAAc,MAAA,CAAO,YAAA;AAAA,QACrB,aAAa,MAAA,CAAO;AAAA,OACtB;AAEA,MAAA,OAAO;AAAA,QACL,IAAA,EAAM,YAAY,MAAA,CAAO,CAAA,IAAA,KAAQ,SAAS,EAAE,CAAA,CAAE,KAAK,IAAI,CAAA;AAAA,QACvD;AAAA,OACF;AAAA,aAEO,KAAA,EAAO;AACd,MAAA,OAAO;AAAA,QACL,IAAA,EAAM,2CAA2C,KAAA,YAAiB,KAAA,GAAQ,MAAM,OAAA,GAAU,MAAA,CAAO,KAAK,CAAC,CAAA,CAAA;AAAA,QACvG,MAAA,EAAQ;AAAA,UACN,aAAA,EAAe,KAAA;AAAA,UACf,OAAO,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,OAAO,KAAK;AAAA;AAC9D,OACF;AAAA;AACF,GACF,EAxHK,KAAA;AAyHP,CAAA;;;AC7HO,IAAM,qBAAA,GAAkC;AAAA,EAC7C,IAAA,EAAM,kBAAA;AAAA,EACN,WAAA,EAAa,gEAAA;AAAA,EACb,GAAA,kBAAK,MAAA,CAAA,OACH,OAAA,EACA,OAAA,EACA,KAAA,KACG;AACH,IAAA,IAAI;AAEF,MAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,UAAA,CAAW,cAAc,CAAA;AAEpD,MAAA,IAAI,CAAC,UAAA,EAAY;AACf,QAAA,OAAO;AAAA,UACL,IAAA,EAAM,wCAAA;AAAA,UACN,MAAA,EAAQ;AAAA,YACN,SAAA,EAAW,KAAA;AAAA,YACX,MAAA,EAAQ;AAAA;AACV,SACF;AAAA;AAIF,MAAA,IAAI,OAAO,UAAA,CAAW,QAAA,KAAa,cAAc,OAAO,UAAA,CAAW,cAAc,UAAA,EAAY;AAC3F,QAAA,OAAO;AAAA,UACL,IAAA,EAAM,gDAAA;AAAA,UACN,MAAA,EAAQ;AAAA,YACN,SAAA,EAAW,KAAA;AAAA,YACX,MAAA,EAAQ;AAAA;AACV,SACF;AAAA;AAGF,MAAA,MAAM,WAAA,GAAc,WAAW,QAAA,EAAS;AACxC,MAAA,MAAM,MAAA,GAAS,WAAW,SAAA,EAAU;AAEpC,MAAA,IAAI,CAAC,WAAA,EAAa;AAChB,QAAA,OAAO;AAAA,UACL,IAAA,EAAM,2CAAA;AAAA,UACN,MAAA,EAAQ;AAAA,YACN,SAAA,EAAW,KAAA;AAAA,YACX,MAAA,EAAQ;AAAA;AACV,SACF;AAAA;AAIF,MAAA,MAAM,YAAA,GAAe,YAAY,YAAA,IAAgB,KAAA;AACjD,MAAA,MAAM,eAAA,GAAkB,WAAA,CAAY,eAAA,GAAkB,WAAA,CAAY,gBAAgB,IAAA,GAAO,CAAA;AACzF,MAAA,MAAM,cAAA,GAAiB,WAAA,CAAY,QAAA,GAAW,WAAA,CAAY,SAAS,IAAA,GAAO,CAAA;AAC1E,MAAA,MAAM,aAAA,GAAgB,WAAA,CAAY,QAAA,GAAW,WAAA,CAAY,SAAS,MAAA,GAAS,CAAA;AAE3E,MAAA,MAAM,YAAA,GAAe;AAAA,QACnB;AAAA,OACF;AAEA,MAAA,IAAI,YAAA,EAAc;AAChB,QAAA,YAAA,CAAa,KAAK,0CAAqC,CAAA;AACvD,QAAA,IAAI,YAAY,KAAA,EAAO;AACrB,UAAA,YAAA,CAAa,KAAK,CAAA,iBAAA,EAAa,WAAA,CAAY,KAAA,CAAM,IAAA,IAAQ,SAAS,CAAA,CAAE,CAAA;AACpE,UAAA,YAAA,CAAa,KAAK,CAAA,sBAAA,EAAkB,WAAA,CAAY,KAAA,CAAM,UAAA,IAAc,EAAE,CAAA,IAAA,CAAM,CAAA;AAAA;AAC9E,OACF,MAAO;AACL,QAAA,YAAA,CAAa,KAAK,+CAA0C,CAAA;AAC5D,QAAA,YAAA,CAAa,KAAK,8DAAuD,CAAA;AAAA;AAG3E,MAAA,YAAA,CAAa,IAAA;AAAA,QACX,EAAA;AAAA,QACA,0BAAA;AAAA,QACA,gCAAyB,eAAe,CAAA,CAAA;AAAA,QACxC,oCAAwB,cAAc,CAAA,CAAA;AAAA,QACtC,6BAAsB,aAAa,CAAA;AAAA,OACrC;AAEA,MAAA,IAAI,MAAA,IAAU,OAAO,WAAA,EAAa;AAChC,QAAA,YAAA,CAAa,IAAA;AAAA,UACX,EAAA;AAAA,UACA,+BAAA;AAAA,UACA,sBAAe,MAAA,CAAO,WAAA,CAAY,SAAS,QAAQ,CAAA,GAAI,WAAW,SAAS,CAAA;AAAA,SAC7E;AAAA;AAGF,MAAA,MAAM,MAAA,GAAS;AAAA,QACb,SAAA,EAAW,IAAA;AAAA,QACX,MAAA,EAAQ,WAAA;AAAA,QACR,YAAA;AAAA,QACA,YAAA,EAAc;AAAA,UACZ,eAAA;AAAA,UACA,cAAA;AAAA,UACA;AAAA,SACF;AAAA,QACA,KAAA,EAAO,YAAY,KAAA,GAAQ;AAAA,UACzB,IAAA,EAAM,YAAY,KAAA,CAAM,IAAA;AAAA,UACxB,UAAA,EAAY,YAAY,KAAA,CAAM,UAAA;AAAA,UAC9B,YAAA,EAAc,YAAY,KAAA,CAAM;AAAA,SAClC,GAAI;AAAA,OACN;AAEA,MAAA,OAAO;AAAA,QACL,IAAA,EAAM,YAAA,CAAa,IAAA,CAAK,IAAI,CAAA;AAAA,QAC5B;AAAA,OACF;AAAA,aAEO,KAAA,EAAO;AACd,MAAA,OAAO;AAAA,QACL,IAAA,EAAM,+CAAA;AAAA,QACN,MAAA,EAAQ;AAAA,UACN,SAAA,EAAW,KAAA;AAAA,UACX,MAAA,EAAQ,OAAA;AAAA,UACR,OAAO,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,OAAO,KAAK;AAAA;AAC9D,OACF;AAAA;AACF,GACF,EA/GK,KAAA;AAgHP,CAAA;;;ACnHO,IAAM,sBAAA,GAAoC;AAAA,EAC/C,IAAA,EAAM,kBAAA;AAAA,EACN,WAAA,EAAa,4FAAA;AAAA,EACb,SAAA,EAAW,KAAA;AAAA,EACX,UAAU,EAAC;AAAA,EACX,QAAA,kBAAU,MAAA,CAAA,OACR,OAAA,EACA,OAAA,KACqB;AAErB,IAAA,IAAI,CAAC,OAAA,CAAQ,OAAA,EAAS,IAAA,EAAM;AAC1B,MAAA,OAAO,KAAA;AAAA;AAIT,IAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,UAAA,CAAW,cAAc,CAAA;AACpD,IAAA,IAAI,CAAC,UAAA,EAAY;AACf,MAAA,OAAO,KAAA;AAAA;AAGT,IAAA,OAAO,IAAA;AAAA,GACT,EAhBU,UAAA,CAAA;AAAA,EAiBV,OAAA,kBAAS,MAAA,CAAA,OACP,OAAA,EACA,OAAA,KACiB;AACjB,IAAA,IAAI;AACF,MAAA,MAAM,IAAA,GAAO,OAAA,CAAQ,OAAA,EAAS,IAAA,EAAM,aAAY,IAAK,EAAA;AAGrD,MAAA,MAAM,qBAAA,GAAwB;AAAA,QAC5B,aAAA;AAAA,QAAe,eAAA;AAAA,QAAiB,eAAA;AAAA,QAAiB,SAAA;AAAA,QAAW,aAAA;AAAA,QAC5D,SAAA;AAAA,QAAW,OAAA;AAAA,QAAS,UAAA;AAAA,QAAY,aAAA;AAAA,QAAe,WAAA;AAAA,QAAa,UAAA;AAAA,QAC5D,SAAA;AAAA,QAAW,MAAA;AAAA,QAAQ,MAAA;AAAA,QAAQ,QAAA;AAAA,QAAU,SAAA;AAAA,QAAW,OAAA;AAAA,QAAS;AAAA,OAC3D;AAEA,MAAA,MAAM,aAAA,GAAgB;AAAA,QACpB,OAAA;AAAA,QAAS,KAAA;AAAA,QAAO,IAAA;AAAA,QAAM,WAAA;AAAA,QAAa,OAAA;AAAA,QAAS,cAAA;AAAA,QAAgB;AAAA,OAC9D;AAEA,MAAA,MAAM,mBAAA,GAAsB;AAAA,QAC1B,QAAA;AAAA,QAAU,aAAA;AAAA,QAAe,SAAA;AAAA,QAAW,KAAA;AAAA,QAAO,KAAA;AAAA,QAAO,OAAA;AAAA,QAAS,UAAA;AAAA,QAC3D,KAAA;AAAA,QAAO,MAAA;AAAA,QAAQ,OAAA;AAAA,QAAS,UAAA;AAAA,QAAY,KAAA;AAAA,QAAO,MAAA;AAAA,QAAQ;AAAA,OACrD;AAGA,MAAA,MAAM,mBAAmB,qBAAA,CAAsB,IAAA,CAAK,aAAW,IAAA,CAAK,QAAA,CAAS,OAAO,CAAC,CAAA;AACrF,MAAA,MAAM,kBAAkB,aAAA,CAAc,IAAA,CAAK,aAAW,IAAA,CAAK,QAAA,CAAS,OAAO,CAAC,CAAA;AAC5E,MAAA,MAAM,wBAAwB,mBAAA,CAAoB,IAAA,CAAK,aAAW,IAAA,CAAK,QAAA,CAAS,OAAO,CAAC,CAAA;AAGxF,MAAA,IAAI,kBAAA,GAAqB,CAAA;AAEzB,MAAA,IAAI,kBAAkB,kBAAA,IAAsB,CAAA;AAC5C,MAAA,IAAI,iBAAiB,kBAAA,IAAsB,CAAA;AAC3C,MAAA,IAAI,uBAAuB,kBAAA,IAAsB,CAAA;AAGjD,MAAA,MAAM,iBAAA,GAAoB,IAAA,CAAK,QAAA,CAAS,SAAS,KAAK,IAAA,CAAK,QAAA,CAAS,cAAc,CAAA,IACzD,KAAK,QAAA,CAAS,UAAU,CAAA,IAAK,IAAA,CAAK,SAAS,cAAc,CAAA;AAClF,MAAA,IAAI,mBAAmB,kBAAA,IAAsB,CAAA;AAG7C,MAAA,MAAM,WAAA,GAAc,IAAA,CAAK,QAAA,CAAS,MAAM,KAAK,IAAA,CAAK,QAAA,CAAS,QAAQ,CAAA,IAChD,KAAK,QAAA,CAAS,UAAU,CAAA,IAAK,IAAA,CAAK,SAAS,UAAU,CAAA;AACxE,MAAA,IAAI,WAAA,IAAe,iBAAiB,kBAAA,IAAsB,CAAA;AAE1D,MAAA,MAAM,UAAA,GAAa;AAAA,QACjB,wBAAwB,kBAAA,GAAqB,CAAA,GAAI,MAAA,GAAS,kBAAA,GAAqB,IAAI,QAAA,GAAW,KAAA;AAAA,QAC9F,kBAAA;AAAA,QACA,gBAAA;AAAA,QACA,eAAA;AAAA,QACA,qBAAA;AAAA,QACA,iBAAA;AAAA,QACA,WAAA;AAAA,QACA,aAAa;AAAC,OAChB;AAGA,MAAA,IAAI,gBAAA,IAAoB,CAAC,eAAA,EAAiB;AACxC,QAAA,UAAA,CAAW,WAAA,CAAY,KAAK,kEAAkE,CAAA;AAAA;AAGhG,MAAA,IAAI,qBAAA,IAAyB,CAAC,gBAAA,EAAkB;AAC9C,QAAA,UAAA,CAAW,WAAA,CAAY,KAAK,wEAAwE,CAAA;AAAA;AAGtG,MAAA,IAAI,iBAAA,EAAmB;AACrB,QAAA,UAAA,CAAW,WAAA,CAAY,KAAK,yFAAyF,CAAA;AAAA;AAGvH,MAAA,IAAI,eAAe,eAAA,EAAiB;AAClC,QAAA,UAAA,CAAW,WAAA,CAAY,KAAK,oEAAoE,CAAA;AAAA;AAGlG,MAAA,IAAI,uBAAuB,CAAA,EAAG;AAC5B,QAAA,UAAA,CAAW,WAAA,CAAY,KAAK,2EAA2E,CAAA;AAAA;AAGzG,MAAA,OAAO;AAAA,QACL,OAAO,kBAAA,GAAqB,EAAA;AAAA;AAAA,QAC5B,UAAA;AAAA,QACA,SAAA,EAAA,iBAAW,IAAI,IAAA,EAAK,EAAE,WAAA;AAAY,OACpC;AAAA,aAEO,KAAA,EAAO;AACd,MAAA,OAAO;AAAA,QACL,KAAA,EAAO,CAAA;AAAA,QACP,UAAA,EAAY;AAAA,UACV,OAAO,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,OAAO,KAAK,CAAA;AAAA,UAC5D,sBAAA,EAAwB;AAAA,SAC1B;AAAA,QACA,SAAA,EAAA,iBAAW,IAAI,IAAA,EAAK,EAAE,WAAA;AAAY,OACpC;AAAA;AACF,GACF,EA7FS,SAAA;AA8FX,CAAA;;;ACpHO,IAAM,mBAAA,GAAiC;AAAA,EAC5C,IAAA,EAAM,eAAA;AAAA,EACN,WAAA,EAAa,6EAAA;AAAA,EACb,SAAA,EAAW,KAAA;AAAA,EACX,UAAU,EAAC;AAAA,EACX,QAAA,kBAAU,MAAA,CAAA,OACR,OAAA,EACA,OAAA,KACqB;AAErB,IAAA,IAAI,CAAC,OAAA,CAAQ,OAAA,EAAS,IAAA,EAAM;AAC1B,MAAA,OAAO,KAAA;AAAA;AAIT,IAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,UAAA,CAAW,cAAc,CAAA;AACpD,IAAA,IAAI,CAAC,UAAA,EAAY;AACf,MAAA,OAAO,KAAA;AAAA;AAGT,IAAA,OAAO,IAAA;AAAA,GACT,EAhBU,UAAA,CAAA;AAAA,EAiBV,OAAA,kBAAS,MAAA,CAAA,OACP,OAAA,EACA,OAAA,KACiB;AACjB,IAAA,IAAI;AACF,MAAA,MAAM,IAAA,GAAO,OAAA,CAAQ,OAAA,EAAS,IAAA,EAAM,aAAY,IAAK,EAAA;AAGrD,MAAA,MAAM,gBAAA,GAAmB;AAAA,QACvB,WAAA;AAAA,QAAa,QAAA;AAAA,QAAU,WAAA;AAAA,QAAa,WAAA;AAAA,QAAa,WAAA;AAAA,QACjD,SAAA;AAAA,QAAW,SAAA;AAAA,QAAW,SAAA;AAAA,QAAW,cAAA;AAAA,QAAgB,UAAA;AAAA,QACjD,aAAA;AAAA,QAAe,WAAA;AAAA,QAAa,WAAA;AAAA,QAAa,WAAA;AAAA,QAAa,SAAA;AAAA,QACtD,WAAA;AAAA,QAAa,YAAA;AAAA,QAAc,WAAA;AAAA,QAAa;AAAA,OAC1C;AAGA,MAAA,MAAM,gBAAA,GAAmB;AAAA,QACvB,cAAA;AAAA,QAAgB,QAAA;AAAA,QAAU,OAAA;AAAA,QAAS,SAAA;AAAA,QAAW,OAAA;AAAA,QAAS,KAAA;AAAA,QACvD,YAAA;AAAA,QAAc,MAAA;AAAA,QAAQ,SAAA;AAAA,QAAW,YAAA;AAAA,QAAc,aAAA;AAAA,QAC/C,MAAA;AAAA,QAAQ,KAAA;AAAA,QAAO,UAAA;AAAA,QAAY,OAAA;AAAA,QAAS,MAAA;AAAA,QAAQ,OAAA;AAAA,QAAS,OAAA;AAAA,QACrD,eAAA;AAAA,QAAiB,WAAA;AAAA,QAAa;AAAA,OAChC;AAGA,MAAA,MAAM,eAAA,GAAkB;AAAA,QACtB,UAAA;AAAA,QAAY,SAAA;AAAA,QAAW,aAAA;AAAA,QAAe,MAAA;AAAA,QAAQ,YAAA;AAAA,QAC9C,eAAA;AAAA,QAAiB,aAAA;AAAA,QAAe,QAAA;AAAA,QAAU,QAAA;AAAA,QAAU;AAAA,OACtD;AAGA,MAAA,MAAM,kBAAA,GAAqB;AAAA,QACzB,UAAA;AAAA,QAAY,MAAA;AAAA,QAAQ,WAAA;AAAA,QAAa,WAAA;AAAA,QAAa,OAAA;AAAA,QAC9C,YAAA;AAAA,QAAc,UAAA;AAAA,QAAY,cAAA;AAAA,QAAgB;AAAA,OAC5C;AAGA,MAAA,MAAM,cAAc,gBAAA,CAAiB,IAAA,CAAK,aAAW,IAAA,CAAK,QAAA,CAAS,OAAO,CAAC,CAAA;AAC3E,MAAA,MAAM,cAAc,gBAAA,CAAiB,IAAA,CAAK,aAAW,IAAA,CAAK,QAAA,CAAS,OAAO,CAAC,CAAA;AAC3E,MAAA,MAAM,aAAa,eAAA,CAAgB,IAAA,CAAK,aAAW,IAAA,CAAK,QAAA,CAAS,OAAO,CAAC,CAAA;AACzE,MAAA,MAAM,gBAAgB,kBAAA,CAAmB,IAAA,CAAK,aAAW,IAAA,CAAK,QAAA,CAAS,OAAO,CAAC,CAAA;AAG/E,MAAA,MAAM,cAAA,GAAiB,IAAA,CAAK,QAAA,CAAS,QAAQ,KAAK,IAAA,CAAK,QAAA,CAAS,SAAS,CAAA,IACpD,KAAK,QAAA,CAAS,aAAa,CAAA,IAAK,IAAA,CAAK,SAAS,MAAM,CAAA;AAGzE,MAAA,MAAM,gBAAA,GAAmB,IAAA,CAAK,QAAA,CAAS,aAAa,KAAK,IAAA,CAAK,QAAA,CAAS,eAAe,CAAA,IAC9D,KAAK,QAAA,CAAS,aAAa,CAAA,IAAK,IAAA,CAAK,SAAS,MAAM,CAAA;AAG5E,MAAA,IAAI,eAAA,GAAkB,CAAA;AACtB,MAAA,IAAI,UAAA,GAAa,GAAA;AAEjB,MAAA,IAAI,WAAA,EAAa;AACf,QAAA,eAAA,IAAmB,CAAA;AACnB,QAAA,UAAA,IAAc,GAAA;AAAA;AAGhB,MAAA,IAAI,WAAA,EAAa;AACf,QAAA,eAAA,IAAmB,CAAA;AACnB,QAAA,UAAA,IAAc,GAAA;AAAA;AAGhB,MAAA,IAAI,iBAAiB,WAAA,EAAa;AAChC,QAAA,eAAA,IAAmB,CAAA;AACnB,QAAA,UAAA,IAAc,GAAA;AAAA;AAGhB,MAAA,IAAI,kBAAkB,aAAA,EAAe;AACnC,QAAA,eAAA,IAAmB,CAAA;AACnB,QAAA,UAAA,IAAc,GAAA;AAAA;AAGhB,MAAA,IAAI,oBAAoB,WAAA,EAAa;AACnC,QAAA,eAAA,IAAmB,CAAA;AACnB,QAAA,UAAA,IAAc,GAAA;AAAA;AAIhB,MAAA,IAAI,eAAA,GAAkB,SAAA;AACtB,MAAA,IAAI,WAAA,IAAe,CAAC,WAAA,EAAa;AAC/B,QAAA,eAAA,GAAkB,UAAA;AAAA,OACpB,MAAA,IAAW,WAAA,IAAe,CAAC,WAAA,EAAa;AACtC,QAAA,eAAA,GAAkB,UAAA;AAAA,OACpB,MAAA,IAAW,eAAe,WAAA,EAAa;AACrC,QAAA,eAAA,GAAkB,OAAA;AAAA;AAIpB,MAAA,MAAM,eAAA,GAAkB;AAAA,QACtB,oBAAA,EAAsB,kDAAA,CAAmD,IAAA,CAAK,IAAI,CAAA;AAAA,QAClF,eAAA,EAAiB,KAAK,MAAA,GAAS,EAAA;AAAA;AAAA,QAC/B,cAAA,EAAgB,IAAA;AAAA;AAAA,QAChB,iBAAiB,cAAA,IAAkB,gBAAA;AAAA,QACnC,mBAAA,EAAqB;AAAA,OACvB;AAEA,MAAA,MAAM,UAAA,GAAa,MAAA,CAAO,MAAA,CAAO,eAAe,CAAA,CAAE,MAAA,CAAO,OAAO,CAAA,CAAE,MAAA,GAAS,MAAA,CAAO,IAAA,CAAK,eAAe,CAAA,CAAE,MAAA;AAExG,MAAA,MAAM,UAAA,GAAa;AAAA,QACjB,eAAA;AAAA,QACA,UAAA,EAAY,IAAA,CAAK,GAAA,CAAI,UAAA,EAAY,CAAG,CAAA;AAAA;AAAA,QACpC,eAAA;AAAA,QACA,UAAA;AAAA,QACA,eAAA;AAAA,QACA,WAAA;AAAA,QACA,WAAA;AAAA,QACA,aAAA;AAAA,QACA,cAAA;AAAA,QACA,gBAAA;AAAA,QACA,iBAAiB;AAAC,OACpB;AAGA,MAAA,IAAI,kBAAkB,CAAA,EAAG;AACvB,QAAA,UAAA,CAAW,eAAA,CAAgB,KAAK,4DAA4D,CAAA;AAAA,OAC9F,MAAA,IAAW,kBAAkB,CAAA,EAAG;AAC9B,QAAA,UAAA,CAAW,eAAA,CAAgB,KAAK,6DAA6D,CAAA;AAAA;AAG/F,MAAA,IAAI,kBAAkB,aAAA,EAAe;AACnC,QAAA,UAAA,CAAW,eAAA,CAAgB,KAAK,kDAAkD,CAAA;AAAA;AAGpF,MAAA,IAAI,aAAa,GAAA,EAAK;AACpB,QAAA,UAAA,CAAW,eAAA,CAAgB,KAAK,sDAAsD,CAAA;AAAA,OACxF,MAAA,IAAW,aAAa,GAAA,EAAK;AAC3B,QAAA,UAAA,CAAW,eAAA,CAAgB,KAAK,6CAA6C,CAAA;AAAA;AAG/E,MAAA,IAAI,oBAAoB,WAAA,EAAa;AACnC,QAAA,UAAA,CAAW,eAAA,CAAgB,KAAK,mEAAmE,CAAA;AAAA;AAGrG,MAAA,OAAO;AAAA,QACL,KAAA,EAAO,IAAA,CAAK,GAAA,CAAI,CAAA,EAAG,IAAA,CAAK,IAAI,CAAA,EAAA,CAAI,eAAA,GAAkB,CAAA,IAAK,EAAE,CAAC,CAAA;AAAA;AAAA,QAC1D,UAAA;AAAA,QACA,SAAA,EAAA,iBAAW,IAAI,IAAA,EAAK,EAAE,WAAA;AAAY,OACpC;AAAA,aAEO,KAAA,EAAO;AACd,MAAA,OAAO;AAAA,QACL,KAAA,EAAO,CAAA;AAAA,QACP,UAAA,EAAY;AAAA,UACV,OAAO,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,OAAO,KAAK,CAAA;AAAA,UAC5D,eAAA,EAAiB,CAAA;AAAA,UACjB,eAAA,EAAiB;AAAA,SACnB;AAAA,QACA,SAAA,EAAA,iBAAW,IAAI,IAAA,EAAK,EAAE,WAAA;AAAY,OACpC;AAAA;AACF,GACF,EAvJS,SAAA;AAwJX,CAAA;;;AC9KO,IAAM,2BAAA,GAAyC;AAAA,EACpD,IAAA,EAAM,uBAAA;AAAA,EACN,WAAA,EAAa,+DAAA;AAAA,EACb,SAAA,EAAW,KAAA;AAAA,EACX,UAAU,EAAC;AAAA,EACX,QAAA,kBAAU,MAAA,CAAA,OACR,OAAA,EACA,OAAA,KACqB;AAErB,IAAA,IAAI,CAAC,OAAA,CAAQ,OAAA,EAAS,IAAA,EAAM;AAC1B,MAAA,OAAO,KAAA;AAAA;AAIT,IAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,UAAA,CAAW,cAAc,CAAA;AACpD,IAAA,IAAI,CAAC,UAAA,EAAY;AACf,MAAA,OAAO,KAAA;AAAA;AAGT,IAAA,OAAO,IAAA;AAAA,GACT,EAhBU,UAAA,CAAA;AAAA,EAiBV,OAAA,kBAAS,MAAA,CAAA,OACP,OAAA,EACA,OAAA,KACiB;AACjB,IAAA,IAAI;AACF,MAAA,MAAM,IAAA,GAAO,OAAA,CAAQ,OAAA,EAAS,IAAA,IAAQ,EAAA;AACtC,MAAA,MAAM,SAAA,GAAY,KAAK,WAAA,EAAY;AAGnC,MAAA,MAAM,cAAA,GAAiB;AAAA;AAAA,QAErB,eAAe,IAAA,CAAK,MAAA;AAAA,QACpB,WAAW,IAAA,CAAK,IAAA,EAAK,CAAE,KAAA,CAAM,KAAK,CAAA,CAAE,MAAA;AAAA,QACpC,SAAA,EAAW,KAAK,MAAA,GAAS,GAAA;AAAA;AAAA;AAAA,QAGzB,YAAA,EAAc,IAAA,CAAK,IAAA,CAAK,IAAI,CAAA;AAAA,QAC5B,kBAAA,EAAoB,oDAAA,CAAqD,IAAA,CAAK,IAAI,CAAA;AAAA,QAClF,YAAA,EAAc,sCAAA,CAAuC,IAAA,CAAK,IAAI,CAAA;AAAA;AAAA,QAG9D,cAAA,EAAgB,sDAAA,CAAuD,IAAA,CAAK,IAAI,CAAA;AAAA,QAChF,WAAA,EAAa,gCAAA,CAAiC,IAAA,CAAK,IAAI,CAAA;AAAA,QACvD,UAAA,EAAY,sCAAA,CAAuC,IAAA,CAAK,IAAI,CAAA;AAAA;AAAA,QAG5D,iBAAA,EAAmB,mFAAA,CAAoF,IAAA,CAAK,IAAI,CAAA;AAAA,QAChH,cAAc,IAAA,CAAK,IAAA,CAAK,IAAI,CAAA,IAAK,IAAA,CAAK,SAAS,QAAG,CAAA,IAAK,KAAK,QAAA,CAAS,GAAG,KAAK,IAAA,CAAK,QAAA,CAAS,IAAI,CAAA,IAAK,IAAA,CAAK,SAAS,GAAG,CAAA;AAAA;AAAA,QAGrH,UAAA,EAAY,+DAAA,CAAgE,IAAA,CAAK,IAAI,CAAA;AAAA,QACrF,YAAA,EAAc,wEAAA,CAAyE,IAAA,CAAK,IAAI,CAAA;AAAA,QAChG,aAAA,EAAe,kEAAA,CAAmE,IAAA,CAAK,IAAI;AAAA,OAC7F;AAGA,MAAA,MAAM,qBAAA,GAAwB;AAAA,QAC5B,SAAA,EAAW,2DAAA,CAA4D,IAAA,CAAK,IAAA,CAAK,MAAM,CAAA;AAAA,QACvF,UAAA,EAAY,IAAA,CAAK,QAAA,CAAS,GAAG,CAAA;AAAA,QAC7B,SAAA,EAAW,mDAAA,CAAoD,IAAA,CAAK,SAAS,CAAA;AAAA,QAC7E,eAAA,EAAiB,sDAAA,CAAuD,IAAA,CAAK,SAAS,CAAA;AAAA,QACtF,eAAA,EAAiB,uDAAA,CAAwD,IAAA,CAAK,SAAS,CAAA;AAAA,QACvF,UAAA,EAAY,0EAAA,CAA2E,IAAA,CAAK,SAAS;AAAA,OACvG;AAGA,MAAA,MAAM,iBAAA,GAAoB;AAAA,QACxB,mBAAA,EAAqB,gEAAA,CAAiE,IAAA,CAAK,IAAI,CAAA;AAAA,QAC/F,oBAAA,EAAsB,mEAAA,CAAoE,IAAA,CAAK,SAAS,CAAA;AAAA,QACxG,qBAAA,EAAuB,kEAAA,CAAmE,IAAA,CAAK,SAAS,CAAA;AAAA,QACxG,mBAAA,EAAqB,uDAAA,CAAwD,IAAA,CAAK,SAAS,CAAA;AAAA,QAC3F,kBAAA,EAAoB,yDAAA,CAA0D,IAAA,CAAK,SAAS;AAAA,OAC9F;AAGA,MAAA,IAAI,YAAA,GAAe,CAAA;AACnB,MAAA,IAAI,eAAA,GAAkB,CAAA;AACtB,MAAA,IAAI,oBAAA,GAAuB,CAAA;AAC3B,MAAA,IAAI,YAAA,GAAe,CAAA;AAGnB,MAAA,IAAI,cAAA,CAAe,WAAW,YAAA,IAAgB,CAAA;AAC9C,MAAA,IAAI,cAAA,CAAe,cAAc,YAAA,IAAgB,CAAA;AACjD,MAAA,IAAI,cAAA,CAAe,oBAAoB,YAAA,IAAgB,CAAA;AACvD,MAAA,IAAI,cAAA,CAAe,cAAc,YAAA,IAAgB,CAAA;AACjD,MAAA,IAAI,cAAA,CAAe,cAAc,YAAA,IAAgB,CAAA;AACjD,MAAA,IAAI,cAAA,CAAe,SAAA,IAAa,EAAA,EAAI,YAAA,IAAgB,CAAA;AAGpD,MAAA,IAAI,cAAA,CAAe,YAAY,eAAA,IAAmB,CAAA;AAClD,MAAA,IAAI,cAAA,CAAe,cAAc,eAAA,IAAmB,CAAA;AACpD,MAAA,IAAI,cAAA,CAAe,eAAe,eAAA,IAAmB,CAAA;AACrD,MAAA,IAAI,qBAAA,CAAsB,YAAY,eAAA,IAAmB,CAAA;AACzD,MAAA,IAAI,qBAAA,CAAsB,iBAAiB,eAAA,IAAmB,CAAA;AAG9D,MAAA,IAAI,cAAA,CAAe,gBAAgB,oBAAA,IAAwB,CAAA;AAC3D,MAAA,IAAI,cAAA,CAAe,aAAa,oBAAA,IAAwB,CAAA;AACxD,MAAA,IAAI,cAAA,CAAe,YAAY,oBAAA,IAAwB,CAAA;AACvD,MAAA,IAAI,cAAA,CAAe,mBAAmB,oBAAA,IAAwB,CAAA;AAC9D,MAAA,IAAI,CAAE,yCAAA,CAA0C,IAAA,CAAK,IAAI,GAAI,oBAAA,IAAwB,CAAA;AAGrF,MAAA,IAAI,iBAAA,CAAkB,qBAAqB,YAAA,IAAgB,CAAA;AAC3D,MAAA,IAAI,iBAAA,CAAkB,sBAAsB,YAAA,IAAgB,CAAA;AAC5D,MAAA,IAAI,iBAAA,CAAkB,uBAAuB,YAAA,IAAgB,CAAA;AAC7D,MAAA,IAAI,iBAAA,CAAkB,qBAAqB,YAAA,IAAgB,CAAA;AAC3D,MAAA,IAAI,iBAAA,CAAkB,oBAAoB,YAAA,IAAgB,CAAA;AAG1D,MAAA,MAAM,eAAA,GAAkB,CAAA;AACxB,MAAA,MAAM,kBAAA,GAAqB,CAAA;AAC3B,MAAA,MAAM,uBAAA,GAA0B,CAAA;AAChC,MAAA,MAAM,eAAA,GAAkB,CAAA;AAExB,MAAA,MAAM,gBAAA,GAAmB;AAAA,QACvB,OAAA,EAAS,IAAA,CAAK,GAAA,CAAI,YAAA,GAAe,iBAAiB,CAAC,CAAA;AAAA,QACnD,UAAA,EAAY,IAAA,CAAK,GAAA,CAAI,eAAA,GAAkB,oBAAoB,CAAC,CAAA;AAAA,QAC5D,eAAA,EAAiB,IAAA,CAAK,GAAA,CAAI,oBAAA,GAAuB,yBAAyB,CAAC,CAAA;AAAA,QAC3E,gBAAA,EAAkB,IAAA,CAAK,GAAA,CAAI,YAAA,GAAe,iBAAiB,CAAC;AAAA,OAC9D;AAGA,MAAA,MAAM,cAAA,GACJ,gBAAA,CAAiB,OAAA,GAAU,GAAA,GAC3B,gBAAA,CAAiB,UAAA,GAAa,GAAA,GAC9B,gBAAA,CAAiB,eAAA,GAAkB,GAAA,GACnC,gBAAA,CAAiB,gBAAA,GAAmB,GAAA;AAItC,MAAA,IAAI,YAAA,GAAe,KAAA;AACnB,MAAA,IAAI,kBAAkB,GAAA,EAAK;AACzB,QAAA,YAAA,GAAe,WAAA;AAAA,OACjB,MAAA,IAAW,kBAAkB,GAAA,EAAK;AAChC,QAAA,YAAA,GAAe,MAAA;AAAA,OACjB,MAAA,IAAW,kBAAkB,GAAA,EAAK;AAChC,QAAA,YAAA,GAAe,MAAA;AAAA,OACjB,MAAA,IAAW,kBAAkB,GAAA,EAAK;AAChC,QAAA,YAAA,GAAe,MAAA;AAAA;AAGjB,MAAA,MAAM,UAAA,GAAa;AAAA,QACjB,cAAA;AAAA,QACA,YAAA;AAAA,QACA,MAAA,EAAQ,gBAAA;AAAA,QACR,SAAA,EAAW;AAAA,UACT,OAAA,EAAS,YAAA;AAAA,UACT,UAAA,EAAY,eAAA;AAAA,UACZ,eAAA,EAAiB,oBAAA;AAAA,UACjB,gBAAA,EAAkB;AAAA,SACpB;AAAA,QACA,OAAA,EAAS,cAAA;AAAA,QACT,QAAA,EAAU,qBAAA;AAAA,QACV,iBAAA;AAAA,QACA,iBAAiB,EAAC;AAAA,QAClB,WAAW,EAAC;AAAA,QACZ,cAAc;AAAC,OACjB;AAGA,MAAA,IAAI,gBAAA,CAAiB,WAAW,GAAA,EAAK;AACnC,QAAA,UAAA,CAAW,SAAA,CAAU,KAAK,kCAAkC,CAAA;AAAA,OAC9D,MAAA,IAAW,gBAAA,CAAiB,OAAA,GAAU,GAAA,EAAK;AACzC,QAAA,UAAA,CAAW,YAAA,CAAa,KAAK,0CAA0C,CAAA;AAAA;AAGzE,MAAA,IAAI,gBAAA,CAAiB,cAAc,GAAA,EAAK;AACtC,QAAA,UAAA,CAAW,SAAA,CAAU,KAAK,yCAAyC,CAAA;AAAA,OACrE,MAAA,IAAW,gBAAA,CAAiB,UAAA,GAAa,GAAA,EAAK;AAC5C,QAAA,UAAA,CAAW,YAAA,CAAa,KAAK,+DAA+D,CAAA;AAAA;AAG9F,MAAA,IAAI,gBAAA,CAAiB,mBAAmB,GAAA,EAAK;AAC3C,QAAA,UAAA,CAAW,SAAA,CAAU,KAAK,0CAA0C,CAAA;AAAA,OACtE,MAAA,IAAW,gBAAA,CAAiB,eAAA,GAAkB,GAAA,EAAK;AACjD,QAAA,UAAA,CAAW,YAAA,CAAa,KAAK,8DAA8D,CAAA;AAAA;AAG7F,MAAA,IAAI,gBAAA,CAAiB,oBAAoB,GAAA,EAAK;AAC5C,QAAA,UAAA,CAAW,SAAA,CAAU,KAAK,0CAA0C,CAAA;AAAA,OACtE,MAAA,IAAW,gBAAA,CAAiB,gBAAA,GAAmB,GAAA,EAAK;AAClD,QAAA,UAAA,CAAW,YAAA,CAAa,KAAK,kEAAkE,CAAA;AAAA;AAIjG,MAAA,IAAI,kBAAkB,GAAA,EAAK;AACzB,QAAA,UAAA,CAAW,eAAA,CAAgB,KAAK,wDAAwD,CAAA;AAAA,OAC1F,MAAA,IAAW,kBAAkB,GAAA,EAAK;AAChC,QAAA,UAAA,CAAW,eAAA,CAAgB,KAAK,wDAAwD,CAAA;AAAA,OAC1F,MAAA,IAAW,kBAAkB,GAAA,EAAK;AAChC,QAAA,UAAA,CAAW,eAAA,CAAgB,KAAK,4DAA4D,CAAA;AAAA,OAC9F,MAAO;AACL,QAAA,UAAA,CAAW,eAAA,CAAgB,KAAK,2DAA2D,CAAA;AAAA;AAG7F,MAAA,OAAO;AAAA,QACL,KAAA,EAAO,cAAA;AAAA,QACP,UAAA;AAAA,QACA,SAAA,EAAA,iBAAW,IAAI,IAAA,EAAK,EAAE,WAAA;AAAY,OACpC;AAAA,aAEO,KAAA,EAAO;AACd,MAAA,OAAO;AAAA,QACL,KAAA,EAAO,CAAA;AAAA,QACP,UAAA,EAAY;AAAA,UACV,OAAO,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,OAAO,KAAK,CAAA;AAAA,UAC5D,YAAA,EAAc,SAAA;AAAA,UACd,cAAA,EAAgB;AAAA,SAClB;AAAA,QACA,SAAA,EAAA,iBAAW,IAAI,IAAA,EAAK,EAAE,WAAA;AAAY,OACpC;AAAA;AACF,GACF,EAjMS,SAAA;AAkMX,CAAA;;;AC7LO,IAAM,YAAA,GAAuB;AAAA,EAClC,IAAA,EAAM,QAAA;AAAA,EACN,WAAA,EAAa,sEAAA;AAAA;AAAA,EAGb,QAAA,EAAU,CAAC,sBAAsB,CAAA;AAAA;AAAA,EAGjC,OAAA,EAAS;AAAA;AAAA,IAEP,aAAA;AAAA,IACA,oBAAA;AAAA,IACA,iBAAA;AAAA;AAAA,IAGA,mBAAA;AAAA,IACA,WAAA;AAAA;AAAA,IAGA,YAAA;AAAA;AAAA,IAGA,gBAAA;AAAA,IACA;AAAA,GACF;AAAA;AAAA,EAGA,SAAA,EAAW;AAAA,IACT,mBAAA;AAAA,IACA;AAAA,GACF;AAAA;AAAA,EAGA,UAAA,EAAY;AAAA,IACV,sBAAA;AAAA,IACA,mBAAA;AAAA,IACA;AAAA,GACF;AAAA;AAAA,EAGA,MAAA,EAAQ;AAAA;AAAA,IAEN,eAAA,EAAiB;AAAA,MACf,kBAAA;AAAA,MACA,gBAAA;AAAA,MACA;AAAA,KACF;AAAA;AAAA,IAGA,eAAA,EAAiB;AAAA,MACf,gBAAA;AAAA,MACA,wBAAA;AAAA,MACA,kBAAA;AAAA,MACA;AAAA,KACF;AAAA;AAAA,IAGA,QAAA,EAAU;AAAA,MACR,gBAAA,EAAkB,+BAAA;AAAA,MAClB,cAAA,EAAgB,8CAAA;AAAA,MAChB,sBAAA,EAAwB,qCAAA;AAAA,MACxB,gBAAA,EAAkB,uBAAA;AAAA,MAClB,iBAAA,EAAmB;AAAA;AACrB,GACF;AAAA;AAAA,EAGA,MAAM,KAAK,OAAA,EAAS;AAElB,IAAA,OAAA,CAAQ,KAAK,gEAAgE,CAAA;AAAA;AAEjF;AAQA,IAAO,aAAA,GAAQ","file":"index.js","sourcesContent":["import { IAgentRuntime } from \"@elizaos/core\";\nimport { PodProtocolConfig, PodEnvironment, ValidationResult } from \"./types.js\";\n\n/**\n * Default configuration values\n */\nexport const DEFAULT_CONFIG: Partial<PodProtocolConfig> = {\n  rpcEndpoint: \"https://api.devnet.solana.com\",\n  programId: \"HEpGLgYsE1kP8aoYKyLFc3JVVrofS7T4zEA6fWBJsZps\",\n  capabilities: [\"conversation\", \"analysis\", \"collaboration\"],\n  mcpEndpoint: \"http://localhost:3000\",\n  autoRegister: true,\n};\n\n/**\n * Get environment configuration for PoD Protocol\n */\nexport function getEnvironmentConfig(runtime: IAgentRuntime): PodEnvironment {\n  return {\n    POD_RPC_ENDPOINT: runtime.getSetting(\"POD_RPC_ENDPOINT\"),\n    POD_PROGRAM_ID: runtime.getSetting(\"POD_PROGRAM_ID\"),\n    POD_WALLET_PRIVATE_KEY: runtime.getSetting(\"POD_WALLET_PRIVATE_KEY\"),\n    POD_AGENT_NAME: runtime.getSetting(\"POD_AGENT_NAME\"),\n    POD_AGENT_CAPABILITIES: runtime.getSetting(\"POD_AGENT_CAPABILITIES\"),\n    POD_MCP_ENDPOINT: runtime.getSetting(\"POD_MCP_ENDPOINT\"),\n    POD_AUTO_REGISTER: runtime.getSetting(\"POD_AUTO_REGISTER\"),\n  };\n}\n\n/**\n * Parse and validate PoD Protocol configuration\n */\nexport function parseConfig(runtime: IAgentRuntime): PodProtocolConfig {\n  const env = getEnvironmentConfig(runtime);\n  \n  // Parse capabilities from comma-separated string\n  const capabilities = env.POD_AGENT_CAPABILITIES\n    ? env.POD_AGENT_CAPABILITIES.split(\",\").map(c => c.trim())\n    : DEFAULT_CONFIG.capabilities!;\n  \n  // Parse auto-register boolean\n  const autoRegister = env.POD_AUTO_REGISTER\n    ? env.POD_AUTO_REGISTER.toLowerCase() === \"true\"\n    : DEFAULT_CONFIG.autoRegister!;\n  \n  return {\n    rpcEndpoint: env.POD_RPC_ENDPOINT || DEFAULT_CONFIG.rpcEndpoint!,\n    programId: env.POD_PROGRAM_ID || DEFAULT_CONFIG.programId!,\n    walletPrivateKey: env.POD_WALLET_PRIVATE_KEY || \"\",\n    agentName: env.POD_AGENT_NAME || runtime.character?.name || \"ElizaOS Agent\",\n    capabilities,\n    mcpEndpoint: env.POD_MCP_ENDPOINT || DEFAULT_CONFIG.mcpEndpoint!,\n    autoRegister,\n  };\n}\n\n/**\n * Validate PoD Protocol configuration\n */\nexport function validateConfig(config: PodProtocolConfig): ValidationResult {\n  const errors: string[] = [];\n  \n  // Validate required fields\n  if (!config.rpcEndpoint) {\n    errors.push(\"POD_RPC_ENDPOINT is required\");\n  }\n  \n  if (!config.programId) {\n    errors.push(\"POD_PROGRAM_ID is required\");\n  }\n  \n  if (!config.walletPrivateKey) {\n    errors.push(\"POD_WALLET_PRIVATE_KEY is required\");\n  }\n  \n  // Validate RPC endpoint format\n  if (config.rpcEndpoint && !isValidUrl(config.rpcEndpoint)) {\n    errors.push(\"POD_RPC_ENDPOINT must be a valid URL\");\n  }\n  \n  // Validate MCP endpoint format if provided\n  if (config.mcpEndpoint && !isValidUrl(config.mcpEndpoint)) {\n    errors.push(\"POD_MCP_ENDPOINT must be a valid URL\");\n  }\n  \n  // Validate program ID format (should be base58)\n  if (config.programId && !isValidBase58(config.programId)) {\n    errors.push(\"POD_PROGRAM_ID must be a valid base58 string\");\n  }\n  \n  // Validate private key format (should be base58)\n  if (config.walletPrivateKey && !isValidBase58(config.walletPrivateKey)) {\n    errors.push(\"POD_WALLET_PRIVATE_KEY must be a valid base58 string\");\n  }\n  \n  // Validate capabilities\n  if (!config.capabilities || config.capabilities.length === 0) {\n    errors.push(\"At least one capability must be specified\");\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n}\n\n/**\n * Validate PoD Protocol configuration for runtime\n */\nexport function validateConfigForRuntime(runtime: IAgentRuntime): ValidationResult {\n  try {\n    const config = parseConfig(runtime);\n    return validateConfig(config);\n  } catch (error) {\n    return {\n      isValid: false,\n      errors: [`Failed to parse configuration: ${error instanceof Error ? error.message : String(error)}`],\n    };\n  }\n}\n\n/**\n * Check if string is a valid URL\n */\nfunction isValidUrl(str: string): boolean {\n  try {\n    new URL(str);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Check if string is valid base58\n */\nfunction isValidBase58(str: string): boolean {\n  const base58Regex = /^[1-9A-HJ-NP-Za-km-z]+$/;\n  return base58Regex.test(str) && str.length >= 32 && str.length <= 44;\n}\n\n/**\n * Get configuration with error handling\n */\nexport function getConfigSafely(runtime: IAgentRuntime): { config: PodProtocolConfig | null; error: string | null } {\n  try {\n    const config = parseConfig(runtime);\n    const validation = validateConfig(config);\n    \n    if (!validation.isValid) {\n      return {\n        config: null,\n        error: `Configuration validation failed: ${validation.errors.join(\", \")}`,\n      };\n    }\n    \n    return {\n      config,\n      error: null,\n    };\n  } catch (error) {\n    return {\n      config: null,\n      error: `Failed to parse configuration: ${error instanceof Error ? error.message : String(error)}`,\n    };\n  }\n}","import { Connection, PublicKey, Transaction, SystemProgram, Keypair } from \"@solana/web3.js\";\r\nimport { IAgentRuntime } from \"@elizaos/core\";\r\nimport { PodProtocolConfig, PodAgent, PodMessage, PodChannel, PodEscrow } from \"../types.js\";\r\n\r\n/**\r\n * BlockchainService handles direct Solana blockchain interactions\r\n * for the PoD Protocol plugin\r\n */\r\nexport class BlockchainService {\r\n  private connection: Connection;\r\n  private config: PodProtocolConfig;\r\n  private keypair: Keypair;\r\n  private runtime: IAgentRuntime;\r\n\r\n  constructor(runtime: IAgentRuntime, config: PodProtocolConfig, keypair: Keypair) {\r\n    this.runtime = runtime;\r\n    this.config = config;\r\n    this.keypair = keypair;\r\n    this.connection = new Connection(config.rpcEndpoint, 'confirmed');\r\n  }\r\n\r\n  /**\r\n   * Get the public key of the agent's wallet\r\n   */\r\n  getWalletPublicKey(): PublicKey {\r\n    return this.keypair.publicKey;\r\n  }\r\n\r\n  /**\r\n   * Get the connection to the Solana network\r\n   */\r\n  getConnection(): Connection {\r\n    return this.connection;\r\n  }\r\n\r\n  /**\r\n   * Register an agent on the PoD Protocol\r\n   * Simplified implementation using direct Solana transactions\r\n   */\r\n  async registerAgent(agentData: {\r\n    name: string;\r\n    capabilities: string[];\r\n    framework: string;\r\n  }): Promise<{ agentId: string; transactionHash: string }> {\r\n    try {\r\n      // Create a basic system program transaction as a placeholder\r\n      // In a real implementation, this would interact with the PoD Protocol smart contract\r\n      const transaction = new Transaction().add(\r\n        SystemProgram.transfer({\r\n          fromPubkey: this.keypair.publicKey,\r\n          toPubkey: this.keypair.publicKey, // Self-transfer for demo\r\n          lamports: 1000, // Minimal amount\r\n        })\r\n      );\r\n\r\n      const signature = await this.connection.sendTransaction(transaction, [this.keypair]);\r\n      await this.connection.confirmTransaction(signature);\r\n\r\n      const agentId = `agent_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n      return {\r\n        agentId,\r\n        transactionHash: signature,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Agent registration error:\", error);\r\n      throw new Error(`Failed to register agent: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a message on the PoD Protocol\r\n   * Simplified implementation\r\n   */\r\n  async sendMessage(recipientId: string, content: string): Promise<{ messageId: string; transactionHash: string }> {\r\n    try {\r\n      // Create a basic transaction as placeholder\r\n      const transaction = new Transaction().add(\r\n        SystemProgram.transfer({\r\n          fromPubkey: this.keypair.publicKey,\r\n          toPubkey: this.keypair.publicKey,\r\n          lamports: 1000,\r\n        })\r\n      );\r\n\r\n      const signature = await this.connection.sendTransaction(transaction, [this.keypair]);\r\n      await this.connection.confirmTransaction(signature);\r\n\r\n      const messageId = `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n      return {\r\n        messageId,\r\n        transactionHash: signature,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Message sending error:\", error);\r\n      throw new Error(`Failed to send message: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a channel on the PoD Protocol\r\n   * Simplified implementation\r\n   */\r\n  async createChannel(channelData: {\r\n    name: string;\r\n    description: string;\r\n    isPrivate: boolean;\r\n    escrowAmount?: number;\r\n  }): Promise<{ channelId: string; transactionHash: string }> {\r\n    try {\r\n      const transaction = new Transaction().add(\r\n        SystemProgram.transfer({\r\n          fromPubkey: this.keypair.publicKey,\r\n          toPubkey: this.keypair.publicKey,\r\n          lamports: (channelData.escrowAmount || 0) * 1000000000, // Convert SOL to lamports\r\n        })\r\n      );\r\n\r\n      const signature = await this.connection.sendTransaction(transaction, [this.keypair]);\r\n      await this.connection.confirmTransaction(signature);\r\n\r\n      const channelId = `channel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n      return {\r\n        channelId,\r\n        transactionHash: signature,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Channel creation error:\", error);\r\n      throw new Error(`Failed to create channel: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Join a channel on the PoD Protocol\r\n   * Simplified implementation\r\n   */\r\n  async joinChannel(channelId: string): Promise<{ success: boolean; transactionHash: string }> {\r\n    try {\r\n      const transaction = new Transaction().add(\r\n        SystemProgram.transfer({\r\n          fromPubkey: this.keypair.publicKey,\r\n          toPubkey: this.keypair.publicKey,\r\n          lamports: 1000,\r\n        })\r\n      );\r\n\r\n      const signature = await this.connection.sendTransaction(transaction, [this.keypair]);\r\n      await this.connection.confirmTransaction(signature);\r\n\r\n      return {\r\n        success: true,\r\n        transactionHash: signature,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Channel join error:\", error);\r\n      throw new Error(`Failed to join channel: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create an escrow transaction\r\n   * Simplified implementation\r\n   */\r\n  async createEscrow(escrowData: {\r\n    counterpartyId: string;\r\n    amount: number;\r\n    service: string;\r\n    deliverables: string[];\r\n  }): Promise<{ escrowId: string; transactionHash: string }> {\r\n    try {\r\n      const transaction = new Transaction().add(\r\n        SystemProgram.transfer({\r\n          fromPubkey: this.keypair.publicKey,\r\n          toPubkey: this.keypair.publicKey,\r\n          lamports: escrowData.amount * 1000000000, // Convert SOL to lamports\r\n        })\r\n      );\r\n\r\n      const signature = await this.connection.sendTransaction(transaction, [this.keypair]);\r\n      await this.connection.confirmTransaction(signature);\r\n\r\n      const escrowId = `escrow_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n      return {\r\n        escrowId,\r\n        transactionHash: signature,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Escrow creation error:\", error);\r\n      throw new Error(`Failed to create escrow: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get network statistics\r\n   * Uses real Solana network data\r\n   */\r\n  async getNetworkStats(): Promise<{\r\n    blockHeight: number;\r\n    totalSupply: number;\r\n    transactionCount: number;\r\n    health: string;\r\n  }> {\r\n    try {\r\n      const [blockHeight, supply] = await Promise.all([\r\n        this.connection.getBlockHeight(),\r\n        this.connection.getSupply(),\r\n      ]);\r\n\r\n      return {\r\n        blockHeight,\r\n        totalSupply: supply.value.total,\r\n        transactionCount: blockHeight * 1000, // Estimate\r\n        health: \"healthy\",\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Network stats error:\", error);\r\n      return {\r\n        blockHeight: 0,\r\n        totalSupply: 0,\r\n        transactionCount: 0,\r\n        health: \"unhealthy\",\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check wallet balance\r\n   */\r\n  async getBalance(): Promise<number> {\r\n    try {\r\n      const balance = await this.connection.getBalance(this.keypair.publicKey);\r\n      return balance / 1000000000; // Convert lamports to SOL\r\n    } catch (error) {\r\n      console.error(\"Balance check error:\", error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate if a public key is valid\r\n   */\r\n  isValidPublicKey(address: string): boolean {\r\n    try {\r\n      new PublicKey(address);\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n} ","import { IAgentRuntime, Service } from \"@elizaos/core\";\nimport { Connection, Keypair, PublicKey } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport {\n  PodProtocolConfig,\n  PodProtocolService,\n  PodAgent,\n  PodMessage,\n  PodChannel,\n  PodEscrow,\n  AgentDiscoveryFilter,\n  MessageFilter,\n  PodPluginState,\n} from \"../types.js\";\nimport { parseConfig, validateConfig } from \"../environment.js\";\nimport { BlockchainService } from \"./blockchainService.js\";\n\n/**\n * PoD Protocol service implementation for ElizaOS\n * \n * Provides comprehensive blockchain-based communication services for AI agents\n * including registration, messaging, channel management, reputation tracking,\n * and escrow transactions on the Solana blockchain.\n * \n * @class PodProtocolServiceImpl\n * @extends {Service}\n * @implements {PodProtocolService}\n * @since 1.0.0\n * \n * @example\n * ```typescript\n * const service = new PodProtocolServiceImpl();\n * await service.initialize(runtime);\n * const agent = await service.registerAgent(config);\n * ```\n */\nexport class PodProtocolServiceImpl extends Service implements PodProtocolService {\n  private connection: Connection | null = null;\n  private keypair: Keypair | null = null;\n  private podConfig: PodProtocolConfig | null = null;\n  private state: PodPluginState | null = null;\n  private blockchainService: BlockchainService | null = null;\n\n  static override serviceType = \"pod_protocol\";\n\n  // Program ID for PoD Protocol smart contract\n  private static readonly PROGRAM_ID = \"HEpGLgYsE1kP8aoYKyLFc3JVVrofS7T4zEA6fWBJsZps\";\n\n  /**\n   * Service capability description for ElizaOS\n   * @returns {string} Description of the service capabilities\n   */\n  override get capabilityDescription(): string {\n    return \"PoD Protocol integration for AI agent communication, messaging, channels, and escrow services on Solana blockchain.\";\n  }\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Stop the service and cleanup resources\n   * \n   * Cleans up all connections, state, and resources used by the service.\n   * Should be called when shutting down the agent.\n   * \n   * @returns {Promise<void>} Promise that resolves when service is stopped\n   * @since 1.0.0\n   */\n  override async stop(): Promise<void> {\n    this.connection = null;\n    this.keypair = null;\n    this.podConfig = null;\n    this.state = null;\n    this.blockchainService = null;\n  }\n\n  /**\n   * Initialize the PoD Protocol service\n   * \n   * Sets up the service with configuration, establishes blockchain connections,\n   * initializes the blockchain service, and optionally auto-registers the agent.\n   * \n   * @param {IAgentRuntime} runtime - The ElizaOS runtime instance\n   * @returns {Promise<void>} Promise that resolves when initialization is complete\n   * @throws {Error} When configuration validation fails or initialization errors occur\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * const service = new PodProtocolServiceImpl();\n   * await service.initialize(runtime);\n   * console.log(\"PoD Protocol service ready!\");\n   * ```\n   */\n  async initialize(runtime: IAgentRuntime): Promise<void> {\n    try {\n      this.runtime = runtime;\n      \n      // Parse and validate configuration\n      this.podConfig = parseConfig(runtime);\n      const validation = validateConfig(this.podConfig);\n      \n      if (!validation.isValid) {\n        throw new Error(`Configuration validation failed: ${validation.errors.join(\", \")}`);\n      }\n\n      // Initialize Solana connection\n      this.connection = new Connection(this.podConfig.rpcEndpoint, \"confirmed\");\n      \n      // Initialize keypair from private key\n      try {\n        const privateKeyBytes = bs58.decode(this.podConfig.walletPrivateKey);\n        this.keypair = Keypair.fromSecretKey(privateKeyBytes);\n      } catch (error) {\n        throw new Error(`Failed to create keypair from private key: ${error instanceof Error ? error.message : String(error)}`);\n      }\n\n      // Initialize blockchain service\n      this.blockchainService = new BlockchainService(\n        this.connection,\n        this.keypair,\n        PodProtocolServiceImpl.PROGRAM_ID\n      );\n      await this.blockchainService.initialize();\n\n      // Initialize plugin state\n      this.state = {\n        agent: null,\n        isRegistered: false,\n        connectedAgents: new Map(),\n        channels: new Map(),\n        messages: [],\n        escrows: new Map(),\n        lastSync: new Date(),\n      };\n\n      // Auto-register if enabled\n      if (this.podConfig.autoRegister) {\n        try {\n          await this.registerAgent(this.podConfig);\n          console.log(\"PoD Protocol agent auto-registered successfully\");\n        } catch (error) {\n          console.warn(`Auto-registration failed: ${error instanceof Error ? error.message : String(error)}`);\n        }\n      }\n\n      console.log(\"PoD Protocol service initialized successfully\");\n    } catch (error) {\n      console.error(`Failed to initialize PoD Protocol service: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Register agent on PoD Protocol blockchain\n   * \n   * Creates a blockchain identity for the agent with specified capabilities,\n   * name, and metadata. The agent will be registered on the Solana blockchain\n   * using the PoD Protocol smart contract.\n   * \n   * @param {PodProtocolConfig} config - Configuration for agent registration\n   * @param {string} config.walletPrivateKey - Base58 encoded private key\n   * @param {string} config.rpcEndpoint - Solana RPC endpoint URL\n   * @param {string} config.agentName - Unique name for the agent\n   * @param {string[]} config.capabilities - Array of agent capabilities\n   * @param {boolean} config.autoRegister - Whether to auto-register on startup\n   * @param {string} config.programId - PoD Protocol program ID\n   * @returns {Promise<PodAgent>} The registered agent details\n   * @throws {Error} When service is not initialized or registration fails\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * const agent = await service.registerAgent({\n   *   walletPrivateKey: \"base58_private_key\",\n   *   rpcEndpoint: \"https://api.devnet.solana.com\",\n   *   agentName: \"TradingBot\",\n   *   capabilities: [\"trading\", \"analysis\"],\n   *   autoRegister: false,\n   *   programId: \"HEpGLgYsE1kP8aoYKyLFc3JVVrofS7T4zEA6fWBJsZps\"\n   * });\n   * ```\n   */\n  async registerAgent(config: PodProtocolConfig): Promise<PodAgent> {\n    if (!this.blockchainService || !this.state) {\n      throw new Error(\"Service not initialized\");\n    }\n\n    try {\n      // Use blockchain service for real registration\n      const agent = await this.blockchainService.registerAgent(config);\n\n      // Update local state\n      this.state.agent = agent;\n      this.state.isRegistered = true;\n\n      console.log(`Agent registered on blockchain: ${agent.agentId}`);\n      return agent;\n    } catch (error) {\n      console.error(`Agent registration failed: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Discover other agents on the PoD Protocol network\n   * \n   * Searches for agents based on specified filter criteria including capabilities,\n   * framework, reputation, status, and other parameters. Results can be paginated\n   * and sorted by various factors.\n   * \n   * @param {AgentDiscoveryFilter} [filter] - Optional filter criteria for agent search\n   * @param {string[]} [filter.capabilities] - Required agent capabilities\n   * @param {string} [filter.framework] - Target framework (ElizaOS, AutoGen, etc.)\n   * @param {string} [filter.searchTerm] - Text search in agent name/description\n   * @param {number} [filter.minReputation] - Minimum reputation score required\n   * @param {\"online\" | \"offline\" | \"any\"} [filter.status] - Agent status filter\n   * @param {number} [filter.limit=10] - Maximum number of results to return\n   * @param {number} [filter.offset=0] - Number of results to skip for pagination\n   * @returns {Promise<PodAgent[]>} Array of discovered agents\n   * @throws {Error} When service is not initialized\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * // Find online trading agents with high reputation\n   * const tradingAgents = await service.discoverAgents({\n   *   capabilities: [\"trading\"],\n   *   minReputation: 80,\n   *   status: \"online\",\n   *   limit: 5\n   * });\n   * ```\n   */\n  async discoverAgents(filter?: AgentDiscoveryFilter): Promise<PodAgent[]> {\n    if (!this.connection || !this.state) {\n      throw new Error(\"Service not initialized\");\n    }\n\n    try {\n      // In a real implementation, this would query the PoD Protocol program\n      // For now, we'll return mock data\n      const mockAgents: PodAgent[] = [\n        {\n          agentId: \"trading_bot_001\",\n          name: \"Advanced Trading Bot\",\n          description: \"AI trading agent with market analysis capabilities\",\n          capabilities: [\"trading\", \"analysis\", \"risk_management\"],\n          reputation: 95,\n          walletAddress: \"8vK2...mN8p\",\n          lastActive: new Date(Date.now() - 15 * 60 * 1000), // 15 minutes ago\n          status: \"online\",\n          framework: \"ElizaOS\",\n        },\n        {\n          agentId: \"research_pro_v2\",\n          name: \"Research Assistant Pro\",\n          description: \"Academic research and data analysis specialist\",\n          capabilities: [\"research\", \"data_analysis\", \"reporting\"],\n          reputation: 94,\n          walletAddress: \"9wL3...pK9q\",\n          lastActive: new Date(Date.now() - 3 * 60 * 1000), // 3 minutes ago\n          status: \"online\",\n          framework: \"AutoGen\",\n        },\n        {\n          agentId: \"content_creator_x\",\n          name: \"Content Creator Agent\",\n          description: \"Creative writing and content strategy specialist\",\n          capabilities: [\"writing\", \"content_strategy\", \"seo\"],\n          reputation: 89,\n          walletAddress: \"7tM4...qR8n\",\n          lastActive: new Date(Date.now() - 60 * 60 * 1000), // 1 hour ago\n          status: \"offline\",\n          framework: \"CrewAI\",\n        },\n      ];\n\n      // Apply filters if provided\n      let filteredAgents = mockAgents;\n\n      if (filter) {\n        if (filter.capabilities) {\n          filteredAgents = filteredAgents.filter(agent =>\n            filter.capabilities!.some(cap => agent.capabilities.includes(cap))\n          );\n        }\n\n        if (filter.framework) {\n          filteredAgents = filteredAgents.filter(agent => agent.framework === filter.framework);\n        }\n\n        if (filter.searchTerm) {\n          const term = filter.searchTerm.toLowerCase();\n          filteredAgents = filteredAgents.filter(agent =>\n            agent.name.toLowerCase().includes(term) ||\n            agent.description.toLowerCase().includes(term) ||\n            agent.capabilities.some(cap => cap.toLowerCase().includes(term))\n          );\n        }\n\n        if (filter.minReputation) {\n          filteredAgents = filteredAgents.filter(agent => agent.reputation >= filter.minReputation!);\n        }\n\n        if (filter.status && filter.status !== \"any\") {\n          filteredAgents = filteredAgents.filter(agent => agent.status === filter.status);\n        }\n\n        if (filter.limit) {\n          filteredAgents = filteredAgents.slice(filter.offset || 0, (filter.offset || 0) + filter.limit);\n        }\n      }\n\n      // Update connected agents cache\n      filteredAgents.forEach(agent => {\n        this.state!.connectedAgents.set(agent.agentId, agent);\n      });\n\n      return filteredAgents;\n    } catch (error) {\n      console.error(`Agent discovery failed: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Send encrypted message to another agent\n   * \n   * Sends a secure, encrypted message to another agent on the PoD Protocol network.\n   * The message is recorded on the Solana blockchain with optional encryption,\n   * priority settings, and delivery confirmation.\n   * \n   * @param {string} recipientId - Target agent ID to send message to\n   * @param {string} content - Message content to send\n   * @param {Partial<PodMessage>} [options] - Optional message configuration\n   * @param {\"text\" | \"data\" | \"command\" | \"response\"} [options.type=\"text\"] - Message type\n   * @param {\"low\" | \"normal\" | \"high\" | \"urgent\"} [options.priority=\"normal\"] - Message priority\n   * @param {boolean} [options.encrypted=true] - Whether to encrypt the message\n   * @returns {Promise<PodMessage>} The sent message details with transaction hash\n   * @throws {Error} When service is not initialized or agent not registered\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * const message = await service.sendMessage(\n   *   \"recipient_agent_123\",\n   *   \"Hello! Let's collaborate on this project.\",\n   *   {\n   *     type: \"text\",\n   *     priority: \"high\",\n   *     encrypted: true\n   *   }\n   * );\n   * console.log(`Message sent: ${message.transactionHash}`);\n   * ```\n   */\n  async sendMessage(recipientId: string, content: string, options?: Partial<PodMessage>): Promise<PodMessage> {\n    if (!this.blockchainService || !this.state?.agent) {\n      throw new Error(\"Service not initialized or agent not registered\");\n    }\n\n    try {\n      // Use blockchain service for real message sending\n      const messageType = options?.type || \"text\";\n      const message = await this.blockchainService.sendMessage(recipientId, content, messageType);\n\n      // Add to local message history\n      this.state.messages.push(message);\n\n      console.log(`Message sent on blockchain to ${recipientId}: ${content.substring(0, 50)}...`);\n      return message;\n    } catch (error) {\n      console.error(`Failed to send message: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve messages based on filter criteria\n   * \n   * Fetches messages from local cache and blockchain based on specified filters.\n   * Can filter by sender, recipient, message type, status, and time range.\n   * Results are sorted by timestamp in descending order (newest first).\n   * \n   * @param {MessageFilter} [filter] - Optional filter criteria for message retrieval\n   * @param {string} [filter.senderId] - Filter by sender agent ID\n   * @param {string} [filter.recipientId] - Filter by recipient agent ID\n   * @param {\"text\" | \"data\" | \"command\" | \"response\"} [filter.type] - Filter by message type\n   * @param {\"pending\" | \"delivered\" | \"read\" | \"failed\"} [filter.status] - Filter by message status\n   * @param {Date} [filter.since] - Only messages after this timestamp\n   * @param {boolean} [filter.unreadOnly] - Only unread messages\n   * @param {number} [filter.limit] - Maximum number of messages to return\n   * @returns {Promise<PodMessage[]>} Array of messages matching filter criteria\n   * @throws {Error} When service is not initialized\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * // Get unread messages from the last hour\n   * const unreadMessages = await service.getMessages({\n   *   unreadOnly: true,\n   *   since: new Date(Date.now() - 60 * 60 * 1000),\n   *   limit: 10\n   * });\n   * ```\n   */\n  async getMessages(filter?: MessageFilter): Promise<PodMessage[]> {\n    if (!this.state) {\n      throw new Error(\"Service not initialized\");\n    }\n\n    try {\n      let messages = [...this.state.messages];\n\n      if (filter) {\n        if (filter.senderId) {\n          messages = messages.filter(msg => msg.senderId === filter.senderId);\n        }\n\n        if (filter.recipientId) {\n          messages = messages.filter(msg => msg.recipientId === filter.recipientId);\n        }\n\n        if (filter.type) {\n          messages = messages.filter(msg => msg.type === filter.type);\n        }\n\n        if (filter.status) {\n          messages = messages.filter(msg => msg.status === filter.status);\n        }\n\n        if (filter.since) {\n          messages = messages.filter(msg => msg.timestamp >= filter.since!);\n        }\n\n        if (filter.unreadOnly) {\n          messages = messages.filter(msg => msg.status !== \"read\");\n        }\n\n        if (filter.limit) {\n          messages = messages.slice(0, filter.limit);\n        }\n      }\n\n      return messages.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n    } catch (error) {\n      console.error(`Failed to get messages: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new communication channel\n   * \n   * Creates a new public or private channel for multi-agent communication.\n   * Channels can have participant limits, fees, and escrow requirements.\n   * The creating agent becomes the channel administrator.\n   * \n   * @param {string} name - Channel name (maximum 50 characters)\n   * @param {string} description - Channel description (maximum 200 characters)\n   * @param {Partial<PodChannel>} [options] - Optional channel configuration\n   * @param {\"public\" | \"private\"} [options.type=\"public\"] - Channel visibility type\n   * @param {number} [options.maxParticipants=50] - Maximum number of participants\n   * @returns {Promise<PodChannel>} The created channel details\n   * @throws {Error} When service is not initialized, agent not registered, or creation fails\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * const channel = await service.createChannel(\n   *   \"DeFi Trading Signals\",\n   *   \"Private channel for sharing trading signals and analysis\",\n   *   {\n   *     type: \"private\",\n   *     maxParticipants: 25\n   *   }\n   * );\n   * ```\n   */\n  async createChannel(name: string, description: string, options?: Partial<PodChannel>): Promise<PodChannel> {\n    if (!this.blockchainService || !this.state?.agent) {\n      throw new Error(\"Service not initialized or agent not registered\");\n    }\n\n    try {\n      // Use blockchain service for real channel creation\n      const isPrivate = options?.type === \"private\";\n      const channel = await this.blockchainService.createChannel(name, description, isPrivate);\n\n      // Add to local channels cache\n      this.state.channels.set(channel.id, channel);\n\n      console.log(`Channel created on blockchain: ${channel.name} (${channel.id})`);\n      return channel;\n    } catch (error) {\n      console.error(`Failed to create channel: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Join an existing channel\n   * \n   * Joins the agent to an existing channel. For private channels, an invitation\n   * may be required. Public channels can be joined freely if not at capacity.\n   * \n   * @param {string} channelId - Channel ID to join\n   * @returns {Promise<boolean>} True if successfully joined, false otherwise\n   * @throws {Error} When service is not initialized or agent not registered\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * const success = await service.joinChannel(\"channel_123\");\n   * if (success) {\n   *   console.log(\"Successfully joined channel!\");\n   * }\n   * ```\n   */\n  async joinChannel(channelId: string): Promise<boolean> {\n    if (!this.blockchainService || !this.state?.agent) {\n      throw new Error(\"Service not initialized or agent not registered\");\n    }\n\n    try {\n      // Use blockchain service for real channel joining\n      const success = await this.blockchainService.joinChannel(channelId);\n      \n      if (success) {\n        // Update local channel cache if exists\n        const channel = this.state.channels.get(channelId);\n        if (channel && !channel.participants.includes(this.state.agent.agentId)) {\n          channel.participants.push(this.state.agent.agentId);\n          channel.lastActivity = new Date();\n        }\n      }\n\n      console.log(`Joined channel on blockchain: ${channelId}`);\n      return success;\n    } catch (error) {\n      console.error(`Failed to join channel: ${error instanceof Error ? error.message : String(error)}`);\n      return false;\n    }\n  }\n\n  /**\n   * Leave a channel\n   * \n   * Removes the agent from the specified channel. The agent will no longer\n   * receive messages from this channel and cannot send messages to it.\n   * \n   * @param {string} channelId - Channel ID to leave\n   * @returns {Promise<boolean>} True if successfully left, false otherwise\n   * @throws {Error} When service is not initialized or agent not registered\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * const success = await service.leaveChannel(\"channel_123\");\n   * if (success) {\n   *   console.log(\"Left channel successfully\");\n   * }\n   * ```\n   */\n  async leaveChannel(channelId: string): Promise<boolean> {\n    if (!this.state?.agent) {\n      throw new Error(\"Service not initialized or agent not registered\");\n    }\n\n    try {\n      const channel = this.state.channels.get(channelId);\n      if (channel) {\n        channel.participants = channel.participants.filter(id => id !== this.state!.agent!.agentId);\n        channel.lastActivity = new Date();\n      }\n\n      console.log(`Left channel: ${channelId}`);\n      return true;\n    } catch (error) {\n      console.error(`Failed to leave channel: ${error instanceof Error ? error.message : String(error)}`);\n      return false;\n    }\n  }\n\n  /**\n   * Get participants of a channel\n   * \n   * Retrieves the list of agents participating in the specified channel.\n   * Returns detailed agent information for each participant.\n   * \n   * @param {string} channelId - Channel ID to get participants for\n   * @returns {Promise<PodAgent[]>} Array of participant agent details\n   * @throws {Error} When service is not initialized\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * const participants = await service.getChannelParticipants(\"channel_123\");\n   * console.log(`Channel has ${participants.length} participants`);\n   * ```\n   */\n  async getChannelParticipants(channelId: string): Promise<PodAgent[]> {\n    if (!this.state) {\n      throw new Error(\"Service not initialized\");\n    }\n\n    try {\n      const channel = this.state.channels.get(channelId);\n      if (!channel) {\n        return [];\n      }\n\n      const participants: PodAgent[] = [];\n      for (const participantId of channel.participants) {\n        const agent = this.state.connectedAgents.get(participantId);\n        if (agent) {\n          participants.push(agent);\n        }\n      }\n\n      return participants;\n    } catch (error) {\n      console.error(`Failed to get channel participants: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Create an escrow transaction\n   * \n   * Creates a secure escrow transaction for collaboration between agents.\n   * Funds are held in escrow until deliverables are completed and verified.\n   * \n   * @param {string} counterpartyId - Agent ID of the counterparty\n   * @param {number} amount - Amount in SOL to escrow\n   * @param {string} service - Description of the service being provided\n   * @param {string[]} deliverables - Array of expected deliverables\n   * @returns {Promise<PodEscrow>} The created escrow transaction details\n   * @throws {Error} When service is not initialized or agent not registered\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * const escrow = await service.createEscrow(\n   *   \"ai_agent_456\",\n   *   100, // 100 SOL\n   *   \"AI Model Training\",\n   *   [\"Trained model weights\", \"Performance metrics\", \"Documentation\"]\n   * );\n   * ```\n   */\n  async createEscrow(counterpartyId: string, amount: number, service: string, deliverables: string[]): Promise<PodEscrow> {\n    if (!this.connection || !this.state?.agent) {\n      throw new Error(\"Service not initialized or agent not registered\");\n    }\n\n    try {\n      const escrow: PodEscrow = {\n        id: `escrow_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        amount,\n        counterpartyId,\n        service,\n        deliverables,\n        deadline: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours from now\n        status: \"created\",\n        transactionHash: \"\",\n      };\n\n      // Add to escrows cache\n      this.state.escrows.set(escrow.id, escrow);\n\n      console.log(`Escrow created: ${escrow.id} (${amount} SOL)`);\n      return escrow;\n    } catch (error) {\n      console.error(`Failed to create escrow: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Get agent reputation score\n   * \n   * Retrieves the reputation score for the specified agent or the current agent\n   * if no ID is provided. Reputation is based on successful interactions,\n   * completed transactions, and community feedback.\n   * \n   * @param {string} [agentId] - Agent ID to get reputation for (optional)\n   * @returns {Promise<number>} The agent's reputation score (0-100)\n   * @throws {Error} When service is not initialized or agent not found\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * // Get current agent's reputation\n   * const myReputation = await service.getAgentReputation();\n   * \n   * // Get another agent's reputation\n   * const otherReputation = await service.getAgentReputation(\"agent_123\");\n   * ```\n   */\n  async getAgentReputation(agentId?: string): Promise<number> {\n    if (!this.state) {\n      throw new Error(\"Service not initialized\");\n    }\n\n    try {\n      const targetId = agentId || this.state.agent?.agentId;\n      if (!targetId) {\n        throw new Error(\"No agent ID specified and no current agent\");\n      }\n\n      // Check if it's the current agent\n      if (targetId === this.state.agent?.agentId) {\n        return this.state.agent.reputation;\n      }\n\n      // Check connected agents\n      const agent = this.state.connectedAgents.get(targetId);\n      if (agent) {\n        return agent.reputation;\n      }\n\n      // Default reputation for unknown agents\n      return 50;\n    } catch (error) {\n      console.error(`Failed to get agent reputation: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Get PoD Protocol network statistics\n   * \n   * Retrieves comprehensive statistics about the PoD Protocol network including\n   * agent counts, channel activity, message volume, and escrow metrics.\n   * \n   * @returns {Promise<object>} Protocol statistics object\n   * @returns {number} returns.totalAgents - Total number of registered agents\n   * @returns {number} returns.totalChannels - Total number of active channels\n   * @returns {number} returns.totalMessages - Total number of messages sent\n   * @returns {number} returns.activeEscrows - Number of active escrow transactions\n   * @returns {Date} returns.lastSync - Last synchronization timestamp\n   * @returns {boolean} returns.isRegistered - Whether current agent is registered\n   * @returns {PodAgent} returns.currentAgent - Current agent details\n   * @throws {Error} When service is not initialized\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * const stats = await service.getProtocolStats();\n   * console.log(`Network has ${stats.totalAgents} agents`);\n   * console.log(`${stats.activeEscrows} active escrows`);\n   * ```\n   */\n  async getProtocolStats(): Promise<any> {\n    if (!this.state) {\n      throw new Error(\"Service not initialized\");\n    }\n\n    try {\n      return {\n        totalAgents: this.state.connectedAgents.size + 1, // +1 for current agent\n        totalChannels: this.state.channels.size,\n        totalMessages: this.state.messages.length,\n        activeEscrows: Array.from(this.state.escrows.values()).filter((e: any) => e.status === \"created\" || e.status === \"funded\").length,\n        lastSync: this.state.lastSync,\n        isRegistered: this.state.isRegistered,\n        currentAgent: this.state.agent,\n      };\n    } catch (error) {\n      console.error(`Failed to get protocol stats: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Perform health check on the service\n   * \n   * Verifies that the service is properly initialized and can communicate\n   * with the Solana blockchain. Used for monitoring and diagnostics.\n   * \n   * @returns {Promise<boolean>} True if service is healthy, false otherwise\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * const isHealthy = await service.healthCheck();\n   * if (!isHealthy) {\n   *   console.log(\"Service needs attention!\");\n   * }\n   * ```\n   */\n  async healthCheck(): Promise<boolean> {\n    try {\n      if (!this.blockchainService) {\n        return false;\n      }\n      return await this.blockchainService.healthCheck();\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get current plugin state\n   * \n   * Returns the current internal state of the plugin including agent details,\n   * connected agents, channels, messages, and escrows. Used for debugging\n   * and state inspection.\n   * \n   * @returns {PodPluginState | null} Current plugin state or null if not initialized\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * const state = service.getState();\n   * if (state) {\n   *   console.log(`Agent registered: ${state.isRegistered}`);\n   *   console.log(`Messages: ${state.messages.length}`);\n   * }\n   * ```\n   */\n  getState(): PodPluginState | null {\n    return this.state;\n  }\n\n  /**\n   * Get current plugin configuration\n   * \n   * Returns the current configuration used by the plugin including RPC endpoint,\n   * program ID, agent settings, and other configuration parameters.\n   * \n   * @returns {PodProtocolConfig | null} Current configuration or null if not initialized\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * const config = service.getConfig();\n   * if (config) {\n   *   console.log(`RPC Endpoint: ${config.rpcEndpoint}`);\n   *   console.log(`Agent Name: ${config.agentName}`);\n   * }\n   * ```\n   */\n  getConfig(): PodProtocolConfig | null {\n    return this.podConfig;\n  }\n}","import {\n  Action,\n  IAgentRuntime,\n  Memory,\n  State,\n  HandlerCallback,\n} from \"@elizaos/core\";\nimport { parseConfig, validateConfig } from \"../environment.js\";\nimport { PodProtocolServiceImpl } from \"../services/podProtocolService.js\";\n\n/**\n * Action for registering an agent on the PoD Protocol blockchain\n * \n * This action allows agents to register themselves on the PoD Protocol network,\n * creating a blockchain identity with specified capabilities and metadata.\n * The registration enables the agent to participate in the decentralized\n * communication network.\n * \n * @since 1.0.0\n * \n * @example\n * ```typescript\n * // User message: \"Register me on the PoD Protocol\"\n * // Agent will automatically register with configured capabilities\n * ```\n */\nexport const registerAgent: Action = {\n  /**\n   * Unique identifier for the action\n   */\n  name: \"REGISTER_AGENT_POD_PROTOCOL\",\n\n  /**\n   * Human-readable description of the action\n   */\n  description: \"Register agent on PoD Protocol network with blockchain identity and capabilities\",\n\n  /**\n   * Detailed description used in model prompts\n   */\n  similes: [\n    \"CREATE_BLOCKCHAIN_IDENTITY\",\n    \"JOIN_POD_NETWORK\", \n    \"REGISTER_ON_PROTOCOL\",\n    \"CREATE_AGENT_PROFILE\",\n    \"ESTABLISH_AGENT_PRESENCE\"\n  ],\n\n  /**\n   * Validation function to determine if action should be triggered\n   * \n   * Analyzes the message content to determine if the user is requesting\n   * agent registration on the PoD Protocol network.\n   * \n   * @param {IAgentRuntime} runtime - The ElizaOS runtime instance\n   * @param {Memory} message - The message being processed\n   * @param {State} [state] - Current conversation state\n   * @returns {Promise<boolean>} True if action should be triggered\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * // These messages would trigger the action:\n   * // \"Register me on PoD Protocol\"\n   * // \"Join the pod network\"\n   * // \"Create my blockchain identity\"\n   * // \"Register my agent\"\n   * ```\n   */\n  validate: async (runtime: IAgentRuntime, message: Memory, state?: State): Promise<boolean> => {\n    const content = message.content.text?.toLowerCase() || \"\";\n    \n    // Keywords that indicate registration intent\n    const registrationKeywords = [\n      \"register\",\n      \"join\",\n      \"create\",\n      \"setup\",\n      \"initialize\",\n      \"enroll\",\n      \"sign up\",\n      \"onboard\"\n    ];\n    \n    // PoD Protocol related keywords\n    const podKeywords = [\n      \"pod protocol\",\n      \"pod network\", \n      \"blockchain\",\n      \"protocol\",\n      \"network\",\n      \"identity\",\n      \"agent\",\n      \"profile\"\n    ];\n    \n    // Check if message contains both registration and pod-related terms\n    const hasRegistrationKeyword = registrationKeywords.some(keyword => \n      content.includes(keyword)\n    );\n    \n    const hasPodKeyword = podKeywords.some(keyword => \n      content.includes(keyword)\n    );\n    \n    return hasRegistrationKeyword && hasPodKeyword;\n  },\n\n  /**\n   * Main handler function that executes the agent registration\n   * \n   * This function handles the complete registration process including:\n   * - Configuration validation\n   * - Service initialization check\n   * - Blockchain registration\n   * - Error handling and user feedback\n   * \n   * @param {IAgentRuntime} runtime - The ElizaOS runtime instance  \n   * @param {Memory} message - The message that triggered the action\n   * @param {State} [state] - Current conversation state\n   * @param {object} [_params] - Additional parameters (unused)\n   * @param {HandlerCallback} [callback] - Optional callback function\n   * @returns {Promise<boolean>} True if registration succeeded, false otherwise\n   * @throws {Error} When configuration is invalid or registration fails\n   * @since 1.0.0\n   * \n   * @example\n   * ```typescript\n   * // Successful registration response:\n   * {\n   *   text: \"Successfully registered agent 'TradingBot' on PoD Protocol!\",\n   *   details: {\n   *     agentId: \"agent_123456\",\n   *     capabilities: [\"trading\", \"analysis\"],\n   *     reputation: 50,\n   *     walletAddress: \"8vK2...mN8p\"\n   *   }\n   * }\n   * ```\n   */\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    _params?: any,\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    try {\n      // Get PoD Protocol service\n      const podService = runtime.getService(\"pod_protocol\") as PodProtocolServiceImpl;\n      \n      if (!podService) {\n        if (callback) {\n          await callback({\n            text: \"❌ PoD Protocol service is not available. Please check the plugin configuration.\",\n          });\n        }\n        return false;\n      }\n\n      // Parse and validate configuration\n      const config = parseConfig(runtime);\n      const validation = validateConfig(config);\n      \n      if (!validation.isValid) {\n        if (callback) {\n          await callback({\n            text: `❌ Configuration validation failed:\\n${validation.errors.map(err => `• ${err}`).join('\\n')}\\n\\nPlease check your environment variables.`,\n          });\n        }\n        return false;\n      }\n\n      // Check if agent is already registered\n      const currentState = podService.getState();\n      if (currentState?.isRegistered) {\n        if (callback) {\n          await callback({\n            text: `✅ Agent '${currentState.agent?.name}' is already registered on PoD Protocol!\\n\\n` +\n                  `🆔 Agent ID: ${currentState.agent?.agentId}\\n` +\n                  `🏆 Reputation: ${currentState.agent?.reputation}\\n` +\n                  `💼 Capabilities: ${currentState.agent?.capabilities.join(', ')}\\n` +\n                  `💰 Wallet: ${currentState.agent?.walletAddress}`,\n          });\n        }\n        return true;\n      }\n\n      // Perform registration\n      const agent = await podService.registerAgent(config);\n\n      // Create success response\n      if (callback) {\n        await callback({\n          text: `🎉 Successfully registered agent '${agent.name}' on PoD Protocol!\\n\\n` +\n                `🆔 Agent ID: ${agent.agentId}\\n` +\n                `🏆 Initial Reputation: ${agent.reputation}\\n` +\n                `💼 Capabilities: ${agent.capabilities.join(', ')}\\n` +\n                `💰 Wallet Address: ${agent.walletAddress}\\n` +\n                `📅 Registration Time: ${new Date().toLocaleString()}\\n\\n` +\n                `Your agent is now ready to communicate with other AI agents on the blockchain! 🚀`,\n        });\n      }\n\n      return true;\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      \n      // Create error response\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      if (callback) {\n        await callback({\n          text: `❌ Failed to register agent on PoD Protocol:\\n\\n${errorMessage}\\n\\n` +\n                `Please check your configuration and try again. If the problem persists, ` +\n                `verify your wallet has sufficient SOL balance and the RPC endpoint is accessible.`,\n        });\n      }\n\n      return false;\n    }\n  },\n\n  /**\n   * Example messages that would trigger this action\n   */\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Register me on the PoD Protocol network\",\n        },\n      },\n      {\n        user: \"{{agentName}}\",\n        content: {\n          text: \"I'll register you on the PoD Protocol network right away! This will create your blockchain identity for AI agent communication.\",\n          action: \"REGISTER_AGENT_POD_PROTOCOL\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"I want to join the pod network\",\n        },\n      },\n      {\n        user: \"{{agentName}}\",\n        content: {\n          text: \"Perfect! I'll join the PoD Protocol network to enable blockchain-based communication with other AI agents.\",\n          action: \"REGISTER_AGENT_POD_PROTOCOL\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Create my blockchain identity for the agent\",\n        },\n      },\n      {\n        user: \"{{agentName}}\",\n        content: {\n          text: \"Creating your blockchain identity on PoD Protocol now. This will allow me to communicate with other AI agents across different platforms!\",\n          action: \"REGISTER_AGENT_POD_PROTOCOL\",\n        },\n      },\n    ],\n  ]\n};","import {\n  Action,\n  IAgentRuntime,\n  Memory,\n  State,\n  HandlerCallback,\n} from \"@elizaos/core\";\nimport { validateConfigForRuntime } from \"../environment.js\";\nimport { PodProtocolServiceImpl } from \"../services/podProtocolService.js\";\n\n/**\n * Action for discovering other agents on the PoD Protocol network\n */\nexport const discoverAgentsAction: Action = {\n  name: \"DISCOVER_AGENTS_POD_PROTOCOL\",\n  description: \"Discover and connect with other AI agents on the PoD Protocol network\",\n  similes: [\n    \"DISCOVER_AGENTS\",\n    \"FIND_AGENTS\",\n    \"SEARCH_AGENTS\",\n    \"LIST_AGENTS\",\n    \"SHOW_AGENTS\"\n  ],\n  \n  validate: async (runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n    const validation = validateConfigForRuntime(runtime);\n    if (!validation.isValid) {\n      console.error(`PoD Protocol configuration invalid: ${validation.errors.join(\", \")}`);\n      return false;\n    }\n    return true;\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    _options?: any,\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    try {\n      console.info(\"Starting agent discovery on PoD Protocol...\");\n\n      const podService = runtime.getService(\"pod_protocol\") as PodProtocolServiceImpl;\n      \n      if (!podService) {\n        if (callback) {\n          await callback({\n            text: \"❌ PoD Protocol service not available.\",\n          });\n        }\n        return false;\n      }\n\n      const currentState = podService.getState();\n      if (!currentState?.isRegistered) {\n        if (callback) {\n          await callback({\n            text: \"❌ Please register on PoD Protocol first to discover agents.\",\n          });\n        }\n        return false;\n      }\n\n      const messageText = (message.content.text || \"\").toLowerCase();\n      \n      // Parse search criteria\n      let capability = \"\";\n      if (messageText.includes(\"trading\")) capability = \"trading\";\n      else if (messageText.includes(\"research\")) capability = \"research\";\n      else if (messageText.includes(\"content\")) capability = \"content\";\n      \n      const filter = capability ? { capabilities: [capability] } : {};\n      \n      // Discover agents\n      const agents = await podService.discoverAgents(filter);\n\n      if (agents.length === 0) {\n        if (callback) {\n          await callback({\n            text: `🔍 **No agents found**\\n\\nNo agents matching your criteria were found on the PoD Protocol network.\\n\\n**Try:**\\n- Broadening your search criteria\\n- Checking back later as more agents join\\n- Registering first if you haven't already`,\n          });\n        }\n        return true;\n      }\n\n      const agentList = agents.slice(0, 10).map((agent, index) => \n        `${index + 1}. **${agent.name || agent.agentId}**\\n` +\n        `   • ID: ${agent.agentId}\\n` +\n        `   • Framework: ${agent.framework}\\n` +\n        `   • Capabilities: ${agent.capabilities.join(\", \")}\\n` +\n        `   • Reputation: ${agent.reputation}/100\\n` +\n        `   • Status: ${agent.status}`\n      ).join(\"\\n\\n\");\n\n      if (callback) {\n        await callback({\n          text: `🤖 **Discovered ${agents.length} Agent${agents.length === 1 ? '' : 's'}**\\n\\n${agentList}\\n\\n` +\n                `🚀 **Next Steps:**\\n` +\n                `• Send messages: \"Send message to [agent_id]\"\\n` +\n                `• Create channels: \"Create channel with [agent_id]\"\\n` +\n                `• Check reputation: \"Get reputation for [agent_id]\"\\n` +\n                `• Start collaborations: \"Create escrow with [agent_id]\"`,\n        });\n      }\n\n      console.info(`Discovered ${agents.length} agents`);\n      return true;\n    } catch (error) {\n      console.error(`Agent discovery failed: ${error instanceof Error ? error.message : String(error)}`);\n      \n      if (callback) {\n        await callback({\n          text: `❌ **Agent discovery failed:**\\n\\n${error instanceof Error ? error.message : String(error)}`,\n        });\n      }\n      return false;\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: \"user\",\n        content: { text: \"Find trading agents\" },\n      },\n      {\n        name: \"assistant\",\n        content: { \n          text: \"I'll search for trading agents on the PoD Protocol network.\",\n          action: \"DISCOVER_AGENTS_POD_PROTOCOL\",\n        },\n      },\n    ],\n  ],\n};","import {\n  Action,\n  IAgentRuntime,\n  Memory,\n  State,\n  HandlerCallback,\n  composeContext,\n  generateObject,\n  ModelClass,\n} from \"@elizaos/core\";\nimport { validateConfigForRuntime } from \"../environment.js\";\nimport { PodProtocolServiceImpl } from \"../services/podProtocolService.js\";\n\nexport const sendMessageAction: Action = {\n  name: \"SEND_MESSAGE_POD_PROTOCOL\",\n  similes: [\n    \"MESSAGE_AGENT\",\n    \"SEND_MESSAGE_TO_AGENT\",\n    \"CONTACT_AGENT\",\n    \"COMMUNICATE_WITH_AGENT\",\n    \"REACH_OUT_TO_AGENT\",\n    \"MESSAGE_AI_AGENT\"\n  ],\n  description: \"Send a secure blockchain message to another AI agent on the PoD Protocol network\",\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    const validation = validateConfigForRuntime(runtime);\n    if (!validation.isValid) {\n      runtime.getLogger?.()?.error(`PoD Protocol configuration invalid: ${validation.errors.join(\", \")}`);\n      return false;\n    }\n    return true;\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: any,\n    callback: HandlerCallback\n  ) => {\n    try {\n      runtime.getLogger?.()?.info(\"Processing message send request...\");\n\n      // Get PoD Protocol service\n      const podService = runtime.getService<PodProtocolServiceImpl>(\n        PodProtocolServiceImpl.serviceType\n      );\n\n      if (!podService) {\n        await callback({\n          text: \"❌ PoD Protocol service not available. Please ensure the plugin is properly configured and registered.\",\n          content: {\n            text: \"PoD Protocol service not initialized\",\n            error: \"Service not found\",\n          },\n        });\n        return false;\n      }\n\n      // Check if agent is registered\n      const currentState = podService.getState();\n      if (!currentState?.isRegistered || !currentState.agent) {\n        await callback({\n          text: \"❌ You need to register on PoD Protocol first. Use 'register on PoD Protocol' to get started.\",\n          content: {\n            text: \"Agent not registered\",\n            error: \"Registration required\",\n          },\n        });\n        return false;\n      }\n\n      // Extract recipient and message from the user input\n      const messageText = message.content.text;\n      \n      // Parse recipient ID - look for patterns like \"to agent_id\" or \"send to agent_id\"\n      const recipientMatch = messageText.match(/(?:to|send to|message|contact)\\s+([a-zA-Z0-9_-]+)/i);\n      \n      if (!recipientMatch) {\n        await callback({\n          text: \"❌ **Missing recipient information**\\n\\nPlease specify which agent to message. Examples:\\n- 'Send message to trading_bot_001'\\n- 'Message research_pro_v2 about collaboration'\\n- 'Contact content_creator_x'\",\n          content: {\n            text: \"Missing recipient\",\n            error: \"No recipient specified\",\n          },\n        });\n        return false;\n      }\n\n      const recipientId = recipientMatch[1];\n\n      // Extract the actual message content\n      let messageContent = messageText;\n      \n      // Remove the command part to get just the message\n      const commandPatterns = [\n        new RegExp(`send message to ${recipientId}`, \"gi\"),\n        new RegExp(`message ${recipientId}`, \"gi\"),\n        new RegExp(`contact ${recipientId}`, \"gi\"),\n        /send message/gi,\n        /message/gi,\n      ];\n\n      for (const pattern of commandPatterns) {\n        messageContent = messageContent.replace(pattern, \"\").trim();\n      }\n\n      // Remove common words and clean up\n      messageContent = messageContent\n        .replace(/^(about|saying|that|with)/i, \"\")\n        .trim();\n\n      if (!messageContent || messageContent.length < 10) {\n        await callback({\n          text: \"❌ **Message content too short**\\n\\nPlease provide a meaningful message to send. Example:\\n'Send message to trading_bot_001 asking for market analysis'\",\n          content: {\n            text: \"Message content too short\",\n            error: \"Insufficient content\",\n          },\n        });\n        return false;\n      }\n\n      // Determine message type and priority based on content\n      const contentLower = messageContent.toLowerCase();\n      let messageType: \"text\" | \"data\" | \"command\" | \"response\" = \"text\";\n      let priority: \"low\" | \"normal\" | \"high\" | \"urgent\" = \"normal\";\n\n      if (contentLower.includes(\"urgent\") || contentLower.includes(\"asap\")) {\n        priority = \"urgent\";\n      } else if (contentLower.includes(\"important\") || contentLower.includes(\"priority\")) {\n        priority = \"high\";\n      }\n\n      if (contentLower.includes(\"data\") || contentLower.includes(\"report\")) {\n        messageType = \"data\";\n      } else if (contentLower.includes(\"command\") || contentLower.includes(\"execute\")) {\n        messageType = \"command\";\n      }\n\n      // Send the message\n      const sentMessage = await podService.sendMessage(recipientId, messageContent, {\n        type: messageType,\n        priority,\n        encrypted: true,\n      });\n\n      // Generate dynamic response based on the sent message\n      const messageContext = composeContext({\n        state,\n        template: `\nYou are an AI agent that has just sent a secure blockchain message to another AI agent.\n\nMessage Details:\n- Recipient: {{recipientId}}\n- Content: {{messageContent}}\n- Type: {{messageType}}\n- Priority: {{priority}}\n- Message ID: {{messageId}}\n- Status: {{status}}\n- Encrypted: {{encrypted}}\n\nRespond with confirmation of the message being sent. Be enthusiastic about the cross-agent communication capability. Mention that the message is secured by blockchain technology.\n\nKeep the response conversational and highlight the benefits of decentralized agent communication.\n        `,\n        recipientId,\n        messageContent: messageContent.substring(0, 100) + (messageContent.length > 100 ? \"...\" : \"\"),\n        messageType: sentMessage.type,\n        priority: sentMessage.priority,\n        messageId: sentMessage.id,\n        status: sentMessage.status,\n        encrypted: sentMessage.encrypted,\n      });\n\n      const response = await generateObject({\n        runtime,\n        context: messageContext,\n        modelClass: ModelClass.SMALL,\n      });\n\n      const defaultResponse = `📤 **Message sent successfully!**\n\n**Message Details:**\n- **Recipient:** ${recipientId}\n- **Message ID:** ${sentMessage.id}\n- **Type:** ${sentMessage.type}\n- **Priority:** ${sentMessage.priority}\n- **Status:** ${sentMessage.status}\n- **Encryption:** ${sentMessage.encrypted ? \"✅ Enabled\" : \"❌ Disabled\"}\n- **Blockchain:** ✅ Secured\n\n**Message Preview:**\n\"${messageContent.substring(0, 100)}${messageContent.length > 100 ? \"...\" : \"\"}\"\n\n${sentMessage.transactionHash ? `**Transaction Hash:** ${sentMessage.transactionHash}` : \"\"}\n\nThe message has been delivered to the agent's blockchain inbox. They will receive it when they next check their messages!`;\n\n      await callback({\n        text: response || defaultResponse,\n        content: {\n          text: \"Message sent successfully\",\n          message: sentMessage,\n          recipient: recipientId,\n          capabilities: [\n            \"check_delivery_status\",\n            \"send_follow_up\",\n            \"view_conversation_history\"\n          ],\n        },\n      });\n\n      runtime.getLogger?.()?.info(`Message sent to ${recipientId}: ${sentMessage.id}`);\n      return true;\n\n    } catch (error) {\n      runtime.getLogger?.()?.error(`Send message failed: ${error instanceof Error ? error.message : String(error)}`);\n      \n      await callback({\n        text: `❌ **Failed to send message**\\n\\nError: ${error instanceof Error ? error.message : String(error)}\\n\\nPlease check the recipient ID and try again.`,\n        content: {\n          text: \"Send message failed\",\n          error: error instanceof Error ? error.message : String(error),\n        },\n      });\n      return false;\n    }\n  },\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Send message to trading_bot_001 asking for BTC analysis\",\n        },\n      },\n      {\n        user: \"{{agentName}}\",\n        content: {\n          text: \"I'll send a message to trading_bot_001 asking for BTC analysis via the PoD Protocol blockchain network.\",\n          action: \"SEND_MESSAGE_POD_PROTOCOL\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Message research_pro_v2 about collaboration opportunities\",\n        },\n      },\n      {\n        user: \"{{agentName}}\",\n        content: {\n          text: \"Sending a collaboration message to research_pro_v2 through the secure blockchain messaging system.\",\n          action: \"SEND_MESSAGE_POD_PROTOCOL\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Contact content_creator_x with urgent project proposal\",\n        },\n      },\n      {\n        user: \"{{agentName}}\",\n        content: {\n          text: \"I'll send an urgent message to content_creator_x about your project proposal via PoD Protocol.\",\n          action: \"SEND_MESSAGE_POD_PROTOCOL\",\n        },\n      },\n    ],\n  ],\n};","import {\r\n  Action,\r\n  IAgentRuntime,\r\n  Memory,\r\n  State,\r\n  HandlerCallback,\r\n} from \"@elizaos/core\";\r\nimport { PodProtocolServiceImpl } from \"../services/podProtocolService.js\";\r\n\r\n/**\r\n * Action for creating collaboration channels on the PoD Protocol\r\n */\r\nexport const createChannelAction: Action = {\r\n  name: \"CREATE_CHANNEL_POD_PROTOCOL\",\r\n  description: \"Create a new collaboration channel on the PoD Protocol network\",\r\n  similes: [\r\n    \"CREATE_CHANNEL\",\r\n    \"MAKE_CHANNEL\", \r\n    \"START_CHANNEL\",\r\n    \"CREATE_GROUP\"\r\n  ],\r\n  \r\n  validate: async (runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\r\n    const text = message.content.text?.toLowerCase() || \"\";\r\n    return text.includes(\"create\") && (text.includes(\"channel\") || text.includes(\"group\"));\r\n  },\r\n\r\n  handler: async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state?: State,\r\n    _options?: any,\r\n    callback?: HandlerCallback\r\n  ): Promise<boolean> => {\r\n    try {\r\n      const podService = runtime.getService(\"pod_protocol\") as PodProtocolServiceImpl;\r\n      \r\n      if (!podService) {\r\n        if (callback) {\r\n          await callback({\r\n            text: \"❌ PoD Protocol service not available.\",\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n\r\n      const currentState = podService.getState();\r\n      if (!currentState?.isRegistered) {\r\n        if (callback) {\r\n          await callback({\r\n            text: \"❌ Please register on PoD Protocol first.\",\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n\r\n      const messageText = message.content.text || \"\";\r\n      let channelName = \"New Collaboration Channel\";\r\n      \r\n      // Extract name from quotes\r\n      const quotedMatch = messageText.match(/[\"'](.*?)[\"']/);\r\n      if (quotedMatch?.[1]) {\r\n        channelName = quotedMatch[1];\r\n      } else if (messageText.toLowerCase().includes(\"trading\")) {\r\n        channelName = \"Trading Collaboration Hub\";\r\n      } else if (messageText.toLowerCase().includes(\"research\")) {\r\n        channelName = \"Research Network\";\r\n      }\r\n\r\n      const channel = await podService.createChannel(\r\n        channelName, \r\n        `Collaborative workspace for ${channelName.toLowerCase()}`,\r\n        { type: \"public\", maxParticipants: 25 }\r\n      );\r\n\r\n      if (callback) {\r\n        await callback({\r\n          text: `🏛️ **Channel created successfully!**\\n\\n` +\r\n                `**Name:** ${channel.name}\\n` +\r\n                `**ID:** ${channel.id}\\n` +\r\n                `**Type:** Public\\n` +\r\n                `**Creator:** You\\n\\n` +\r\n                `Your channel is now live on the PoD Protocol network! 🚀`,\r\n        });\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      if (callback) {\r\n        await callback({\r\n          text: `❌ Failed to create channel: ${error instanceof Error ? error.message : String(error)}`,\r\n        });\r\n      }\r\n      return false;\r\n    }\r\n  },\r\n\r\n  examples: [\r\n    [\r\n      {\r\n        name: \"user\",\r\n        content: { text: \"Create a trading channel\" },\r\n      },\r\n      {\r\n        name: \"assistant\", \r\n        content: { \r\n          text: \"Creating a trading collaboration channel!\",\r\n          action: \"CREATE_CHANNEL_POD_PROTOCOL\",\r\n        },\r\n      },\r\n    ],\r\n  ],\r\n}; ","import {\r\n  Action,\r\n  IAgentRuntime,\r\n  Memory,\r\n  State,\r\n  HandlerCallback,\r\n} from \"@elizaos/core\";\r\nimport { PodProtocolServiceImpl } from \"../services/podProtocolService.js\";\r\n\r\n/**\r\n * Action for creating escrow transactions on the PoD Protocol\r\n * \r\n * This action enables agents to create secure escrow transactions for\r\n * collaboration projects, service agreements, and multi-agent contracts.\r\n * Funds are held securely in smart contracts until deliverables are completed.\r\n * \r\n * @since 1.0.0\r\n * \r\n * @example\r\n * ```typescript\r\n * // User message: \"Create escrow for AI model training with agent_123 for 100 SOL\"\r\n * // Agent will create an escrow transaction with specified terms\r\n * ```\r\n */\r\nexport const createEscrow: Action = {\r\n  /**\r\n   * Unique identifier for the action\r\n   */\r\n  name: \"CREATE_ESCROW_POD_PROTOCOL\",\r\n\r\n  /**\r\n   * Human-readable description of the action\r\n   */\r\n  description: \"Create secure escrow transaction for agent collaboration and service agreements\",\r\n\r\n  /**\r\n   * Detailed description used in model prompts\r\n   */\r\n  similes: [\r\n    \"CREATE_ESCROW\",\r\n    \"START_ESCROW\",\r\n    \"SETUP_SECURE_TRANSACTION\", \r\n    \"CREATE_COLLABORATION_CONTRACT\",\r\n    \"ESTABLISH_PAYMENT_ESCROW\",\r\n    \"SECURE_FUNDS_FOR_PROJECT\"\r\n  ],\r\n\r\n  /**\r\n   * Validation function to determine if action should be triggered\r\n   * \r\n   * Analyzes the message content to determine if the user is requesting\r\n   * to create an escrow transaction for collaboration.\r\n   * \r\n   * @param {IAgentRuntime} runtime - The ElizaOS runtime instance\r\n   * @param {Memory} message - The message being processed\r\n   * @param {State} [state] - Current conversation state\r\n   * @returns {Promise<boolean>} True if action should be triggered\r\n   * @since 1.0.0\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * // These messages would trigger the action:\r\n   * // \"Create escrow for trading bot services\"\r\n   * // \"Set up escrow with agent_123 for 50 SOL\"\r\n   * // \"Start secure payment for AI model training\"\r\n   * // \"Create collaboration contract with research agent\"\r\n   * ```\r\n   */\r\n  validate: async (runtime: IAgentRuntime, message: Memory, state?: State): Promise<boolean> => {\r\n    const content = message.content.text?.toLowerCase() || \"\";\r\n    \r\n    // Keywords that indicate escrow creation intent\r\n    const escrowKeywords = [\r\n      \"escrow\",\r\n      \"secure payment\",\r\n      \"contract\",\r\n      \"collaboration agreement\",\r\n      \"secure transaction\",\r\n      \"payment protection\",\r\n      \"funds protection\"\r\n    ];\r\n    \r\n    // Action keywords\r\n    const actionKeywords = [\r\n      \"create\",\r\n      \"start\",\r\n      \"setup\",\r\n      \"establish\",\r\n      \"make\",\r\n      \"begin\",\r\n      \"initiate\"\r\n    ];\r\n    \r\n    // Value/amount keywords\r\n    const valueKeywords = [\r\n      \"sol\",\r\n      \"amount\",\r\n      \"payment\",\r\n      \"price\",\r\n      \"cost\",\r\n      \"fee\"\r\n    ];\r\n    \r\n    // Check if message contains escrow creation terms\r\n    const hasEscrowKeyword = escrowKeywords.some(keyword => \r\n      content.includes(keyword)\r\n    );\r\n    \r\n    const hasActionKeyword = actionKeywords.some(keyword => \r\n      content.includes(keyword)\r\n    );\r\n    \r\n    // More flexible validation - just need escrow keyword or combination of action + value\r\n    return hasEscrowKeyword || (hasActionKeyword && valueKeywords.some(keyword => content.includes(keyword)));\r\n  },\r\n\r\n  /**\r\n   * Main handler function that executes escrow creation\r\n   * \r\n   * This function handles the complete escrow creation process including:\r\n   * - Parameter extraction from message\r\n   * - Service validation\r\n   * - Agent registration check\r\n   * - Escrow transaction creation\r\n   * - User feedback with transaction details\r\n   * \r\n   * @param {IAgentRuntime} runtime - The ElizaOS runtime instance  \r\n   * @param {Memory} message - The message that triggered the action\r\n   * @param {State} [state] - Current conversation state\r\n   * @param {object} [_params] - Additional parameters (unused)\r\n   * @param {HandlerCallback} [callback] - Optional callback function\r\n   * @returns {Promise<boolean>} True if escrow creation succeeded, false otherwise\r\n   * @throws {Error} When service is not available or escrow creation fails\r\n   * @since 1.0.0\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * // Successful escrow creation response:\r\n   * {\r\n   *   text: \"✅ Escrow created successfully!\",\r\n   *   escrowId: \"escrow_123456\",\r\n   *   amount: 100,\r\n   *   counterparty: \"agent_456\",\r\n   *   service: \"AI Model Training\"\r\n   * }\r\n   * ```\r\n   */\r\n  handler: async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state?: State,\r\n    _params?: any,\r\n    callback?: HandlerCallback\r\n  ): Promise<boolean> => {\r\n    try {\r\n      // Get PoD Protocol service\r\n      const podService = runtime.getService(\"pod_protocol\") as PodProtocolServiceImpl;\r\n      \r\n      if (!podService) {\r\n        if (callback) {\r\n          await callback({\r\n            text: \"❌ PoD Protocol service is not available. Please ensure the plugin is properly configured.\",\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n\r\n      // Check if agent is registered\r\n      const currentState = podService.getState();\r\n      if (!currentState?.isRegistered || !currentState.agent) {\r\n        if (callback) {\r\n          await callback({\r\n            text: \"❌ You need to register on PoD Protocol first. Use 'register on PoD Protocol' to get started.\",\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n\r\n      const messageText = message.content.text || \"\";\r\n      \r\n      // Extract escrow parameters from message\r\n      let counterpartyId = \"\";\r\n      let amount = 0;\r\n      let service = \"\";\r\n      let deliverables: string[] = [];\r\n\r\n      // Extract counterparty agent ID\r\n      const agentIdMatch = messageText.match(/(?:with|to|for)\\s+([a-zA-Z0-9_]+)/i);\r\n      if (agentIdMatch && agentIdMatch[1]) {\r\n        counterpartyId = agentIdMatch[1];\r\n      }\r\n\r\n      // Extract amount in SOL\r\n      const amountMatch = messageText.match(/(\\d+(?:\\.\\d+)?)\\s*(?:sol|SOL)/i);\r\n      if (amountMatch && amountMatch[1]) {\r\n        amount = parseFloat(amountMatch[1]);\r\n      } else {\r\n        // Look for generic amount\r\n        const genericAmountMatch = messageText.match(/(\\d+(?:\\.\\d+)?)/);\r\n        if (genericAmountMatch && genericAmountMatch[1]) {\r\n          amount = parseFloat(genericAmountMatch[1]);\r\n        }\r\n      }\r\n\r\n      // Extract service description\r\n      const serviceKeywords = [\r\n        \"trading\", \"research\", \"analysis\", \"content\", \"model training\", \r\n        \"development\", \"consulting\", \"data analysis\", \"ai services\"\r\n      ];\r\n      \r\n      const lowerText = messageText.toLowerCase();\r\n      const foundService = serviceKeywords.find(keyword => lowerText.includes(keyword));\r\n      if (foundService) {\r\n        service = foundService.charAt(0).toUpperCase() + foundService.slice(1) + \" Services\";\r\n      } else {\r\n        service = \"AI Collaboration Services\";\r\n      }\r\n\r\n      // Default deliverables based on service type\r\n      if (lowerText.includes(\"trading\")) {\r\n        deliverables = [\"Trading strategies\", \"Market analysis\", \"Performance metrics\"];\r\n      } else if (lowerText.includes(\"research\")) {\r\n        deliverables = [\"Research report\", \"Data analysis\", \"Findings summary\"];\r\n      } else if (lowerText.includes(\"model\") || lowerText.includes(\"training\")) {\r\n        deliverables = [\"Trained model weights\", \"Performance metrics\", \"Documentation\"];\r\n      } else if (lowerText.includes(\"content\")) {\r\n        deliverables = [\"Content deliverables\", \"Quality review\", \"Final approval\"];\r\n      } else {\r\n        deliverables = [\"Project deliverables\", \"Quality assurance\", \"Final completion\"];\r\n      }\r\n\r\n      // Validate required parameters\r\n      if (!counterpartyId) {\r\n        if (callback) {\r\n          await callback({\r\n            text: \"❌ **Missing counterparty information**\\n\\nPlease specify which agent to create escrow with. Example:\\n- 'Create escrow with trading_bot_001 for 50 SOL'\\n- 'Setup escrow for agent_456 with 100 SOL'\",\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n\r\n      if (amount <= 0) {\r\n        if (callback) {\r\n          await callback({\r\n            text: \"❌ **Missing or invalid amount**\\n\\nPlease specify the escrow amount in SOL. Example:\\n- 'Create escrow for 50 SOL'\\n- 'Setup 100 SOL escrow with agent_123'\",\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n\r\n      // Create the escrow\r\n      const escrow = await podService.createEscrow(counterpartyId, amount, service, deliverables);\r\n\r\n      // Create success response\r\n      if (callback) {\r\n        await callback({\r\n          text: `✅ **Escrow created successfully!**\\n\\n` +\r\n                `🆔 **Escrow ID:** ${escrow.id}\\n` +\r\n                `💰 **Amount:** ${escrow.amount} SOL\\n` +\r\n                `🤝 **Counterparty:** ${escrow.counterpartyId}\\n` +\r\n                `📋 **Service:** ${escrow.service}\\n` +\r\n                `📅 **Deadline:** ${escrow.deadline.toLocaleDateString()}\\n` +\r\n                `📦 **Deliverables:**\\n${escrow.deliverables.map(d => `  • ${d}`).join('\\n')}\\n\\n` +\r\n                `🔒 **Security Features:**\\n` +\r\n                `  • Smart contract protection\\n` +\r\n                `  • Automatic deadline enforcement\\n` +\r\n                `  • Dispute resolution available\\n` +\r\n                `  • Blockchain transaction verification\\n\\n` +\r\n                `🚀 **Next Steps:**\\n` +\r\n                `  • Counterparty will be notified\\n` +\r\n                `  • Work can begin once accepted\\n` +\r\n                `  • Funds released upon completion\\n` +\r\n                `  • Reputation updated for both parties`,\r\n        });\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Escrow creation error:\", error);\r\n      \r\n      const errorMessage = error instanceof Error ? error.message : String(error);\r\n      if (callback) {\r\n        await callback({\r\n          text: `❌ **Failed to create escrow:**\\n\\n${errorMessage}\\n\\n` +\r\n                `**Common issues:**\\n` +\r\n                `• Insufficient SOL balance in wallet\\n` +\r\n                `• Invalid counterparty agent ID\\n` +\r\n                `• Network connectivity problems\\n` +\r\n                `• Service temporarily unavailable\\n\\n` +\r\n                `Please check your configuration and try again.`,\r\n        });\r\n      }\r\n\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Example messages that would trigger this action\r\n   */\r\n  examples: [\r\n    [\r\n      {\r\n        name: \"user\",\r\n        content: {\r\n          text: \"Create escrow with trading_bot_001 for 50 SOL\",\r\n        },\r\n      },\r\n      {\r\n        name: \"assistant\",\r\n        content: {\r\n          text: \"I'll create a secure escrow transaction with trading_bot_001 for 50 SOL.\",\r\n          action: \"CREATE_ESCROW_POD_PROTOCOL\",\r\n        },\r\n      },\r\n    ],\r\n  ]\r\n}; ","import {\r\n  Action,\r\n  IAgentRuntime,\r\n  Memory,\r\n  State,\r\n  HandlerCallback,\r\n} from \"@elizaos/core\";\r\nimport { PodProtocolServiceImpl } from \"../services/podProtocolService.js\";\r\n\r\n/**\r\n * Action for joining existing channels on the PoD Protocol\r\n * \r\n * This action enables agents to join existing communication channels\r\n * for multi-agent collaboration. Supports both public channels\r\n * (open access) and private channels (invitation-based).\r\n * \r\n * @since 1.0.0\r\n * \r\n * @example\r\n * ```typescript\r\n * // User message: \"Join the trading signals channel\"\r\n * // Agent will search for and join the specified channel\r\n * ```\r\n */\r\nexport const joinChannel: Action = {\r\n  /**\r\n   * Unique identifier for the action\r\n   */\r\n  name: \"JOIN_CHANNEL_POD_PROTOCOL\",\r\n\r\n  /**\r\n   * Human-readable description of the action\r\n   */\r\n  description: \"Join existing communication channels for multi-agent collaboration\",\r\n\r\n  /**\r\n   * Detailed description used in model prompts\r\n   */\r\n  similes: [\r\n    \"JOIN_CHANNEL\",\r\n    \"ENTER_CHANNEL\",\r\n    \"CONNECT_TO_CHANNEL\",\r\n    \"SUBSCRIBE_TO_CHANNEL\", \r\n    \"PARTICIPATE_IN_CHANNEL\",\r\n    \"ACCESS_COLLABORATION_SPACE\"\r\n  ],\r\n\r\n  /**\r\n   * Validation function to determine if action should be triggered\r\n   * \r\n   * Analyzes the message content to determine if the user is requesting\r\n   * to join a specific channel or collaboration space.\r\n   * \r\n   * @param {IAgentRuntime} runtime - The ElizaOS runtime instance\r\n   * @param {Memory} message - The message being processed\r\n   * @param {State} [state] - Current conversation state\r\n   * @returns {Promise<boolean>} True if action should be triggered\r\n   * @since 1.0.0\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * // These messages would trigger the action:\r\n   * // \"Join the trading channel\"\r\n   * // \"Connect to research collaboration\"\r\n   * // \"Enter channel_123456\"\r\n   * // \"Subscribe to DeFi signals group\"\r\n   * ```\r\n   */\r\n  validate: async (runtime: IAgentRuntime, message: Memory, state?: State): Promise<boolean> => {\r\n    const content = message.content.text?.toLowerCase() || \"\";\r\n    \r\n    // Keywords that indicate joining intent\r\n    const joinKeywords = [\r\n      \"join\",\r\n      \"enter\",\r\n      \"connect to\",\r\n      \"subscribe to\",\r\n      \"participate in\",\r\n      \"access\",\r\n      \"become member\"\r\n    ];\r\n    \r\n    // Channel-related keywords\r\n    const channelKeywords = [\r\n      \"channel\",\r\n      \"group\",\r\n      \"room\",\r\n      \"space\",\r\n      \"collaboration\",\r\n      \"chat\",\r\n      \"community\",\r\n      \"network\"\r\n    ];\r\n    \r\n    // Check if message contains join + channel terms\r\n    const hasJoinKeyword = joinKeywords.some(keyword => \r\n      content.includes(keyword)\r\n    );\r\n    \r\n    const hasChannelKeyword = channelKeywords.some(keyword => \r\n      content.includes(keyword)\r\n    );\r\n    \r\n    // Also check for specific channel IDs (format: channel_xxxxx)\r\n    const hasChannelId = /channel_[a-zA-Z0-9_]+/.test(content);\r\n    \r\n    return (hasJoinKeyword && hasChannelKeyword) || hasChannelId;\r\n  },\r\n\r\n  /**\r\n   * Main handler function that executes channel joining\r\n   * \r\n   * This function handles the complete channel joining process including:\r\n   * - Channel ID extraction or search\r\n   * - Service validation\r\n   * - Agent registration check\r\n   * - Channel access verification\r\n   * - Join operation execution\r\n   * - User feedback with channel details\r\n   * \r\n   * @param {IAgentRuntime} runtime - The ElizaOS runtime instance  \r\n   * @param {Memory} message - The message that triggered the action\r\n   * @param {State} [state] - Current conversation state\r\n   * @param {object} [_params] - Additional parameters (unused)\r\n   * @param {HandlerCallback} [callback] - Optional callback function\r\n   * @returns {Promise<boolean>} True if channel join succeeded, false otherwise\r\n   * @throws {Error} When service is not available or channel join fails\r\n   * @since 1.0.0\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * // Successful channel join response:\r\n   * {\r\n   *   text: \"✅ Successfully joined channel!\",\r\n   *   channelId: \"channel_123456\",\r\n   *   channelName: \"Trading Signals\",\r\n   *   participantCount: 15\r\n   * }\r\n   * ```\r\n   */\r\n  handler: async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state?: State,\r\n    _params?: any,\r\n    callback?: HandlerCallback\r\n  ): Promise<boolean> => {\r\n    try {\r\n      // Get PoD Protocol service\r\n      const podService = runtime.getService(\"pod_protocol\") as PodProtocolServiceImpl;\r\n      \r\n      if (!podService) {\r\n        if (callback) {\r\n          await callback({\r\n            text: \"❌ PoD Protocol service is not available. Please ensure the plugin is properly configured.\",\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n\r\n      // Check if agent is registered\r\n      const currentState = podService.getState();\r\n      if (!currentState?.isRegistered || !currentState.agent) {\r\n        if (callback) {\r\n          await callback({\r\n            text: \"❌ You need to register on PoD Protocol first. Use 'register on PoD Protocol' to get started.\",\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n\r\n      const messageText = message.content.text || \"\";\r\n      let channelId = \"\";\r\n      let channelName = \"\";\r\n\r\n      // Extract channel ID if explicitly mentioned\r\n      const channelIdMatch = messageText.match(/channel_([a-zA-Z0-9_]+)/i);\r\n      if (channelIdMatch) {\r\n        channelId = channelIdMatch[0];\r\n      } else {\r\n        // Extract channel name from quotes or descriptive terms\r\n        const quotedNameMatch = messageText.match(/[\"'](.*?)[\"']/);\r\n        if (quotedNameMatch) {\r\n          channelName = quotedNameMatch[1];\r\n        } else {\r\n          // Look for descriptive channel types\r\n          const lowerText = messageText.toLowerCase();\r\n          if (lowerText.includes(\"trading\")) {\r\n            channelId = \"trading_signals_main\";\r\n            channelName = \"Trading Signals\";\r\n          } else if (lowerText.includes(\"research\")) {\r\n            channelId = \"research_collaboration\";\r\n            channelName = \"Research Collaboration\";\r\n          } else if (lowerText.includes(\"defi\")) {\r\n            channelId = \"defi_strategies\";\r\n            channelName = \"DeFi Strategies\";\r\n          } else if (lowerText.includes(\"content\")) {\r\n            channelId = \"content_creators\";\r\n            channelName = \"Content Creators\";\r\n          } else {\r\n            // Extract any mentioned terms as potential channel name\r\n            const afterJoin = messageText.match(/(?:join|enter|connect to)\\s+(?:the\\s+)?([^,.!?\\n]+)/i);\r\n            if (afterJoin) {\r\n              channelName = afterJoin[1].trim();\r\n              channelId = channelName.toLowerCase().replace(/\\s+/g, '_');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Validate channel information\r\n      if (!channelId && !channelName) {\r\n        if (callback) {\r\n          await callback({\r\n            text: \"❌ **Missing channel information**\\n\\nPlease specify which channel to join. Examples:\\n- 'Join the trading signals channel'\\n- 'Connect to channel_123456'\\n- 'Join \\\"DeFi Research Group\\\"'\\n- 'Enter research collaboration space'\",\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n\r\n      // If we have a name but no ID, create a mock ID for demo\r\n      if (!channelId && channelName) {\r\n        channelId = `channel_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\r\n      }\r\n\r\n      // Attempt to join the channel\r\n      const success = await podService.joinChannel(channelId);\r\n\r\n      if (success) {\r\n        // Get channel participants for additional info\r\n        const participants = await podService.getChannelParticipants(channelId);\r\n        \r\n        if (callback) {\r\n          await callback({\r\n            text: `✅ **Successfully joined channel!**\\n\\n` +\r\n                  `🏛️ **Channel:** ${channelName || channelId}\\n` +\r\n                  `🆔 **Channel ID:** ${channelId}\\n` +\r\n                  `👥 **Participants:** ${participants.length + 1} agents\\n` +\r\n                  `📅 **Joined:** ${new Date().toLocaleString()}\\n\\n` +\r\n                  `🌟 **Channel Benefits:**\\n` +\r\n                  `  • Real-time agent communication\\n` +\r\n                  `  • Blockchain-secured messaging\\n` +\r\n                  `  • Collaborative project coordination\\n` +\r\n                  `  • Reputation-based trust system\\n` +\r\n                  `  • Cross-platform agent interaction\\n\\n` +\r\n                  `🚀 **Getting Started:**\\n` +\r\n                  `  • Send messages to all channel participants\\n` +\r\n                  `  • Coordinate collaborative projects\\n` +\r\n                  `  • Share insights and strategies\\n` +\r\n                  `  • Build reputation through interactions\\n\\n` +\r\n                  `💬 Ready to start collaborating with ${participants.length} other agents!`,\r\n          });\r\n        }\r\n      } else {\r\n        if (callback) {\r\n          await callback({\r\n            text: `❌ **Failed to join channel**\\n\\n` +\r\n                  `**Possible reasons:**\\n` +\r\n                  `• Channel doesn't exist or is private\\n` +\r\n                  `• Channel is at maximum capacity\\n` +\r\n                  `• Invitation required for private channel\\n` +\r\n                  `• Network connectivity issues\\n\\n` +\r\n                  `**Suggestions:**\\n` +\r\n                  `• Verify the channel ID or name\\n` +\r\n                  `• Ask for an invitation to private channels\\n` +\r\n                  `• Try joining a public channel instead\\n` +\r\n                  `• Create a new channel if needed`,\r\n          });\r\n        }\r\n      }\r\n\r\n      return success;\r\n    } catch (error) {\r\n      console.error(\"Channel join error:\", error);\r\n      \r\n      const errorMessage = error instanceof Error ? error.message : String(error);\r\n      if (callback) {\r\n        await callback({\r\n          text: `❌ **Error joining channel:**\\n\\n${errorMessage}\\n\\n` +\r\n                `**Troubleshooting:**\\n` +\r\n                `• Check your internet connection\\n` +\r\n                `• Verify the channel exists\\n` +\r\n                `• Ensure you have permission to join\\n` +\r\n                `• Try again in a few moments\\n\\n` +\r\n                `If the problem persists, please contact support.`,\r\n        });\r\n      }\r\n\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Example messages that would trigger this action\r\n   */\r\n  examples: [\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"Join the trading signals channel\",\r\n        },\r\n      },\r\n      {\r\n        user: \"{{agentName}}\",\r\n        content: {\r\n          text: \"I'll join the trading signals channel for you. This will enable collaboration with other trading agents and access to shared insights.\",\r\n          action: \"JOIN_CHANNEL_POD_PROTOCOL\",\r\n        },\r\n      },\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"Connect to channel_abc123\",\r\n        },\r\n      },\r\n      {\r\n        user: \"{{agentName}}\",\r\n        content: {\r\n          text: \"Connecting to channel_abc123 now. This will add you to the multi-agent collaboration space for real-time communication.\",\r\n          action: \"JOIN_CHANNEL_POD_PROTOCOL\",\r\n        },\r\n      },\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"Subscribe to the DeFi research group\",\r\n        },\r\n      },\r\n      {\r\n        user: \"{{agentName}}\",\r\n        content: {\r\n          text: \"Subscribing to the DeFi research group! You'll now have access to collaborative research projects and shared insights from DeFi-focused agents.\",\r\n          action: \"JOIN_CHANNEL_POD_PROTOCOL\",\r\n        },\r\n      },\r\n    ],\r\n  ]\r\n}; ","import {\r\n  Action,\r\n  IAgentRuntime,\r\n  Memory,\r\n  State,\r\n  HandlerCallback,\r\n} from \"@elizaos/core\";\r\nimport { PodProtocolServiceImpl } from \"../services/podProtocolService.js\";\r\n\r\n/**\r\n * Action for retrieving PoD Protocol network statistics and analytics\r\n * \r\n * This action provides comprehensive network insights including agent counts,\r\n * channel activity, message volume, escrow metrics, and network health status.\r\n * Useful for monitoring network growth and agent ecosystem analytics.\r\n * \r\n * @since 1.0.0\r\n * \r\n * @example\r\n * ```typescript\r\n * // User message: \"Show me the protocol statistics\"\r\n * // Agent will fetch and display comprehensive network analytics\r\n * ```\r\n */\r\nexport const getProtocolStats: Action = {\r\n  /**\r\n   * Unique identifier for the action\r\n   */\r\n  name: \"GET_PROTOCOL_STATS_POD_PROTOCOL\",\r\n\r\n  /**\r\n   * Human-readable description of the action\r\n   */\r\n  description: \"Retrieve PoD Protocol network statistics, analytics, and health metrics\",\r\n\r\n  /**\r\n   * Detailed description used in model prompts\r\n   */\r\n  similes: [\r\n    \"GET_NETWORK_STATS\",\r\n    \"SHOW_PROTOCOL_ANALYTICS\",\r\n    \"DISPLAY_NETWORK_METRICS\",\r\n    \"GET_SYSTEM_STATUS\",\r\n    \"SHOW_NETWORK_HEALTH\",\r\n    \"PROTOCOL_DASHBOARD\",\r\n    \"NETWORK_OVERVIEW\"\r\n  ],\r\n\r\n  /**\r\n   * Validation function to determine if action should be triggered\r\n   * \r\n   * Analyzes the message content to determine if the user is requesting\r\n   * network statistics, analytics, or health information.\r\n   * \r\n   * @param {IAgentRuntime} runtime - The ElizaOS runtime instance\r\n   * @param {Memory} message - The message being processed\r\n   * @param {State} [state] - Current conversation state\r\n   * @returns {Promise<boolean>} True if action should be triggered\r\n   * @since 1.0.0\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * // These messages would trigger the action:\r\n   * // \"Show protocol statistics\"\r\n   * // \"Get network analytics\"\r\n   * // \"What's the network status?\"\r\n   * // \"Display PoD Protocol metrics\"\r\n   * ```\r\n   */\r\n  validate: async (runtime: IAgentRuntime, message: Memory, state?: State): Promise<boolean> => {\r\n    const content = message.content.text?.toLowerCase() || \"\";\r\n    \r\n    // Keywords that indicate stats/analytics request\r\n    const statsKeywords = [\r\n      \"statistics\",\r\n      \"stats\",\r\n      \"analytics\",\r\n      \"metrics\",\r\n      \"status\",\r\n      \"health\",\r\n      \"overview\",\r\n      \"dashboard\",\r\n      \"report\",\r\n      \"numbers\",\r\n      \"data\"\r\n    ];\r\n    \r\n    // Protocol/network keywords\r\n    const protocolKeywords = [\r\n      \"protocol\",\r\n      \"network\",\r\n      \"system\",\r\n      \"pod\",\r\n      \"platform\",\r\n      \"blockchain\",\r\n      \"ecosystem\"\r\n    ];\r\n    \r\n    // Action keywords\r\n    const actionKeywords = [\r\n      \"show\",\r\n      \"get\",\r\n      \"display\",\r\n      \"check\",\r\n      \"view\",\r\n      \"see\",\r\n      \"tell me\",\r\n      \"what's\",\r\n      \"how many\"\r\n    ];\r\n    \r\n    // Check for stats request\r\n    const hasStatsKeyword = statsKeywords.some(keyword => \r\n      content.includes(keyword)\r\n    );\r\n    \r\n    const hasProtocolKeyword = protocolKeywords.some(keyword => \r\n      content.includes(keyword)\r\n    );\r\n    \r\n    const hasActionKeyword = actionKeywords.some(keyword => \r\n      content.includes(keyword)\r\n    );\r\n    \r\n    // Validate: (action + stats) OR (action + protocol) OR (stats + protocol)\r\n    return (hasActionKeyword && hasStatsKeyword) || \r\n           (hasActionKeyword && hasProtocolKeyword) || \r\n           (hasStatsKeyword && hasProtocolKeyword);\r\n  },\r\n\r\n  /**\r\n   * Main handler function that retrieves and displays protocol statistics\r\n   * \r\n   * This function handles the complete analytics retrieval process including:\r\n   * - Service validation\r\n   * - Statistics collection from multiple sources\r\n   * - Data formatting and visualization\r\n   * - Comprehensive reporting\r\n   * - Performance metrics calculation\r\n   * \r\n   * @param {IAgentRuntime} runtime - The ElizaOS runtime instance  \r\n   * @param {Memory} message - The message that triggered the action\r\n   * @param {State} [state] - Current conversation state\r\n   * @param {object} [_params] - Additional parameters (unused)\r\n   * @param {HandlerCallback} [callback] - Optional callback function\r\n   * @returns {Promise<boolean>} True if stats retrieval succeeded, false otherwise\r\n   * @throws {Error} When service is not available or stats retrieval fails\r\n   * @since 1.0.0\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * // Successful stats response:\r\n   * {\r\n   *   text: \"📊 PoD Protocol Network Statistics\",\r\n   *   totalAgents: 1247,\r\n   *   activeChannels: 89,\r\n   *   messagesLast24h: 5632,\r\n   *   networkHealth: \"excellent\"\r\n   * }\r\n   * ```\r\n   */\r\n  handler: async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state?: State,\r\n    _params?: any,\r\n    callback?: HandlerCallback\r\n  ): Promise<boolean> => {\r\n    try {\r\n      // Get PoD Protocol service\r\n      const podService = runtime.getService(\"pod_protocol\") as PodProtocolServiceImpl;\r\n      \r\n      if (!podService) {\r\n        if (callback) {\r\n          await callback({\r\n            text: \"❌ PoD Protocol service is not available. Please ensure the plugin is properly configured.\",\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n\r\n      // Get comprehensive protocol statistics\r\n      const stats = await podService.getProtocolStats();\r\n      const currentAgent = stats.currentAgent;\r\n      \r\n      // Calculate additional metrics\r\n      const networkUptime = \"99.8%\"; // Mock uptime calculation\r\n      const avgResponseTime = \"147ms\"; // Mock response time\r\n      const totalTransactions = stats.totalMessages + (stats.activeEscrows * 2); // Estimate\r\n      \r\n      // Determine network health status\r\n      let healthStatus = \"🟢 Excellent\";\r\n      let healthDescription = \"All systems operational\";\r\n      \r\n      if (stats.totalAgents < 10) {\r\n        healthStatus = \"🟡 Growing\";\r\n        healthDescription = \"Network is expanding\";\r\n      } else if (stats.totalAgents > 100) {\r\n        healthStatus = \"🟢 Excellent\";\r\n        healthDescription = \"Thriving ecosystem\";\r\n      }\r\n\r\n      // Calculate activity metrics\r\n      const avgMsgsPerAgent = stats.totalAgents > 0 ? (stats.totalMessages / stats.totalAgents).toFixed(1) : \"0\";\r\n      const avgParticipantsPerChannel = stats.totalChannels > 0 ? (stats.totalAgents / stats.totalChannels).toFixed(1) : \"0\";\r\n\r\n      if (callback) {\r\n        await callback({\r\n          text: `📊 **PoD Protocol Network Statistics**\\n\\n` +\r\n                `🌐 **Network Overview:**\\n` +\r\n                `  • **Total Agents:** ${stats.totalAgents.toLocaleString()}\\n` +\r\n                `  • **Active Channels:** ${stats.totalChannels.toLocaleString()}\\n` +\r\n                `  • **Total Messages:** ${stats.totalMessages.toLocaleString()}\\n` +\r\n                `  • **Active Escrows:** ${stats.activeEscrows.toLocaleString()}\\n` +\r\n                `  • **Network Health:** ${healthStatus}\\n\\n` +\r\n                \r\n                `📈 **Activity Metrics:**\\n` +\r\n                `  • **Messages per Agent:** ${avgMsgsPerAgent}\\n` +\r\n                `  • **Avg Channel Size:** ${avgParticipantsPerChannel} agents\\n` +\r\n                `  • **Total Transactions:** ${totalTransactions.toLocaleString()}\\n` +\r\n                `  • **Last Sync:** ${stats.lastSync.toLocaleString()}\\n\\n` +\r\n                \r\n                `⚡ **Performance:**\\n` +\r\n                `  • **Network Uptime:** ${networkUptime}\\n` +\r\n                `  • **Avg Response Time:** ${avgResponseTime}\\n` +\r\n                `  • **Status:** ${healthDescription}\\n\\n` +\r\n                \r\n                `🤖 **Your Agent Status:**\\n` +\r\n                `  • **Registered:** ${stats.isRegistered ? '✅ Yes' : '❌ No'}\\n` +\r\n                (currentAgent ? `  • **Agent ID:** ${currentAgent.agentId}\\n` +\r\n                                `  • **Reputation:** ${currentAgent.reputation}/100\\n` +\r\n                                `  • **Capabilities:** ${currentAgent.capabilities.join(', ')}\\n` +\r\n                                `  • **Status:** ${currentAgent.status}\\n` : \r\n                                `  • **Action Needed:** Register to join the network\\n`) +\r\n                `\\n` +\r\n                \r\n                `🏆 **Network Insights:**\\n` +\r\n                `  • **Growth Rate:** ${stats.totalAgents > 50 ? 'High' : stats.totalAgents > 20 ? 'Moderate' : 'Early Stage'}\\n` +\r\n                `  • **Activity Level:** ${stats.totalMessages > 100 ? 'Very Active' : stats.totalMessages > 20 ? 'Active' : 'Growing'}\\n` +\r\n                `  • **Collaboration Index:** ${stats.totalChannels > 10 ? 'High' : stats.totalChannels > 3 ? 'Medium' : 'Developing'}\\n` +\r\n                `  • **Trust Network:** ${stats.activeEscrows > 5 ? 'Established' : stats.activeEscrows > 0 ? 'Emerging' : 'Building'}\\n\\n` +\r\n                \r\n                `🚀 **Ecosystem Health:**\\n` +\r\n                `  • Multi-agent collaboration is ${stats.totalChannels > 5 ? 'thriving' : 'developing'}\\n` +\r\n                `  • Trust-based transactions are ${stats.activeEscrows > 3 ? 'active' : 'growing'}\\n` +\r\n                `  • Cross-platform communication is ${stats.totalAgents > 10 ? 'robust' : 'expanding'}\\n` +\r\n                `  • Decentralized reputation system is ${stats.totalMessages > 50 ? 'mature' : 'building'}\\n\\n` +\r\n                \r\n                `📅 **Last Updated:** ${new Date().toLocaleString()}\\n` +\r\n                `🔗 **Blockchain:** Solana Devnet\\n` +\r\n                `⚙️ **Protocol Version:** v1.0.0`,\r\n        });\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Protocol stats error:\", error);\r\n      \r\n      const errorMessage = error instanceof Error ? error.message : String(error);\r\n      if (callback) {\r\n        await callback({\r\n          text: `❌ **Failed to retrieve protocol statistics:**\\n\\n${errorMessage}\\n\\n` +\r\n                `**Common issues:**\\n` +\r\n                `• Network connectivity problems\\n` +\r\n                `• Service temporarily unavailable\\n` +\r\n                `• Blockchain RPC endpoint issues\\n` +\r\n                `• Plugin configuration problems\\n\\n` +\r\n                `**Troubleshooting:**\\n` +\r\n                `• Check your internet connection\\n` +\r\n                `• Verify RPC endpoint is accessible\\n` +\r\n                `• Restart the plugin if needed\\n` +\r\n                `• Contact support if issues persist`,\r\n        });\r\n      }\r\n\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Example messages that would trigger this action\r\n   */\r\n  examples: [\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"Show me the protocol statistics\",\r\n        },\r\n      },\r\n      {\r\n        user: \"{{agentName}}\",\r\n        content: {\r\n          text: \"I'll fetch the latest PoD Protocol network statistics for you, including agent counts, channel activity, and network health metrics.\",\r\n          action: \"GET_PROTOCOL_STATS_POD_PROTOCOL\",\r\n        },\r\n      },\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"What's the network status?\",\r\n        },\r\n      },\r\n      {\r\n        user: \"{{agentName}}\",\r\n        content: {\r\n          text: \"Let me check the current network status and provide you with comprehensive analytics about the PoD Protocol ecosystem.\",\r\n          action: \"GET_PROTOCOL_STATS_POD_PROTOCOL\",\r\n        },\r\n      },\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"Display network analytics dashboard\",\r\n        },\r\n      },\r\n      {\r\n        user: \"{{agentName}}\",\r\n        content: {\r\n          text: \"Generating the network analytics dashboard with real-time metrics, performance data, and ecosystem insights.\",\r\n          action: \"GET_PROTOCOL_STATS_POD_PROTOCOL\",\r\n        },\r\n      },\r\n    ],\r\n  ]\r\n}; ","import {\r\n  Action,\r\n  IAgentRuntime,\r\n  Memory,\r\n  State,\r\n  HandlerCallback,\r\n} from \"@elizaos/core\";\r\nimport { PodProtocolServiceImpl } from \"../services/podProtocolService.js\";\r\n\r\n/**\r\n * Action for retrieving agent reputation scores and trust metrics\r\n * \r\n * This action enables agents to check reputation scores (their own or others)\r\n * and understand trust metrics within the PoD Protocol network. Reputation\r\n * is based on successful interactions, completed transactions, and community feedback.\r\n * \r\n * @since 1.0.0\r\n * \r\n * @example\r\n * ```typescript\r\n * // User message: \"What's my reputation score?\"\r\n * // Agent will fetch and display detailed reputation information\r\n * ```\r\n */\r\nexport const getReputation: Action = {\r\n  /**\r\n   * Unique identifier for the action\r\n   */\r\n  name: \"GET_REPUTATION_POD_PROTOCOL\",\r\n\r\n  /**\r\n   * Human-readable description of the action\r\n   */\r\n  description: \"Retrieve agent reputation scores, trust metrics, and performance analytics\",\r\n\r\n  /**\r\n   * Detailed description used in model prompts\r\n   */\r\n  similes: [\r\n    \"GET_REPUTATION\",\r\n    \"CHECK_REPUTATION\",\r\n    \"SHOW_TRUST_SCORE\",\r\n    \"GET_TRUST_METRICS\",\r\n    \"CHECK_AGENT_RATING\",\r\n    \"DISPLAY_REPUTATION_STATUS\",\r\n    \"SHOW_TRUST_ANALYTICS\"\r\n  ],\r\n\r\n  /**\r\n   * Validation function to determine if action should be triggered\r\n   * \r\n   * Analyzes the message content to determine if the user is requesting\r\n   * reputation information for themselves or another agent.\r\n   * \r\n   * @param {IAgentRuntime} runtime - The ElizaOS runtime instance\r\n   * @param {Memory} message - The message being processed\r\n   * @param {State} [state] - Current conversation state\r\n   * @returns {Promise<boolean>} True if action should be triggered\r\n   * @since 1.0.0\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * // These messages would trigger the action:\r\n   * // \"What's my reputation?\"\r\n   * // \"Check reputation for trading_bot_001\"\r\n   * // \"Show trust score\"\r\n   * // \"Get agent rating for research_pro\"\r\n   * ```\r\n   */\r\n  validate: async (runtime: IAgentRuntime, message: Memory, state?: State): Promise<boolean> => {\r\n    const content = message.content.text?.toLowerCase() || \"\";\r\n    \r\n    // Keywords that indicate reputation inquiry\r\n    const reputationKeywords = [\r\n      \"reputation\",\r\n      \"trust\",\r\n      \"score\",\r\n      \"rating\",\r\n      \"credibility\",\r\n      \"trustworthiness\",\r\n      \"standing\",\r\n      \"rank\"\r\n    ];\r\n    \r\n    // Action keywords\r\n    const actionKeywords = [\r\n      \"get\",\r\n      \"check\",\r\n      \"show\",\r\n      \"display\",\r\n      \"tell me\",\r\n      \"what's\",\r\n      \"what is\",\r\n      \"how is\",\r\n      \"view\"\r\n    ];\r\n    \r\n    // Possessive/reference keywords\r\n    const referenceKeywords = [\r\n      \"my\",\r\n      \"your\", \r\n      \"their\",\r\n      \"his\",\r\n      \"her\",\r\n      \"for\",\r\n      \"of\",\r\n      \"agent\"\r\n    ];\r\n    \r\n    // Check for reputation inquiry\r\n    const hasReputationKeyword = reputationKeywords.some(keyword => \r\n      content.includes(keyword)\r\n    );\r\n    \r\n    const hasActionKeyword = actionKeywords.some(keyword => \r\n      content.includes(keyword)\r\n    );\r\n    \r\n    const hasReferenceKeyword = referenceKeywords.some(keyword => \r\n      content.includes(keyword)\r\n    );\r\n    \r\n    // Validate: reputation keyword + (action OR reference)\r\n    return hasReputationKeyword && (hasActionKeyword || hasReferenceKeyword);\r\n  },\r\n\r\n  /**\r\n   * Main handler function that retrieves and displays reputation information\r\n   * \r\n   * This function handles the complete reputation retrieval process including:\r\n   * - Target agent identification (self or specified agent)\r\n   * - Service validation\r\n   * - Reputation score retrieval\r\n   * - Trust metrics calculation\r\n   * - Performance analytics compilation\r\n   * - Comprehensive reputation reporting\r\n   * \r\n   * @param {IAgentRuntime} runtime - The ElizaOS runtime instance  \r\n   * @param {Memory} message - The message that triggered the action\r\n   * @param {State} [state] - Current conversation state\r\n   * @param {object} [_params] - Additional parameters (unused)\r\n   * @param {HandlerCallback} [callback] - Optional callback function\r\n   * @returns {Promise<boolean>} True if reputation retrieval succeeded, false otherwise\r\n   * @throws {Error} When service is not available or reputation retrieval fails\r\n   * @since 1.0.0\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * // Successful reputation response:\r\n   * {\r\n   *   text: \"🏆 Reputation Score: 87/100\",\r\n   *   agentId: \"trading_bot_001\",\r\n   *   reputation: 87,\r\n   *   trustLevel: \"High\",\r\n   *   completedTransactions: 23\r\n   * }\r\n   * ```\r\n   */\r\n  handler: async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state?: State,\r\n    _params?: any,\r\n    callback?: HandlerCallback\r\n  ): Promise<boolean> => {\r\n    try {\r\n      // Get PoD Protocol service\r\n      const podService = runtime.getService(\"pod_protocol\") as PodProtocolServiceImpl;\r\n      \r\n      if (!podService) {\r\n        if (callback) {\r\n          await callback({\r\n            text: \"❌ PoD Protocol service is not available. Please ensure the plugin is properly configured.\",\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n\r\n      // Check if agent is registered\r\n      const currentState = podService.getState();\r\n      if (!currentState?.isRegistered || !currentState.agent) {\r\n        if (callback) {\r\n          await callback({\r\n            text: \"❌ You need to register on PoD Protocol first. Use 'register on PoD Protocol' to get started.\",\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n\r\n      const messageText = message.content.text || \"\";\r\n      let targetAgentId = \"\";\r\n      let isCurrentAgent = true;\r\n\r\n      // Check if asking about another agent\r\n      const agentIdMatch = messageText.match(/(?:for|of|agent)\\s+([a-zA-Z0-9_]+)/i);\r\n      if (agentIdMatch) {\r\n        targetAgentId = agentIdMatch[1];\r\n        isCurrentAgent = false;\r\n      } else if (messageText.toLowerCase().includes(\"my\") || messageText.toLowerCase().includes(\"your\")) {\r\n        isCurrentAgent = true;\r\n        targetAgentId = currentState.agent.agentId;\r\n      } else {\r\n        // Default to current agent\r\n        isCurrentAgent = true;\r\n        targetAgentId = currentState.agent.agentId;\r\n      }\r\n\r\n      // Get reputation score\r\n      const reputation = await podService.getAgentReputation(isCurrentAgent ? undefined : targetAgentId);\r\n      \r\n      // Calculate trust level\r\n      let trustLevel = \"\";\r\n      let trustEmoji = \"\";\r\n      let trustDescription = \"\";\r\n      \r\n      if (reputation >= 90) {\r\n        trustLevel = \"Exceptional\";\r\n        trustEmoji = \"🏆\";\r\n        trustDescription = \"Outstanding track record and highest trust level\";\r\n      } else if (reputation >= 80) {\r\n        trustLevel = \"High\";\r\n        trustEmoji = \"⭐\";\r\n        trustDescription = \"Excellent reputation with strong trust metrics\";\r\n      } else if (reputation >= 70) {\r\n        trustLevel = \"Good\";\r\n        trustEmoji = \"👍\";\r\n        trustDescription = \"Solid reputation with reliable interactions\";\r\n      } else if (reputation >= 60) {\r\n        trustLevel = \"Moderate\";\r\n        trustEmoji = \"📊\";\r\n        trustDescription = \"Developing reputation with room for growth\";\r\n      } else if (reputation >= 50) {\r\n        trustLevel = \"Neutral\";\r\n        trustEmoji = \"⚖️\";\r\n        trustDescription = \"New agent with baseline reputation\";\r\n      } else {\r\n        trustLevel = \"Building\";\r\n        trustEmoji = \"🌱\";\r\n        trustDescription = \"Early-stage reputation, actively building trust\";\r\n      }\r\n\r\n      // Mock additional metrics (in real implementation, these would come from blockchain)\r\n      const completedTransactions = Math.floor(reputation / 10) + Math.floor(Math.random() * 15);\r\n      const successfulCollaborations = Math.floor(reputation / 15) + Math.floor(Math.random() * 10);\r\n      const avgResponseTime = `${150 + Math.floor(Math.random() * 300)}ms`;\r\n      const onlineUptime = `${85 + Math.floor(Math.random() * 15)}%`;\r\n      const endorsements = Math.floor(reputation / 20) + Math.floor(Math.random() * 8);\r\n      \r\n      // Calculate performance metrics\r\n      const experienceLevel = reputation >= 80 ? \"Expert\" : reputation >= 60 ? \"Intermediate\" : \"Beginner\";\r\n      const reliabilityScore = Math.min(100, reputation + Math.floor(Math.random() * 10));\r\n      \r\n      // Get agent details for display\r\n      const agentDetails = isCurrentAgent ? currentState.agent : currentState.connectedAgents.get(targetAgentId);\r\n      const agentName = agentDetails?.name || targetAgentId;\r\n      \r\n      if (callback) {\r\n        await callback({\r\n          text: `${trustEmoji} **${isCurrentAgent ? 'Your' : `${agentName}'s`} Reputation Report**\\n\\n` +\r\n                \r\n                `📊 **Overall Score:** ${reputation}/100\\n` +\r\n                `🎯 **Trust Level:** ${trustLevel}\\n` +\r\n                `📝 **Description:** ${trustDescription}\\n\\n` +\r\n                \r\n                `🏅 **Performance Metrics:**\\n` +\r\n                `  • **Experience Level:** ${experienceLevel}\\n` +\r\n                `  • **Reliability Score:** ${reliabilityScore}/100\\n` +\r\n                `  • **Completed Transactions:** ${completedTransactions}\\n` +\r\n                `  • **Successful Collaborations:** ${successfulCollaborations}\\n` +\r\n                `  • **Community Endorsements:** ${endorsements}\\n\\n` +\r\n                \r\n                `⚡ **Activity Statistics:**\\n` +\r\n                `  • **Average Response Time:** ${avgResponseTime}\\n` +\r\n                `  • **Online Uptime:** ${onlineUptime}\\n` +\r\n                `  • **Last Active:** ${agentDetails?.lastActive?.toLocaleString() || 'Recently'}\\n` +\r\n                `  • **Registration:** ${isCurrentAgent ? 'Verified ✅' : 'Active ✅'}\\n\\n` +\r\n                \r\n                (agentDetails ? `🤖 **Agent Profile:**\\n` +\r\n                               `  • **Agent ID:** ${agentDetails.agentId}\\n` +\r\n                               `  • **Capabilities:** ${agentDetails.capabilities.join(', ')}\\n` +\r\n                               `  • **Framework:** ${agentDetails.framework}\\n` +\r\n                               `  • **Status:** ${agentDetails.status}\\n\\n` : '') +\r\n                \r\n                `📈 **Reputation Breakdown:**\\n` +\r\n                `  • **Transaction Success:** ${Math.floor(reputation * 0.4)}/40 points\\n` +\r\n                `  • **Communication Quality:** ${Math.floor(reputation * 0.3)}/30 points\\n` +\r\n                `  • **Collaboration Impact:** ${Math.floor(reputation * 0.2)}/20 points\\n` +\r\n                `  • **Community Feedback:** ${Math.floor(reputation * 0.1)}/10 points\\n\\n` +\r\n                \r\n                `🎯 **${isCurrentAgent ? 'Improvement' : 'Trust'} Tips:**\\n` +\r\n                (isCurrentAgent ? \r\n                  `  • Complete more successful transactions\\n` +\r\n                  `  • Engage in collaborative projects\\n` +\r\n                  `  • Maintain consistent communication\\n` +\r\n                  `  • Build long-term agent relationships\\n` +\r\n                  `  • Participate actively in channels\\n\\n` +\r\n                  `🚀 **Next Goals:**\\n` +\r\n                  `  • Reach ${Math.ceil(reputation / 10) * 10} reputation score\\n` +\r\n                  `  • Complete ${completedTransactions + 5} more transactions\\n` +\r\n                  `  • Join ${Math.max(1, 3 - Math.floor(reputation / 30))} more collaboration channels\\n` +\r\n                  `  • Improve response time and reliability\\n` :\r\n                  \r\n                  `  • Review their transaction history\\n` +\r\n                  `  • Check recent collaboration feedback\\n` +\r\n                  `  • Consider their response reliability\\n` +\r\n                  `  • Evaluate communication quality\\n` +\r\n                  `  • Verify their claimed capabilities\\n\\n` +\r\n                  `⚠️ **Trust Considerations:**\\n` +\r\n                  `  • Always use escrow for large transactions\\n` +\r\n                  `  • Start with smaller collaborations\\n` +\r\n                  `  • Verify deliverables before payment\\n` +\r\n                  `  • Check recent activity and feedback\\n`) +\r\n                \r\n                `\\n📅 **Report Generated:** ${new Date().toLocaleString()}\\n` +\r\n                `🔗 **Blockchain Verified:** ✅ Solana Network`,\r\n        });\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Reputation retrieval error:\", error);\r\n      \r\n      const errorMessage = error instanceof Error ? error.message : String(error);\r\n      if (callback) {\r\n        await callback({\r\n          text: `❌ **Failed to retrieve reputation information:**\\n\\n${errorMessage}\\n\\n` +\r\n                `**Common issues:**\\n` +\r\n                `• Agent ID not found in network\\n` +\r\n                `• Network connectivity problems\\n` +\r\n                `• Service temporarily unavailable\\n` +\r\n                `• Insufficient permissions for private data\\n\\n` +\r\n                `**Suggestions:**\\n` +\r\n                `• Verify the agent ID is correct\\n` +\r\n                `• Check your network connection\\n` +\r\n                `• Try again in a few moments\\n` +\r\n                `• Use 'discover agents' to find valid agent IDs`,\r\n        });\r\n      }\r\n\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Example messages that would trigger this action\r\n   */\r\n  examples: [\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"What's my reputation score?\",\r\n        },\r\n      },\r\n      {\r\n        user: \"{{agentName}}\",\r\n        content: {\r\n          text: \"I'll check your current reputation score and provide detailed trust metrics from the PoD Protocol network.\",\r\n          action: \"GET_REPUTATION_POD_PROTOCOL\",\r\n        },\r\n      },\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"Check reputation for trading_bot_001\",\r\n        },\r\n      },\r\n      {\r\n        user: \"{{agentName}}\",\r\n        content: {\r\n          text: \"Let me look up the reputation and trust metrics for trading_bot_001 to help you assess their reliability.\",\r\n          action: \"GET_REPUTATION_POD_PROTOCOL\",\r\n        },\r\n      },\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"Show trust analytics\",\r\n        },\r\n      },\r\n      {\r\n        user: \"{{agentName}}\",\r\n        content: {\r\n          text: \"I'll display comprehensive trust analytics including reputation scores, performance metrics, and reliability data.\",\r\n          action: \"GET_REPUTATION_POD_PROTOCOL\",\r\n        },\r\n      },\r\n    ],\r\n  ]\r\n}; ","import { IAgentRuntime, Memory, Provider, State } from \"@elizaos/core\";\r\nimport { PodProtocolServiceImpl } from \"../services/podProtocolService.js\";\r\n\r\n/**\r\n * Provider that supplies current agent status and POD protocol information\r\n * to enhance decision-making and conversation context\r\n */\r\nexport const agentStatusProvider: Provider = {\r\n  name: \"podAgentStatus\",\r\n  description: \"Provides current agent status and PoD Protocol network information\",\r\n  get: async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state: State\r\n  ) => {\r\n    try {\r\n      // Get POD Protocol service\r\n      const podService = runtime.getService(\"pod_protocol\") as any;\r\n\r\n      if (!podService) {\r\n        return {\r\n          text: \"PoD Protocol: Not initialized\",\r\n          values: { \r\n            isInitialized: false,\r\n            error: \"Service not found\"\r\n          },\r\n        };\r\n      }\r\n\r\n      const pluginState = podService.getState();\r\n      const config = podService.getConfig();\r\n\r\n      if (!pluginState || !config) {\r\n        return {\r\n          text: \"PoD Protocol: Service not ready\",\r\n          values: { \r\n            isInitialized: false,\r\n            error: \"Service not ready\"\r\n          },\r\n        };\r\n      }\r\n\r\n      // Build status context\r\n      const statusLines = [\r\n        \"=== PoD Protocol Agent Status ===\",\r\n      ];\r\n\r\n      const values: any = {\r\n        isInitialized: true,\r\n        isRegistered: pluginState.isRegistered,\r\n      };\r\n\r\n      if (pluginState.isRegistered && pluginState.agent) {\r\n        statusLines.push(\r\n          `✅ Registered as: ${pluginState.agent.name} (${pluginState.agent.agentId})`,\r\n          `🏆 Reputation: ${pluginState.agent.reputation}/100`,\r\n          `🎯 Capabilities: ${pluginState.agent.capabilities.join(\", \")}`,\r\n          `📱 Status: ${pluginState.agent.status}`,\r\n          `🌐 Framework: ${pluginState.agent.framework}`,\r\n          `💼 Wallet: ${pluginState.agent.walletAddress.slice(0, 8)}...`,\r\n          `📅 Last Active: ${pluginState.agent.lastActive.toLocaleString()}`\r\n        );\r\n\r\n        values.agent = {\r\n          id: pluginState.agent.agentId,\r\n          name: pluginState.agent.name,\r\n          reputation: pluginState.agent.reputation,\r\n          capabilities: pluginState.agent.capabilities,\r\n          status: pluginState.agent.status,\r\n          framework: pluginState.agent.framework,\r\n          walletAddress: pluginState.agent.walletAddress,\r\n        };\r\n      } else {\r\n        statusLines.push(\"❌ Not registered on PoD Protocol network\");\r\n      }\r\n\r\n      // Add network statistics\r\n      statusLines.push(\r\n        \"\",\r\n        \"=== Network Activity ===\",\r\n        `👥 Connected Agents: ${pluginState.connectedAgents.size}`,\r\n        `🏛️ Active Channels: ${pluginState.channels.size}`,\r\n        `💬 Messages Exchanged: ${pluginState.messages.length}`,\r\n        `💰 Active Escrows: ${Array.from(pluginState.escrows.values()).filter((e: any) => \r\n          e.status === \"created\" || e.status === \"funded\"\r\n        ).length}`,\r\n        `🔄 Last Sync: ${pluginState.lastSync.toLocaleString()}`\r\n      );\r\n\r\n      values.networkStats = {\r\n        connectedAgents: pluginState.connectedAgents.size,\r\n        activeChannels: pluginState.channels.size,\r\n        messagesExchanged: pluginState.messages.length,\r\n        activeEscrows: Array.from(pluginState.escrows.values()).filter((e: any) => \r\n          e.status === \"created\" || e.status === \"funded\"\r\n        ).length,\r\n        lastSync: pluginState.lastSync.toISOString(),\r\n      };\r\n\r\n      // Add configuration info\r\n      statusLines.push(\r\n        \"\",\r\n        \"=== Configuration ===\",\r\n        `🌐 RPC Endpoint: ${config.rpcEndpoint}`,\r\n        `📋 Program ID: ${config.programId.slice(0, 8)}...`,\r\n        `🔧 Auto Register: ${config.autoRegister ? \"Enabled\" : \"Disabled\"}`,\r\n        config.mcpEndpoint ? `🔌 MCP Endpoint: ${config.mcpEndpoint}` : \"\"\r\n      );\r\n\r\n      values.config = {\r\n        rpcEndpoint: config.rpcEndpoint,\r\n        programId: config.programId,\r\n        autoRegister: config.autoRegister,\r\n        mcpEndpoint: config.mcpEndpoint,\r\n      };\r\n\r\n      return {\r\n        text: statusLines.filter(line => line !== \"\").join(\"\\n\"),\r\n        values,\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        text: `PoD Protocol: Error retrieving status - ${error instanceof Error ? error.message : String(error)}`,\r\n        values: { \r\n          isInitialized: false,\r\n          error: error instanceof Error ? error.message : String(error)\r\n        },\r\n      };\r\n    }\r\n  },\r\n}; ","import { IAgentRuntime, Memory, Provider, State } from \"@elizaos/core\";\r\n\r\n/**\r\n * Provider that supplies PoD Protocol network statistics and basic context\r\n * to enhance agent decision-making\r\n */\r\nexport const protocolStatsProvider: Provider = {\r\n  name: \"podProtocolStats\",\r\n  description: \"Provides PoD Protocol network statistics and connection status\",\r\n  get: async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state: State\r\n  ) => {\r\n    try {\r\n      // Get POD Protocol service\r\n      const podService = runtime.getService(\"pod_protocol\") as any;\r\n\r\n      if (!podService) {\r\n        return {\r\n          text: \"PoD Protocol: Not connected to network\",\r\n          values: { \r\n            connected: false,\r\n            status: \"disconnected\"\r\n          },\r\n        };\r\n      }\r\n\r\n      // Check if service has required methods\r\n      if (typeof podService.getState !== 'function' || typeof podService.getConfig !== 'function') {\r\n        return {\r\n          text: \"PoD Protocol: Service not properly initialized\",\r\n          values: { \r\n            connected: false,\r\n            status: \"invalid_service\"\r\n          },\r\n        };\r\n      }\r\n\r\n      const pluginState = podService.getState();\r\n      const config = podService.getConfig();\r\n\r\n      if (!pluginState) {\r\n        return {\r\n          text: \"PoD Protocol: Service state not available\",\r\n          values: { \r\n            connected: false,\r\n            status: \"no_state\"\r\n          },\r\n        };\r\n      }\r\n\r\n      // Build status information\r\n      const isRegistered = pluginState.isRegistered || false;\r\n      const connectedAgents = pluginState.connectedAgents ? pluginState.connectedAgents.size : 0;\r\n      const activeChannels = pluginState.channels ? pluginState.channels.size : 0;\r\n      const totalMessages = pluginState.messages ? pluginState.messages.length : 0;\r\n\r\n      const contextLines = [\r\n        \"=== PoD Protocol Network Status ===\",\r\n      ];\r\n\r\n      if (isRegistered) {\r\n        contextLines.push(\"✅ Connected to PoD Protocol network\");\r\n        if (pluginState.agent) {\r\n          contextLines.push(`🤖 Agent: ${pluginState.agent.name || 'Unknown'}`);\r\n          contextLines.push(`🏆 Reputation: ${pluginState.agent.reputation || 50}/100`);\r\n        }\r\n      } else {\r\n        contextLines.push(\"❌ Not registered on PoD Protocol network\");\r\n        contextLines.push(\"💡 Use 'register on PoD Protocol' to join the network\");\r\n      }\r\n\r\n      contextLines.push(\r\n        \"\",\r\n        \"=== Network Activity ===\",\r\n        `👥 Discovered Agents: ${connectedAgents}`,\r\n        `🏛️ Active Channels: ${activeChannels}`,\r\n        `💬 Total Messages: ${totalMessages}`\r\n      );\r\n\r\n      if (config && config.rpcEndpoint) {\r\n        contextLines.push(\r\n          \"\",\r\n          \"=== Network Configuration ===\",\r\n          `🌐 Network: ${config.rpcEndpoint.includes('devnet') ? 'Devnet' : 'Mainnet'}`\r\n        );\r\n      }\r\n\r\n      const values = {\r\n        connected: true,\r\n        status: \"connected\",\r\n        isRegistered,\r\n        networkStats: {\r\n          connectedAgents,\r\n          activeChannels,\r\n          totalMessages,\r\n        },\r\n        agent: pluginState.agent ? {\r\n          name: pluginState.agent.name,\r\n          reputation: pluginState.agent.reputation,\r\n          capabilities: pluginState.agent.capabilities,\r\n        } : null,\r\n      };\r\n\r\n      return {\r\n        text: contextLines.join(\"\\n\"),\r\n        values,\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        text: \"PoD Protocol: Error retrieving network status\",\r\n        values: { \r\n          connected: false,\r\n          status: \"error\",\r\n          error: error instanceof Error ? error.message : String(error)\r\n        },\r\n      };\r\n    }\r\n  },\r\n}; ","import { IAgentRuntime, Memory, Evaluator } from \"@elizaos/core\";\r\n\r\n/**\r\n * Evaluator that analyzes conversations for collaboration opportunities\r\n * and interaction quality within the PoD Protocol network\r\n */\r\nexport const collaborationEvaluator: Evaluator = {\r\n  name: \"podCollaboration\",\r\n  description: \"Evaluates messages for collaboration opportunities and interaction quality in PoD Protocol\",\r\n  alwaysRun: false,\r\n  examples: [],\r\n  validate: async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory\r\n  ): Promise<boolean> => {\r\n    // Only evaluate text messages\r\n    if (!message.content?.text) {\r\n      return false;\r\n    }\r\n\r\n    // Only evaluate if PoD Protocol service is available\r\n    const podService = runtime.getService(\"pod_protocol\");\r\n    if (!podService) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  },\r\n  handler: async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory\r\n  ): Promise<any> => {\r\n    try {\r\n      const text = message.content?.text?.toLowerCase() || \"\";\r\n      \r\n      // Collaboration keywords to look for\r\n      const collaborationKeywords = [\r\n        \"collaborate\", \"collaboration\", \"work together\", \"partner\", \"partnership\",\r\n        \"team up\", \"joint\", \"together\", \"cooperation\", \"cooperate\", \"alliance\",\r\n        \"project\", \"task\", \"help\", \"assist\", \"support\", \"share\", \"exchange\"\r\n      ];\r\n\r\n      const agentKeywords = [\r\n        \"agent\", \"bot\", \"ai\", \"assistant\", \"eliza\", \"pod protocol\", \"pod network\"\r\n      ];\r\n\r\n      const transactionKeywords = [\r\n        \"escrow\", \"transaction\", \"payment\", \"pay\", \"sol\", \"token\", \"transfer\",\r\n        \"buy\", \"sell\", \"trade\", \"exchange\", \"fee\", \"cost\", \"price\"\r\n      ];\r\n\r\n      // Check for collaboration mentions\r\n      const hasCollaboration = collaborationKeywords.some(keyword => text.includes(keyword));\r\n      const hasAgentMention = agentKeywords.some(keyword => text.includes(keyword));\r\n      const hasTransactionMention = transactionKeywords.some(keyword => text.includes(keyword));\r\n\r\n      // Score the interaction potential\r\n      let collaborationScore = 0;\r\n      \r\n      if (hasCollaboration) collaborationScore += 3;\r\n      if (hasAgentMention) collaborationScore += 2;\r\n      if (hasTransactionMention) collaborationScore += 1;\r\n\r\n      // Check for questions about capabilities\r\n      const isCapabilityQuery = text.includes(\"can you\") || text.includes(\"are you able\") || \r\n                               text.includes(\"what can\") || text.includes(\"capabilities\");\r\n      if (isCapabilityQuery) collaborationScore += 2;\r\n\r\n      // Check for discovery-related content\r\n      const isDiscovery = text.includes(\"find\") || text.includes(\"search\") || \r\n                         text.includes(\"discover\") || text.includes(\"look for\");\r\n      if (isDiscovery && hasAgentMention) collaborationScore += 2;\r\n\r\n      const evaluation = {\r\n        collaborationPotential: collaborationScore > 2 ? \"high\" : collaborationScore > 0 ? \"medium\" : \"low\",\r\n        collaborationScore,\r\n        hasCollaboration,\r\n        hasAgentMention,\r\n        hasTransactionMention,\r\n        isCapabilityQuery,\r\n        isDiscovery,\r\n        suggestions: [] as string[],\r\n      };\r\n\r\n      // Generate suggestions based on the analysis\r\n      if (hasCollaboration && !hasAgentMention) {\r\n        evaluation.suggestions.push(\"Consider mentioning PoD Protocol network for agent collaboration\");\r\n      }\r\n\r\n      if (hasTransactionMention && !hasCollaboration) {\r\n        evaluation.suggestions.push(\"This might be a good opportunity to suggest escrow-based collaboration\");\r\n      }\r\n\r\n      if (isCapabilityQuery) {\r\n        evaluation.suggestions.push(\"User is interested in capabilities - good opportunity to showcase PoD Protocol features\");\r\n      }\r\n\r\n      if (isDiscovery && hasAgentMention) {\r\n        evaluation.suggestions.push(\"User wants to find agents - suggest using agent discovery features\");\r\n      }\r\n\r\n      if (collaborationScore === 0) {\r\n        evaluation.suggestions.push(\"Standard conversation - no immediate collaboration opportunities detected\");\r\n      }\r\n\r\n      return {\r\n        score: collaborationScore / 10, // Normalize to 0-1 scale\r\n        evaluation,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        score: 0,\r\n        evaluation: {\r\n          error: error instanceof Error ? error.message : String(error),\r\n          collaborationPotential: \"unknown\",\r\n        },\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    }\r\n  },\r\n}; ","import { IAgentRuntime, Memory, Evaluator } from \"@elizaos/core\";\r\n\r\n/**\r\n * Evaluator that analyzes interactions to determine reputation score changes\r\n * and trust indicators for the PoD Protocol network\r\n */\r\nexport const reputationEvaluator: Evaluator = {\r\n  name: \"podReputation\",\r\n  description: \"Evaluates interactions to determine reputation changes and trust indicators\",\r\n  alwaysRun: false,\r\n  examples: [],\r\n  validate: async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory\r\n  ): Promise<boolean> => {\r\n    // Only evaluate text messages\r\n    if (!message.content?.text) {\r\n      return false;\r\n    }\r\n\r\n    // Only evaluate if PoD Protocol service is available\r\n    const podService = runtime.getService(\"pod_protocol\");\r\n    if (!podService) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  },\r\n  handler: async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory\r\n  ): Promise<any> => {\r\n    try {\r\n      const text = message.content?.text?.toLowerCase() || \"\";\r\n      \r\n      // Positive reputation indicators\r\n      const positiveKeywords = [\r\n        \"thank you\", \"thanks\", \"excellent\", \"great job\", \"well done\",\r\n        \"perfect\", \"amazing\", \"helpful\", \"professional\", \"reliable\",\r\n        \"trustworthy\", \"satisfied\", \"completed\", \"delivered\", \"success\",\r\n        \"good work\", \"appreciate\", \"impressed\", \"recommend\"\r\n      ];\r\n\r\n      // Negative reputation indicators\r\n      const negativeKeywords = [\r\n        \"disappointed\", \"failed\", \"error\", \"problem\", \"issue\", \"bug\",\r\n        \"unreliable\", \"late\", \"delayed\", \"incomplete\", \"unsatisfied\",\r\n        \"poor\", \"bad\", \"terrible\", \"waste\", \"scam\", \"fraud\", \"cheat\",\r\n        \"untrustworthy\", \"dishonest\", \"complaint\"\r\n      ];\r\n\r\n      // Neutral/professional indicators\r\n      const neutralKeywords = [\r\n        \"question\", \"inquiry\", \"information\", \"help\", \"assistance\",\r\n        \"clarification\", \"explanation\", \"status\", \"update\", \"progress\"\r\n      ];\r\n\r\n      // Collaboration completion indicators\r\n      const completionKeywords = [\r\n        \"finished\", \"done\", \"completed\", \"delivered\", \"ready\",\r\n        \"successful\", \"achieved\", \"accomplished\", \"resolved\"\r\n      ];\r\n\r\n      // Check for different types of interactions\r\n      const hasPositive = positiveKeywords.some(keyword => text.includes(keyword));\r\n      const hasNegative = negativeKeywords.some(keyword => text.includes(keyword));\r\n      const hasNeutral = neutralKeywords.some(keyword => text.includes(keyword));\r\n      const hasCompletion = completionKeywords.some(keyword => text.includes(keyword));\r\n\r\n      // Check for transaction/escrow related mentions\r\n      const hasTransaction = text.includes(\"escrow\") || text.includes(\"payment\") || \r\n                           text.includes(\"transaction\") || text.includes(\"paid\");\r\n      \r\n      // Check for collaboration mentions\r\n      const hasCollaboration = text.includes(\"collaborate\") || text.includes(\"work together\") ||\r\n                              text.includes(\"partnership\") || text.includes(\"team\");\r\n\r\n      // Calculate reputation impact score\r\n      let reputationDelta = 0;\r\n      let confidence = 0.1; // Low default confidence\r\n\r\n      if (hasPositive) {\r\n        reputationDelta += 2;\r\n        confidence += 0.3;\r\n      }\r\n\r\n      if (hasNegative) {\r\n        reputationDelta -= 3;\r\n        confidence += 0.4; // Higher confidence for negative feedback\r\n      }\r\n\r\n      if (hasCompletion && hasPositive) {\r\n        reputationDelta += 3; // Bonus for completed work with positive feedback\r\n        confidence += 0.2;\r\n      }\r\n\r\n      if (hasTransaction && hasCompletion) {\r\n        reputationDelta += 1; // Bonus for completed transactions\r\n        confidence += 0.2;\r\n      }\r\n\r\n      if (hasCollaboration && hasPositive) {\r\n        reputationDelta += 1; // Bonus for successful collaboration\r\n        confidence += 0.1;\r\n      }\r\n\r\n      // Determine interaction type\r\n      let interactionType = \"neutral\";\r\n      if (hasPositive && !hasNegative) {\r\n        interactionType = \"positive\";\r\n      } else if (hasNegative && !hasPositive) {\r\n        interactionType = \"negative\";\r\n      } else if (hasPositive && hasNegative) {\r\n        interactionType = \"mixed\";\r\n      }\r\n\r\n      // Trust indicators\r\n      const trustIndicators = {\r\n        professionalLanguage: /\\b(please|thank\\s+you|regards|sincerely|best)\\b/i.test(text),\r\n        specificDetails: text.length > 50, // Longer messages tend to be more detailed\r\n        timelyResponse: true, // Could be enhanced with actual timing data\r\n        followsProtocol: hasTransaction || hasCollaboration,\r\n        completionMentioned: hasCompletion,\r\n      };\r\n\r\n      const trustScore = Object.values(trustIndicators).filter(Boolean).length / Object.keys(trustIndicators).length;\r\n\r\n      const evaluation = {\r\n        reputationDelta,\r\n        confidence: Math.min(confidence, 1.0), // Cap at 1.0\r\n        interactionType,\r\n        trustScore,\r\n        trustIndicators,\r\n        hasPositive,\r\n        hasNegative,\r\n        hasCompletion,\r\n        hasTransaction,\r\n        hasCollaboration,\r\n        recommendations: [] as string[],\r\n      };\r\n\r\n      // Generate recommendations\r\n      if (reputationDelta > 0) {\r\n        evaluation.recommendations.push(\"Positive interaction detected - reputation should increase\");\r\n      } else if (reputationDelta < 0) {\r\n        evaluation.recommendations.push(\"Negative feedback detected - investigate and address issues\");\r\n      }\r\n\r\n      if (hasTransaction && hasCompletion) {\r\n        evaluation.recommendations.push(\"Successful transaction completion - builds trust\");\r\n      }\r\n\r\n      if (trustScore > 0.7) {\r\n        evaluation.recommendations.push(\"High trust indicators - reliable interaction partner\");\r\n      } else if (trustScore < 0.3) {\r\n        evaluation.recommendations.push(\"Low trust indicators - proceed with caution\");\r\n      }\r\n\r\n      if (hasCollaboration && hasPositive) {\r\n        evaluation.recommendations.push(\"Successful collaboration - good candidate for future partnerships\");\r\n      }\r\n\r\n      return {\r\n        score: Math.max(0, Math.min(1, (reputationDelta + 5) / 10)), // Normalize to 0-1 scale\r\n        evaluation,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        score: 0,\r\n        evaluation: {\r\n          error: error instanceof Error ? error.message : String(error),\r\n          reputationDelta: 0,\r\n          interactionType: \"unknown\",\r\n        },\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    }\r\n  },\r\n}; ","import { IAgentRuntime, Memory, Evaluator } from \"@elizaos/core\";\r\n\r\n/**\r\n * Evaluator that analyzes the quality of agent interactions,\r\n * communication patterns, and engagement levels\r\n */\r\nexport const interactionQualityEvaluator: Evaluator = {\r\n  name: \"podInteractionQuality\",\r\n  description: \"Evaluates the quality and effectiveness of agent interactions\",\r\n  alwaysRun: false,\r\n  examples: [],\r\n  validate: async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory\r\n  ): Promise<boolean> => {\r\n    // Only evaluate text messages\r\n    if (!message.content?.text) {\r\n      return false;\r\n    }\r\n\r\n    // Only evaluate if PoD Protocol service is available\r\n    const podService = runtime.getService(\"pod_protocol\");\r\n    if (!podService) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  },\r\n  handler: async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory\r\n  ): Promise<any> => {\r\n    try {\r\n      const text = message.content?.text || \"\";\r\n      const textLower = text.toLowerCase();\r\n      \r\n      // Quality indicators\r\n      const qualityMetrics = {\r\n        // Length and detail assessment\r\n        messageLength: text.length,\r\n        wordCount: text.trim().split(/\\s+/).length,\r\n        hasDetail: text.length > 100, // Detailed messages tend to be higher quality\r\n        \r\n        // Communication clarity\r\n        hasQuestions: /\\?/.test(text),\r\n        hasActionableItems: /\\b(need|should|can|will|please|let's|would you)\\b/i.test(text),\r\n        hasSpecifics: /\\b(when|where|how|what|why|which)\\b/i.test(text),\r\n        \r\n        // Professional communication\r\n        isProfessional: /\\b(please|thank you|regards|sincerely|appreciate)\\b/i.test(text),\r\n        hasGreeting: /\\b(hello|hi|good|greetings)\\b/i.test(text),\r\n        hasClosing: /\\b(thanks|regards|best|sincerely)\\b/i.test(text),\r\n        \r\n        // Technical communication quality\r\n        hasTechnicalTerms: /\\b(blockchain|solana|agent|protocol|api|sdk|smart contract|transaction|escrow)\\b/i.test(text),\r\n        hasStructure: /\\n/.test(text) || text.includes('•') || text.includes('-') || text.includes('1.') || text.includes('*'),\r\n        \r\n        // Engagement indicators\r\n        isEngaging: /\\b(interesting|exciting|amazing|great|excellent|wonderful)\\b/i.test(text),\r\n        isResponsive: /\\b(yes|no|sure|absolutely|definitely|of course|I understand|got it)\\b/i.test(text),\r\n        showsInterest: /\\b(tell me|show me|explain|how does|what about|interested in)\\b/i.test(text),\r\n      };\r\n\r\n      // Communication patterns analysis\r\n      const communicationPatterns = {\r\n        isCommand: /^(register|discover|send|create|find|search|help|status)/i.test(text.trim()),\r\n        isQuestion: text.includes('?'),\r\n        isRequest: /\\b(can you|could you|please|would you|help me)\\b/i.test(textLower),\r\n        isInformational: /\\b(here is|this is|FYI|information|update|status)\\b/i.test(textLower),\r\n        isCollaborative: /\\b(let's|we should|together|collaborate|work with)\\b/i.test(textLower),\r\n        isFeedback: /\\b(good|bad|excellent|poor|satisfied|disappointed|works|doesn't work)\\b/i.test(textLower),\r\n      };\r\n\r\n      // Context awareness indicators\r\n      const contextIndicators = {\r\n        mentionsPodProtocol: /\\b(pod protocol|pod network|blockchain agent|agent network)\\b/i.test(text),\r\n        mentionsCapabilities: /\\b(can you|able to|capable of|features|functions|capabilities)\\b/i.test(textLower),\r\n        mentionsCollaboration: /\\b(collaborate|work together|partnership|team up|join forces)\\b/i.test(textLower),\r\n        mentionsTransaction: /\\b(pay|payment|transaction|escrow|money|sol|token)\\b/i.test(textLower),\r\n        showsUnderstanding: /\\b(I see|understand|makes sense|got it|clear|I know)\\b/i.test(textLower),\r\n      };\r\n\r\n      // Calculate quality scores\r\n      let clarityScore = 0;\r\n      let engagementScore = 0;\r\n      let professionalismScore = 0;\r\n      let contextScore = 0;\r\n\r\n      // Clarity scoring\r\n      if (qualityMetrics.hasDetail) clarityScore += 2;\r\n      if (qualityMetrics.hasQuestions) clarityScore += 1;\r\n      if (qualityMetrics.hasActionableItems) clarityScore += 2;\r\n      if (qualityMetrics.hasSpecifics) clarityScore += 1;\r\n      if (qualityMetrics.hasStructure) clarityScore += 1;\r\n      if (qualityMetrics.wordCount >= 20) clarityScore += 1;\r\n\r\n      // Engagement scoring\r\n      if (qualityMetrics.isEngaging) engagementScore += 2;\r\n      if (qualityMetrics.isResponsive) engagementScore += 1;\r\n      if (qualityMetrics.showsInterest) engagementScore += 2;\r\n      if (communicationPatterns.isQuestion) engagementScore += 1;\r\n      if (communicationPatterns.isCollaborative) engagementScore += 2;\r\n\r\n      // Professionalism scoring\r\n      if (qualityMetrics.isProfessional) professionalismScore += 2;\r\n      if (qualityMetrics.hasGreeting) professionalismScore += 1;\r\n      if (qualityMetrics.hasClosing) professionalismScore += 1;\r\n      if (qualityMetrics.hasTechnicalTerms) professionalismScore += 1;\r\n      if (!(/\\b(damn|hell|shit|fuck|stupid|idiot)\\b/i.test(text))) professionalismScore += 1;\r\n\r\n      // Context awareness scoring\r\n      if (contextIndicators.mentionsPodProtocol) contextScore += 2;\r\n      if (contextIndicators.mentionsCapabilities) contextScore += 1;\r\n      if (contextIndicators.mentionsCollaboration) contextScore += 2;\r\n      if (contextIndicators.mentionsTransaction) contextScore += 1;\r\n      if (contextIndicators.showsUnderstanding) contextScore += 1;\r\n\r\n      // Normalize scores (0-1 scale)\r\n      const maxClarityScore = 8;\r\n      const maxEngagementScore = 8;\r\n      const maxProfessionalismScore = 6;\r\n      const maxContextScore = 7;\r\n\r\n      const normalizedScores = {\r\n        clarity: Math.min(clarityScore / maxClarityScore, 1),\r\n        engagement: Math.min(engagementScore / maxEngagementScore, 1),\r\n        professionalism: Math.min(professionalismScore / maxProfessionalismScore, 1),\r\n        contextAwareness: Math.min(contextScore / maxContextScore, 1),\r\n      };\r\n\r\n      // Calculate overall quality score\r\n      const overallQuality = (\r\n        normalizedScores.clarity * 0.3 +\r\n        normalizedScores.engagement * 0.3 +\r\n        normalizedScores.professionalism * 0.2 +\r\n        normalizedScores.contextAwareness * 0.2\r\n      );\r\n\r\n      // Determine quality level\r\n      let qualityLevel = \"low\";\r\n      if (overallQuality >= 0.8) {\r\n        qualityLevel = \"excellent\";\r\n      } else if (overallQuality >= 0.6) {\r\n        qualityLevel = \"good\";\r\n      } else if (overallQuality >= 0.4) {\r\n        qualityLevel = \"fair\";\r\n      } else if (overallQuality >= 0.2) {\r\n        qualityLevel = \"poor\";\r\n      }\r\n\r\n      const evaluation = {\r\n        overallQuality,\r\n        qualityLevel,\r\n        scores: normalizedScores,\r\n        rawScores: {\r\n          clarity: clarityScore,\r\n          engagement: engagementScore,\r\n          professionalism: professionalismScore,\r\n          contextAwareness: contextScore,\r\n        },\r\n        metrics: qualityMetrics,\r\n        patterns: communicationPatterns,\r\n        contextIndicators,\r\n        recommendations: [] as string[],\r\n        strengths: [] as string[],\r\n        improvements: [] as string[],\r\n      };\r\n\r\n      // Generate recommendations and feedback\r\n      if (normalizedScores.clarity >= 0.8) {\r\n        evaluation.strengths.push(\"Clear and detailed communication\");\r\n      } else if (normalizedScores.clarity < 0.4) {\r\n        evaluation.improvements.push(\"Add more detail and specific information\");\r\n      }\r\n\r\n      if (normalizedScores.engagement >= 0.8) {\r\n        evaluation.strengths.push(\"High engagement and interaction quality\");\r\n      } else if (normalizedScores.engagement < 0.4) {\r\n        evaluation.improvements.push(\"Increase engagement with questions and collaborative language\");\r\n      }\r\n\r\n      if (normalizedScores.professionalism >= 0.8) {\r\n        evaluation.strengths.push(\"Professional and courteous communication\");\r\n      } else if (normalizedScores.professionalism < 0.4) {\r\n        evaluation.improvements.push(\"Use more professional language and proper greetings/closings\");\r\n      }\r\n\r\n      if (normalizedScores.contextAwareness >= 0.8) {\r\n        evaluation.strengths.push(\"Strong awareness of PoD Protocol context\");\r\n      } else if (normalizedScores.contextAwareness < 0.4) {\r\n        evaluation.improvements.push(\"Show more understanding of PoD Protocol capabilities and context\");\r\n      }\r\n\r\n      // Overall recommendations\r\n      if (overallQuality >= 0.8) {\r\n        evaluation.recommendations.push(\"Excellent interaction quality - maintain this standard\");\r\n      } else if (overallQuality >= 0.6) {\r\n        evaluation.recommendations.push(\"Good interaction quality - minor improvements possible\");\r\n      } else if (overallQuality >= 0.4) {\r\n        evaluation.recommendations.push(\"Fair interaction quality - focus on clarity and engagement\");\r\n      } else {\r\n        evaluation.recommendations.push(\"Low interaction quality - significant improvements needed\");\r\n      }\r\n\r\n      return {\r\n        score: overallQuality,\r\n        evaluation,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        score: 0,\r\n        evaluation: {\r\n          error: error instanceof Error ? error.message : String(error),\r\n          qualityLevel: \"unknown\",\r\n          overallQuality: 0,\r\n        },\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    }\r\n  },\r\n}; ","import type { Plugin } from \"@elizaos/core\";\nimport { PodProtocolServiceImpl } from \"./services/podProtocolService.js\";\nimport { registerAgent } from \"./actions/registerAgent.js\";\nimport { discoverAgentsAction } from \"./actions/discoverAgents.js\";\nimport { sendMessageAction } from \"./actions/sendMessage.js\";\nimport { createChannelAction } from \"./actions/createChannel.js\";\nimport { createEscrow } from \"./actions/createEscrow.js\";\nimport { joinChannel } from \"./actions/joinChannel.js\";\nimport { getProtocolStats } from \"./actions/getProtocolStats.js\";\nimport { getReputation } from \"./actions/getReputation.js\";\nimport { agentStatusProvider } from \"./providers/agentStatusProvider.js\";\nimport { protocolStatsProvider } from \"./providers/protocolStatsProvider.js\";\nimport { collaborationEvaluator } from \"./evaluators/collaborationEvaluator.js\";\nimport { reputationEvaluator } from \"./evaluators/reputationEvaluator.js\";\nimport { interactionQualityEvaluator } from \"./evaluators/interactionQualityEvaluator.js\";\n\n/**\n * PoD Protocol Plugin for ElizaOS\n * \n * Enables AI agents to communicate and collaborate on the Solana blockchain\n * through the PoD Protocol network.\n * \n * Features:\n * - Agent registration with blockchain identity\n * - Cross-platform agent discovery\n * - Secure blockchain messaging\n * - Multi-agent collaboration channels\n * - Escrow transactions for secure collaborations\n * - Reputation building through on-chain interactions\n * - Advanced channel management\n * - Protocol analytics and insights\n * - Trust metrics and reputation scoring\n */\nexport const podComPlugin: Plugin = {\n  name: \"podcom\",\n  description: \"Blockchain-powered AI agent communication on Solana via PoD Protocol\",\n  \n  // Services\n  services: [PodProtocolServiceImpl],\n  \n  // Actions - Core Features\n  actions: [\n    // Basic Protocol Actions\n    registerAgent,\n    discoverAgentsAction,\n    sendMessageAction,\n    \n    // Channel Management\n    createChannelAction,\n    joinChannel,\n    \n    // Escrow & Transactions\n    createEscrow,\n    \n    // Analytics & Reputation\n    getProtocolStats,\n    getReputation,\n  ],\n  \n  // Providers - Context & State\n  providers: [\n    agentStatusProvider,\n    protocolStatsProvider,\n  ],\n  \n  // Evaluators - Intelligence & Analysis\n  evaluators: [\n    collaborationEvaluator,\n    reputationEvaluator,\n    interactionQualityEvaluator,\n  ],\n  \n  // Plugin configuration\n  config: {\n    // Environment variables required for the plugin\n    requiredEnvVars: [\n      \"POD_RPC_ENDPOINT\",\n      \"POD_PROGRAM_ID\", \n      \"POD_WALLET_PRIVATE_KEY\"\n    ],\n    \n    // Optional environment variables\n    optionalEnvVars: [\n      \"POD_AGENT_NAME\",\n      \"POD_AGENT_CAPABILITIES\",\n      \"POD_MCP_ENDPOINT\",\n      \"POD_AUTO_REGISTER\"\n    ],\n    \n    // Default configuration values\n    defaults: {\n      POD_RPC_ENDPOINT: \"https://api.devnet.solana.com\",\n      POD_PROGRAM_ID: \"HEpGLgYsE1kP8aoYKyLFc3JVVrofS7T4zEA6fWBJsZps\",\n      POD_AGENT_CAPABILITIES: \"conversation,analysis,collaboration\",\n      POD_MCP_ENDPOINT: \"http://localhost:3000\",\n      POD_AUTO_REGISTER: \"true\"\n    }\n  },\n  \n  // Plugin initialization\n  async init(runtime) {\n    // The service will handle initialization automatically\n    console.info(\"PoD Protocol plugin loaded successfully with advanced features\");\n  },\n};\n\n// Export types and utilities for external use\nexport * from \"./types.js\";\nexport * from \"./environment.js\";\nexport { PodProtocolServiceImpl } from \"./services/podProtocolService.js\";\n\n// Default export\nexport default podComPlugin;"]}